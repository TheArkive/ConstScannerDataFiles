{"__const_list":{"HTTPAPI_LINKAGE":{"comment":"","exp":"DECLSPEC_IMPORT","file":"http.h","line":2661,"type":"Unknown","value":"DECLSPEC_IMPORT"},"HTTPAPI_VERSION_1":{"comment":"","exp":"{ 1, 0 }","file":"http.h","line":2064,"type":"Other","value":"{ 1, 0 }"},"HTTPAPI_VERSION_2":{"comment":"","exp":"{ 2, 0 }","file":"http.h","line":2060,"type":"Other","value":"{ 2, 0 }"},"HTTP_AUTH_ENABLE_ALL":{"comment":"","exp":"(HTTP_AUTH_ENABLE_BASIC | HTTP_AUTH_ENABLE_DIGEST | HTTP_AUTH_ENABLE_NTLM | HTTP_AUTH_ENABLE_NEGOTIATE | HTTP_AUTH_ENABLE_KERBEROS)","file":"http.h","line":414,"type":"Integer","value":31},"HTTP_AUTH_ENABLE_BASIC":{"comment":"","exp":"(0x00000001)","file":"http.h","line":408,"type":"Integer","value":1},"HTTP_AUTH_ENABLE_DIGEST":{"comment":"","exp":"(0x00000002)","file":"http.h","line":409,"type":"Integer","value":2},"HTTP_AUTH_ENABLE_KERBEROS":{"comment":"","exp":"(0x00000010)","file":"http.h","line":412,"type":"Integer","value":16},"HTTP_AUTH_ENABLE_NEGOTIATE":{"comment":"","exp":"(0x00000008)","file":"http.h","line":411,"type":"Integer","value":8},"HTTP_AUTH_ENABLE_NTLM":{"comment":"","exp":"(0x00000004)","file":"http.h","line":410,"type":"Integer","value":4},"HTTP_AUTH_EX_FLAG_CAPTURE_CREDENTIAL":{"comment":"","exp":"(0x02)","file":"http.h","line":427,"type":"Integer","value":2},"HTTP_AUTH_EX_FLAG_ENABLE_KERBEROS_CREDENTIAL_CACHING":{"comment":"","exp":"(0x01)","file":"http.h","line":426,"type":"Integer","value":1},"HTTP_BYTE_RANGE_TO_EOF":{"comment":"","exp":"((ULONGLONG)-1)","file":"http.h","line":937,"type":"Integer","value":-1},"HTTP_CHANNEL_BIND_CLIENT_SERVICE":{"comment":"","exp":"0x10","file":"http.h","line":509,"type":"Integer","value":16},"HTTP_CHANNEL_BIND_DOTLESS_SERVICE":{"comment":"","exp":"0x4","file":"http.h","line":502,"type":"Integer","value":4},"HTTP_CHANNEL_BIND_NO_SERVICE_NAME_CHECK":{"comment":"","exp":"0x2","file":"http.h","line":501,"type":"Integer","value":2},"HTTP_CHANNEL_BIND_PROXY":{"comment":"","exp":"0x1","file":"http.h","line":494,"type":"Integer","value":1},"HTTP_CHANNEL_BIND_PROXY_COHOSTING":{"comment":"","exp":"0x20","file":"http.h","line":495,"type":"Integer","value":32},"HTTP_CHANNEL_BIND_SECURE_CHANNEL_TOKEN":{"comment":"","exp":"0x8","file":"http.h","line":508,"type":"Integer","value":8},"HTTP_CREATE_REQUEST_QUEUE_FLAG_CONTROLLER":{"comment":"","exp":"(0x00000002)","file":"http.h","line":817,"type":"Integer","value":2},"HTTP_CREATE_REQUEST_QUEUE_FLAG_OPEN_EXISTING":{"comment":"","exp":"(0x00000001)","file":"http.h","line":816,"type":"Integer","value":1},"HTTP_DEMAND_CBT":{"comment":"","exp":"0x00000004","file":"http.h","line":80,"type":"Integer","value":4},"HTTP_FLUSH_RESPONSE_FLAG_RECURSIVE":{"comment":"","exp":"0x00000001","file":"http.h","line":899,"type":"Integer","value":1},"HTTP_INITIALIZE_CONFIG":{"comment":"","exp":"0x00000002","file":"http.h","line":79,"type":"Integer","value":2},"HTTP_INITIALIZE_SERVER":{"comment":"","exp":"0x00000001","file":"http.h","line":78,"type":"Integer","value":1},"HTTP_LIMIT_INFINITE":{"comment":"","exp":"((ULONG)-1)","file":"http.h","line":282,"type":"Integer","value":-1},"HTTP_LOGGING_FLAG_LOCAL_TIME_ROLLOVER":{"comment":"","exp":"(0x00000001)","file":"http.h","line":647,"type":"Integer","value":1},"HTTP_LOGGING_FLAG_LOG_ERRORS_ONLY":{"comment":"","exp":"(0x00000004)","file":"http.h","line":649,"type":"Integer","value":4},"HTTP_LOGGING_FLAG_LOG_SUCCESS_ONLY":{"comment":"","exp":"(0x00000008)","file":"http.h","line":650,"type":"Integer","value":8},"HTTP_LOGGING_FLAG_USE_UTF8_CONVERSION":{"comment":"","exp":"(0x00000002)","file":"http.h","line":648,"type":"Integer","value":2},"HTTP_LOG_FIELD_BYTES_RECV":{"comment":"","exp":"0x00002000","file":"http.h","line":570,"type":"Integer","value":8192},"HTTP_LOG_FIELD_BYTES_SENT":{"comment":"","exp":"0x00001000","file":"http.h","line":569,"type":"Integer","value":4096},"HTTP_LOG_FIELD_CLIENT_IP":{"comment":"","exp":"0x00000004","file":"http.h","line":559,"type":"Integer","value":4},"HTTP_LOG_FIELD_CLIENT_PORT":{"comment":"","exp":"0x00400000","file":"http.h","line":587,"type":"Integer","value":4194304},"HTTP_LOG_FIELD_COMPUTER_NAME":{"comment":"","exp":"0x00000020","file":"http.h","line":562,"type":"Integer","value":32},"HTTP_LOG_FIELD_COOKIE":{"comment":"","exp":"0x00020000","file":"http.h","line":574,"type":"Integer","value":131072},"HTTP_LOG_FIELD_DATE":{"comment":"","exp":"0x00000001","file":"http.h","line":557,"type":"Integer","value":1},"HTTP_LOG_FIELD_HOST":{"comment":"","exp":"0x00100000","file":"http.h","line":577,"type":"Integer","value":1048576},"HTTP_LOG_FIELD_METHOD":{"comment":"","exp":"0x00000080","file":"http.h","line":564,"type":"Integer","value":128},"HTTP_LOG_FIELD_QUEUE_NAME":{"comment":"","exp":"0x04000000","file":"http.h","line":591,"type":"Integer","value":67108864},"HTTP_LOG_FIELD_REASON":{"comment":"","exp":"0x02000000","file":"http.h","line":590,"type":"Integer","value":33554432},"HTTP_LOG_FIELD_REFERER":{"comment":"","exp":"0x00040000","file":"http.h","line":575,"type":"Integer","value":262144},"HTTP_LOG_FIELD_SERVER_IP":{"comment":"","exp":"0x00000040","file":"http.h","line":563,"type":"Integer","value":64},"HTTP_LOG_FIELD_SERVER_PORT":{"comment":"","exp":"0x00008000","file":"http.h","line":572,"type":"Integer","value":32768},"HTTP_LOG_FIELD_SITE_ID":{"comment":"","exp":"0x01000000","file":"http.h","line":589,"type":"Integer","value":16777216},"HTTP_LOG_FIELD_SITE_NAME":{"comment":"","exp":"0x00000010","file":"http.h","line":561,"type":"Integer","value":16},"HTTP_LOG_FIELD_STATUS":{"comment":"","exp":"0x00000400","file":"http.h","line":567,"type":"Integer","value":1024},"HTTP_LOG_FIELD_STREAM_ID":{"comment":"","exp":"0x08000000","file":"http.h","line":579,"type":"Integer","value":134217728},"HTTP_LOG_FIELD_STREAM_ID_EX":{"comment":"","exp":"0x10000000","file":"http.h","line":580,"type":"Integer","value":268435456},"HTTP_LOG_FIELD_SUB_STATUS":{"comment":"","exp":"0x00200000","file":"http.h","line":578,"type":"Integer","value":2097152},"HTTP_LOG_FIELD_TIME":{"comment":"","exp":"0x00000002","file":"http.h","line":558,"type":"Integer","value":2},"HTTP_LOG_FIELD_TIME_TAKEN":{"comment":"","exp":"0x00004000","file":"http.h","line":571,"type":"Integer","value":16384},"HTTP_LOG_FIELD_TRANSPORT_TYPE":{"comment":"","exp":"0x20000000","file":"http.h","line":581,"type":"Integer","value":536870912},"HTTP_LOG_FIELD_URI":{"comment":"","exp":"0x00800000","file":"http.h","line":588,"type":"Integer","value":8388608},"HTTP_LOG_FIELD_URI_QUERY":{"comment":"","exp":"0x00000200","file":"http.h","line":566,"type":"Integer","value":512},"HTTP_LOG_FIELD_URI_STEM":{"comment":"","exp":"0x00000100","file":"http.h","line":565,"type":"Integer","value":256},"HTTP_LOG_FIELD_USER_AGENT":{"comment":"","exp":"0x00010000","file":"http.h","line":573,"type":"Integer","value":65536},"HTTP_LOG_FIELD_USER_NAME":{"comment":"","exp":"0x00000008","file":"http.h","line":560,"type":"Integer","value":8},"HTTP_LOG_FIELD_VERSION":{"comment":"","exp":"0x00080000","file":"http.h","line":576,"type":"Integer","value":524288},"HTTP_LOG_FIELD_WIN32_STATUS":{"comment":"","exp":"0x00000800","file":"http.h","line":568,"type":"Integer","value":2048},"HTTP_MAX_SERVER_QUEUE_LENGTH":{"comment":"","exp":"0x7FFFFFFF","file":"http.h","line":169,"type":"Integer","value":2147483647},"HTTP_MIN_ALLOWED_BANDWIDTH_THROTTLING_RATE":{"comment":"","exp":"((ULONG)1024)","file":"http.h","line":275,"type":"Integer","value":1024},"HTTP_MIN_ALLOWED_LOG_FILE_ROLLOVER_SIZE":{"comment":"","exp":"((ULONG)(1 * 1024 * 1024))","file":"http.h","line":625,"type":"Integer","value":1048576},"HTTP_MIN_SERVER_QUEUE_LENGTH":{"comment":"","exp":"1","file":"http.h","line":170,"type":"Integer","value":1},"HTTP_NULL_ID":{"comment":"","exp":"(0ui64)","file":"http.h","line":926,"type":"Integer","value":0},"HTTP_RECEIVE_REQUEST_ENTITY_BODY_FLAG_FILL_BUFFER":{"comment":"","exp":"0x00000001","file":"http.h","line":845,"type":"Integer","value":1},"HTTP_RECEIVE_REQUEST_FLAG_COPY_BODY":{"comment":"","exp":"0x00000001","file":"http.h","line":831,"type":"Integer","value":1},"HTTP_RECEIVE_REQUEST_FLAG_FLUSH_BODY":{"comment":"","exp":"0x00000002","file":"http.h","line":832,"type":"Integer","value":2},"HTTP_RECEIVE_SECURE_CHANNEL_TOKEN":{"comment":"","exp":"0x1","file":"http.h","line":1484,"type":"Integer","value":1},"HTTP_REQUEST_AUTH_FLAG_TOKEN_FOR_CACHED_CRED":{"comment":"","exp":"(0x00000001)","file":"http.h","line":1657,"type":"Integer","value":1},"HTTP_REQUEST_FLAG_HTTP2":{"comment":"","exp":"0x00000004","file":"http.h","line":1877,"type":"Integer","value":4},"HTTP_REQUEST_FLAG_IP_ROUTED":{"comment":"","exp":"0x00000002","file":"http.h","line":1876,"type":"Integer","value":2},"HTTP_REQUEST_FLAG_MORE_ENTITY_BODY_EXISTS":{"comment":"","exp":"0x00000001","file":"http.h","line":1875,"type":"Integer","value":1},"HTTP_REQUEST_PROPERTY_SNI_FLAG_NO_SNI":{"comment":"","exp":"0x00000002","file":"http.h","line":2647,"type":"Integer","value":2},"HTTP_REQUEST_PROPERTY_SNI_FLAG_SNI_USED":{"comment":"","exp":"0x00000001","file":"http.h","line":2646,"type":"Integer","value":1},"HTTP_REQUEST_PROPERTY_SNI_HOST_MAX_LENGTH":{"comment":"","exp":"255","file":"http.h","line":2635,"type":"Integer","value":255},"HTTP_REQUEST_SIZING_INFO_FLAG_FIRST_REQUEST":{"comment":"","exp":"0x00000008","file":"http.h","line":1550,"type":"Integer","value":8},"HTTP_REQUEST_SIZING_INFO_FLAG_TCP_FAST_OPEN":{"comment":"","exp":"0x00000001","file":"http.h","line":1547,"type":"Integer","value":1},"HTTP_REQUEST_SIZING_INFO_FLAG_TLS_FALSE_START":{"comment":"","exp":"0x00000004","file":"http.h","line":1549,"type":"Integer","value":4},"HTTP_REQUEST_SIZING_INFO_FLAG_TLS_SESSION_RESUMPTION":{"comment":"","exp":"0x00000002","file":"http.h","line":1548,"type":"Integer","value":2},"HTTP_RESPONSE_FLAG_MORE_ENTITY_BODY_EXISTS":{"comment":"","exp":"0x00000002","file":"http.h","line":1944,"type":"Integer","value":2},"HTTP_RESPONSE_FLAG_MULTIPLE_ENCODINGS_AVAILABLE":{"comment":"","exp":"0x00000001","file":"http.h","line":1943,"type":"Integer","value":1},"HTTP_RESPONSE_INFO_FLAGS_PRESERVE_ORDER":{"comment":"","exp":"0x00000001","file":"http.h","line":1963,"type":"Integer","value":1},"HTTP_SEND_RESPONSE_FLAG_BUFFER_DATA":{"comment":"","exp":"0x00000004","file":"http.h","line":885,"type":"Integer","value":4},"HTTP_SEND_RESPONSE_FLAG_DISCONNECT":{"comment":"","exp":"0x00000001","file":"http.h","line":883,"type":"Integer","value":1},"HTTP_SEND_RESPONSE_FLAG_ENABLE_NAGLING":{"comment":"","exp":"0x00000008","file":"http.h","line":886,"type":"Integer","value":8},"HTTP_SEND_RESPONSE_FLAG_GOAWAY":{"comment":"","exp":"0x00000100","file":"http.h","line":889,"type":"Integer","value":256},"HTTP_SEND_RESPONSE_FLAG_MORE_DATA":{"comment":"","exp":"0x00000002","file":"http.h","line":884,"type":"Integer","value":2},"HTTP_SEND_RESPONSE_FLAG_OPAQUE":{"comment":"","exp":"0x00000040","file":"http.h","line":888,"type":"Integer","value":64},"HTTP_SEND_RESPONSE_FLAG_PROCESS_RANGES":{"comment":"","exp":"0x00000020","file":"http.h","line":887,"type":"Integer","value":32},"HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_HTTP2":{"comment":"","exp":"0x00000010","file":"http.h","line":2364,"type":"Integer","value":16},"HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_LEGACY_TLS":{"comment":"","exp":"0x00000400","file":"http.h","line":2371,"type":"Integer","value":1024},"HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_OCSP_STAPLING":{"comment":"","exp":"0x00000080","file":"http.h","line":2368,"type":"Integer","value":128},"HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_QUIC":{"comment":"","exp":"0x00000020","file":"http.h","line":2365,"type":"Integer","value":32},"HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_TLS12":{"comment":"","exp":"0x00001000","file":"http.h","line":2373,"type":"Integer","value":4096},"HTTP_SERVICE_CONFIG_SSL_FLAG_DISABLE_TLS13":{"comment":"","exp":"0x00000040","file":"http.h","line":2366,"type":"Integer","value":64},"HTTP_SERVICE_CONFIG_SSL_FLAG_ENABLE_SESSION_TICKET":{"comment":"","exp":"0x00000800","file":"http.h","line":2372,"type":"Integer","value":2048},"HTTP_SERVICE_CONFIG_SSL_FLAG_ENABLE_TOKEN_BINDING":{"comment":"","exp":"0x00000100","file":"http.h","line":2369,"type":"Integer","value":256},"HTTP_SERVICE_CONFIG_SSL_FLAG_LOG_EXTENDED_EVENTS":{"comment":"","exp":"0x00000200","file":"http.h","line":2370,"type":"Integer","value":512},"HTTP_SERVICE_CONFIG_SSL_FLAG_NEGOTIATE_CLIENT_CERT":{"comment":"","exp":"0x00000002","file":"http.h","line":2358,"type":"Integer","value":2},"HTTP_SERVICE_CONFIG_SSL_FLAG_NO_RAW_FILTER":{"comment":"","exp":"0x00000004","file":"http.h","line":2360,"type":"Integer","value":4},"HTTP_SERVICE_CONFIG_SSL_FLAG_REJECT":{"comment":"","exp":"0x00000008","file":"http.h","line":2362,"type":"Integer","value":8},"HTTP_SERVICE_CONFIG_SSL_FLAG_USE_DS_MAPPER":{"comment":"","exp":"0x00000001","file":"http.h","line":2357,"type":"Integer","value":1},"HTTP_URL_FLAG_REMOVE_ALL":{"comment":"","exp":"0x00000001","file":"http.h","line":1434,"type":"Integer","value":1},"HTTP_VERSION_0_9":{"comment":"","exp":"{ 0, 9 }","file":"http.h","line":962,"type":"Other","value":"{ 0, 9 }"},"HTTP_VERSION_1_0":{"comment":"","exp":"{ 1, 0 }","file":"http.h","line":963,"type":"Other","value":"{ 1, 0 }"},"HTTP_VERSION_1_1":{"comment":"","exp":"{ 1, 1 }","file":"http.h","line":964,"type":"Other","value":"{ 1, 1 }"},"HTTP_VERSION_2_0":{"comment":"","exp":"{ 2, 0 }","file":"http.h","line":965,"type":"Other","value":"{ 2, 0 }"},"HTTP_VERSION_3_0":{"comment":"","exp":"{ 3, 0 }","file":"http.h","line":966,"type":"Other","value":"{ 3, 0 }"},"HTTP_VERSION_UNKNOWN":{"comment":"","exp":"{ 0, 0 }","file":"http.h","line":961,"type":"Other","value":"{ 0, 0 }"},"_HTTP2_SETTINGS_LIMITS_PARAM":{"comment":"","exp":"","file":"http.h","line":2280,"type":"Struct","value":"typedef struct _HTTP2_SETTINGS_LIMITS_PARAM\\r\\n{\\r\\n    \/\/\\r\\n    \/\/ The maximum allowed settings per SETTINGS frame.\\r\\n    \/\/\\r\\n    DWORD Http2MaxSettingsPerFrame;\\r\\n    \/\/\\r\\n    \/\/ The maximum settings we will process in a minute.\\r\\n    \/\/\\r\\n    DWORD Http2MaxSettingsPerMinute;\\r\\n} HTTP2_SETTINGS_LIMITS_PARAM, *PHTTP2_SETTINGS_LIMITS_PARAM;"},"_HTTP2_WINDOW_SIZE_PARAM":{"comment":"","exp":"","file":"http.h","line":2271,"type":"Struct","value":"typedef struct _HTTP2_WINDOW_SIZE_PARAM\\r\\n{\\r\\n    \/\/\\r\\n    \/\/ The http\/2 connection receive window size.\\r\\n    \/\/\\r\\n    DWORD Http2ReceiveWindowSize;\\r\\n} HTTP2_WINDOW_SIZE_PARAM, *PHTTP2_WINDOW_SIZE_PARAM;"},"_HTTPAPI_VERSION":{"comment":"","exp":"","file":"http.h","line":2048,"type":"Struct","value":"typedef struct _HTTPAPI_VERSION\\r\\n{\\r\\n    USHORT HttpApiMajorVersion;\\r\\n    USHORT HttpApiMinorVersion;\\r\\n} HTTPAPI_VERSION, *PHTTPAPI_VERSION;"},"_HTTP_503_RESPONSE_VERBOSITY":{"comment":"","exp":"","file":"http.h","line":209,"type":"Enum","value":"typedef enum _HTTP_503_RESPONSE_VERBOSITY\\r\\n{\\r\\n    \/\/\\r\\n    \/\/ Instead of sending a 503 response, the connection will be reset.\\r\\n    \/\/ This is the default behavior.\\r\\n    \/\/\\r\\n    Http503ResponseVerbosityBasic,\\r\\n    \/\/\\r\\n    \/\/ Will send a 503 w\/ a generic reason phrase.\\r\\n    \/\/\\r\\n    Http503ResponseVerbosityLimited,\\r\\n    \/\/\\r\\n    \/\/ Will send a 503 w\/ a detailed reason phrase.\\r\\n    \/\/\\r\\n    Http503ResponseVerbosityFull\\r\\n} HTTP_503_RESPONSE_VERBOSITY, *PHTTP_503_RESPONSE_VERBOSITY;"},"_HTTP_AUTHENTICATION_HARDENING_LEVELS":{"comment":"","exp":"","file":"http.h","line":482,"type":"Enum","value":"typedef enum _HTTP_AUTHENTICATION_HARDENING_LEVELS\\r\\n{\\r\\n    HttpAuthenticationHardeningLegacy = 0,\\r\\n    HttpAuthenticationHardeningMedium,\\r\\n    HttpAuthenticationHardeningStrict\\r\\n} HTTP_AUTHENTICATION_HARDENING_LEVELS;"},"_HTTP_AUTH_STATUS":{"comment":"","exp":"","file":"http.h","line":1441,"type":"Enum","value":"typedef enum _HTTP_AUTH_STATUS\\r\\n{\\r\\n    HttpAuthStatusSuccess,\\r\\n    HttpAuthStatusNotAuthenticated,\\r\\n    HttpAuthStatusFailure\\r\\n} HTTP_AUTH_STATUS, *PHTTP_AUTH_STATUS;"},"_HTTP_BANDWIDTH_LIMIT_INFO":{"comment":"","exp":"","file":"http.h","line":254,"type":"Struct","value":"typedef struct _HTTP_BANDWIDTH_LIMIT_INFO\\r\\n{\\r\\n    HTTP_PROPERTY_FLAGS Flags;\\r\\n    ULONG MaxBandwidth;\\r\\n} HTTP_BANDWIDTH_LIMIT_INFO, *PHTTP_BANDWIDTH_LIMIT_INFO;"},"_HTTP_BINDING_INFO":{"comment":"","exp":"","file":"http.h","line":747,"type":"Struct","value":"typedef struct _HTTP_BINDING_INFO\\r\\n{\\r\\n    HTTP_PROPERTY_FLAGS Flags;\\r\\n    HANDLE RequestQueueHandle;\\r\\n} HTTP_BINDING_INFO, *PHTTP_BINDING_INFO;"},"_HTTP_BYTE_RANGE":{"comment":"","exp":"","file":"http.h","line":939,"type":"Struct","value":"typedef struct _HTTP_BYTE_RANGE\\r\\n{\\r\\n    ULARGE_INTEGER StartingOffset;\\r\\n    ULARGE_INTEGER Length;\\r\\n} HTTP_BYTE_RANGE, *PHTTP_BYTE_RANGE;"},"_HTTP_CACHE_POLICY":{"comment":"","exp":"","file":"http.h","line":2107,"type":"Struct","value":"typedef struct _HTTP_CACHE_POLICY\\r\\n{\\r\\n    HTTP_CACHE_POLICY_TYPE  Policy;\\r\\n    ULONG                   SecondsToLive;\\r\\n} HTTP_CACHE_POLICY, *PHTTP_CACHE_POLICY;"},"_HTTP_CACHE_POLICY_TYPE":{"comment":"","exp":"","file":"http.h","line":2092,"type":"Enum","value":"typedef enum _HTTP_CACHE_POLICY_TYPE\\r\\n{\\r\\n    HttpCachePolicyNocache,\\r\\n    HttpCachePolicyUserInvalidates,\\r\\n    HttpCachePolicyTimeToLive,\\r\\n    HttpCachePolicyMaximum\\r\\n} HTTP_CACHE_POLICY_TYPE, *PHTTP_CACHE_POLICY_TYPE;"},"_HTTP_CHANNEL_BIND_INFO":{"comment":"","exp":"","file":"http.h","line":515,"type":"Struct","value":"typedef struct _HTTP_CHANNEL_BIND_INFO\\r\\n{\\r\\n    HTTP_AUTHENTICATION_HARDENING_LEVELS Hardening;\\r\\n    ULONG Flags;\\r\\n    PHTTP_SERVICE_BINDING_BASE * ServiceNames;\\r\\n    ULONG NumberOfServiceNames;\\r\\n} HTTP_CHANNEL_BIND_INFO, *PHTTP_CHANNEL_BIND_INFO;"},"_HTTP_CONNECTION_LIMIT_INFO":{"comment":"","exp":"","file":"http.h","line":247,"type":"Struct","value":"typedef struct _HTTP_CONNECTION_LIMIT_INFO\\r\\n{\\r\\n    HTTP_PROPERTY_FLAGS Flags;\\r\\n    ULONG MaxConnections;\\r\\n} HTTP_CONNECTION_LIMIT_INFO, *PHTTP_CONNECTION_LIMIT_INFO;"},"_HTTP_COOKED_URL":{"comment":"","exp":"","file":"http.h","line":1398,"type":"Struct","value":"typedef struct _HTTP_COOKED_URL\\r\\n{\\r\\n    \/\/\\r\\n    \/\/ Pointers overlap and point into pFullUrl. NULL if not present.\\r\\n    \/\/\\r\\n    USHORT FullUrlLength;       \/\/ in bytes not including the NUL\\r\\n    USHORT HostLength;          \/\/ in bytes (no NUL)\\r\\n    USHORT AbsPathLength;       \/\/ in bytes (no NUL)\\r\\n    USHORT QueryStringLength;   \/\/ in bytes (no NUL)\\r\\n    PCWSTR pFullUrl;     \/\/ points to \"http:\/\/hostname:port\/abs\/...\/path?query\"\\r\\n    PCWSTR pHost;        \/\/ points to the first char in the hostname\\r\\n    PCWSTR pAbsPath;     \/\/ Points to the 3rd '\/' char\\r\\n    PCWSTR pQueryString; \/\/ Points to the 1st '?' char or NULL\\r\\n} HTTP_COOKED_URL, *PHTTP_COOKED_URL;"},"_HTTP_DATA_CHUNK":{"comment":"","exp":"","file":"http.h","line":1235,"type":"Struct","value":"typedef struct _HTTP_DATA_CHUNK\\r\\n{\\r\\n    \/\/\\r\\n    \/\/ The type of this data chunk.\\r\\n    \/\/\\r\\n    HTTP_DATA_CHUNK_TYPE DataChunkType;\\r\\n    \/\/\\r\\n    \/\/ The data chunk structures, one per supported data chunk type.\\r\\n    \/\/\\r\\n    union\\r\\n    {\\r\\n        \/\/\\r\\n        \/\/ From-memory data chunk.\\r\\n        \/\/\\r\\n        struct\\r\\n        {\\r\\n            PVOID pBuffer;\\r\\n            ULONG BufferLength;\\r\\n        } FromMemory;\\r\\n        \/\/\\r\\n        \/\/ From-file handle data chunk.\\r\\n        \/\/\\r\\n        struct\\r\\n        {\\r\\n            HTTP_BYTE_RANGE ByteRange;\\r\\n            HANDLE          FileHandle;\\r\\n        } FromFileHandle;\\r\\n        \/\/\\r\\n        \/\/ From-fragment cache data chunk.\\r\\n        \/\/\\r\\n        struct\\r\\n        {\\r\\n            USHORT FragmentNameLength;      \/\/ in bytes not including the NUL\\r\\n            PCWSTR pFragmentName;\\r\\n        } FromFragmentCache;\\r\\n        \/\/\\r\\n        \/\/ From-fragment cache data chunk that specifies a byte range.\\r\\n        \/\/\\r\\n        struct\\r\\n        {\\r\\n            HTTP_BYTE_RANGE ByteRange;\\r\\n            PCWSTR pFragmentName;           \/\/ NULL-terminated string\\r\\n        } FromFragmentCacheEx;\\r\\n    };\\r\\n} HTTP_DATA_CHUNK, *PHTTP_DATA_CHUNK;"},"_HTTP_DATA_CHUNK_TYPE":{"comment":"","exp":"","file":"http.h","line":1219,"type":"Enum","value":"typedef enum _HTTP_DATA_CHUNK_TYPE\\r\\n{\\r\\n    HttpDataChunkFromMemory,\\r\\n    HttpDataChunkFromFileHandle,\\r\\n    HttpDataChunkFromFragmentCache,\\r\\n    HttpDataChunkFromFragmentCacheEx,\\r\\n    HttpDataChunkMaximum\\r\\n} HTTP_DATA_CHUNK_TYPE, *PHTTP_DATA_CHUNK_TYPE;"},"_HTTP_DELEGATE_REQUEST_PROPERTY_ID":{"comment":"","exp":"","file":"http.h","line":1365,"type":"Enum","value":"typedef enum _HTTP_DELEGATE_REQUEST_PROPERTY_ID\\r\\n{\\r\\n    DelegateRequestReservedProperty,\\r\\n} HTTP_DELEGATE_REQUEST_PROPERTY_ID, *PHTTP_DELEGATE_REQUEST_PROPERTY_ID;"},"_HTTP_DELEGATE_REQUEST_PROPERTY_INFO":{"comment":"","exp":"","file":"http.h","line":1371,"type":"Struct","value":"typedef struct _HTTP_DELEGATE_REQUEST_PROPERTY_INFO\\r\\n{\\r\\n    HTTP_DELEGATE_REQUEST_PROPERTY_ID ProperyId;\\r\\n    ULONG PropertyInfoLength;\\r\\n    PVOID PropertyInfo;\\r\\n} HTTP_DELEGATE_REQUEST_PROPERTY_INFO, *PHTTP_DELEGATE_REQUEST_PROPERTY_INFO;"},"_HTTP_ENABLED_STATE":{"comment":"","exp":"","file":"http.h","line":187,"type":"Enum","value":"typedef enum _HTTP_ENABLED_STATE\\r\\n{\\r\\n    HttpEnabledStateActive,\\r\\n    HttpEnabledStateInactive,\\r\\n} HTTP_ENABLED_STATE, *PHTTP_ENABLED_STATE;"},"_HTTP_FLOWRATE_INFO":{"comment":"","exp":"","file":"http.h","line":261,"type":"Struct","value":"typedef struct _HTTP_FLOWRATE_INFO\\r\\n{\\r\\n    HTTP_PROPERTY_FLAGS Flags;\\r\\n    ULONG MaxBandwidth;\\r\\n    ULONG MaxPeakBandwidth;\\r\\n    ULONG BurstSize;\\r\\n} HTTP_FLOWRATE_INFO, *PHTTP_FLOWRATE_INFO;"},"_HTTP_HEADER_ID":{"comment":"","exp":"","file":"http.h","line":1050,"type":"Enum","value":"typedef enum _HTTP_HEADER_ID\\r\\n{\\r\\n    HttpHeaderCacheControl          = 0,    \/\/ general-header [section 4.5]\\r\\n    HttpHeaderConnection            = 1,    \/\/ general-header [section 4.5]\\r\\n    HttpHeaderDate                  = 2,    \/\/ general-header [section 4.5]\\r\\n    HttpHeaderKeepAlive             = 3,    \/\/ general-header [not in rfc]\\r\\n    HttpHeaderPragma                = 4,    \/\/ general-header [section 4.5]\\r\\n    HttpHeaderTrailer               = 5,    \/\/ general-header [section 4.5]\\r\\n    HttpHeaderTransferEncoding      = 6,    \/\/ general-header [section 4.5]\\r\\n    HttpHeaderUpgrade               = 7,    \/\/ general-header [section 4.5]\\r\\n    HttpHeaderVia                   = 8,    \/\/ general-header [section 4.5]\\r\\n    HttpHeaderWarning               = 9,    \/\/ general-header [section 4.5]\\r\\n    HttpHeaderAllow                 = 10,   \/\/ entity-header  [section 7.1]\\r\\n    HttpHeaderContentLength         = 11,   \/\/ entity-header  [section 7.1]\\r\\n    HttpHeaderContentType           = 12,   \/\/ entity-header  [section 7.1]\\r\\n    HttpHeaderContentEncoding       = 13,   \/\/ entity-header  [section 7.1]\\r\\n    HttpHeaderContentLanguage       = 14,   \/\/ entity-header  [section 7.1]\\r\\n    HttpHeaderContentLocation       = 15,   \/\/ entity-header  [section 7.1]\\r\\n    HttpHeaderContentMd5            = 16,   \/\/ entity-header  [section 7.1]\\r\\n    HttpHeaderContentRange          = 17,   \/\/ entity-header  [section 7.1]\\r\\n    HttpHeaderExpires               = 18,   \/\/ entity-header  [section 7.1]\\r\\n    HttpHeaderLastModified          = 19,   \/\/ entity-header  [section 7.1]\\r\\n    \/\/ Request Headers\\r\\n    HttpHeaderAccept                = 20,   \/\/ request-header [section 5.3]\\r\\n    HttpHeaderAcceptCharset         = 21,   \/\/ request-header [section 5.3]\\r\\n    HttpHeaderAcceptEncoding        = 22,   \/\/ request-header [section 5.3]\\r\\n    HttpHeaderAcceptLanguage        = 23,   \/\/ request-header [section 5.3]\\r\\n    HttpHeaderAuthorization         = 24,   \/\/ request-header [section 5.3]\\r\\n    HttpHeaderCookie                = 25,   \/\/ request-header [not in rfc]\\r\\n    HttpHeaderExpect                = 26,   \/\/ request-header [section 5.3]\\r\\n    HttpHeaderFrom                  = 27,   \/\/ request-header [section 5.3]\\r\\n    HttpHeaderHost                  = 28,   \/\/ request-header [section 5.3]\\r\\n    HttpHeaderIfMatch               = 29,   \/\/ request-header [section 5.3]\\r\\n    HttpHeaderIfModifiedSince       = 30,   \/\/ request-header [section 5.3]\\r\\n    HttpHeaderIfNoneMatch           = 31,   \/\/ request-header [section 5.3]\\r\\n    HttpHeaderIfRange               = 32,   \/\/ request-header [section 5.3]\\r\\n    HttpHeaderIfUnmodifiedSince     = 33,   \/\/ request-header [section 5.3]\\r\\n    HttpHeaderMaxForwards           = 34,   \/\/ request-header [section 5.3]\\r\\n    HttpHeaderProxyAuthorization    = 35,   \/\/ request-header [section 5.3]\\r\\n    HttpHeaderReferer               = 36,   \/\/ request-header [section 5.3]\\r\\n    HttpHeaderRange                 = 37,   \/\/ request-header [section 5.3]\\r\\n    HttpHeaderTe                    = 38,   \/\/ request-header [section 5.3]\\r\\n    HttpHeaderTranslate             = 39,   \/\/ request-header [webDAV, not in rfc 2518]\\r\\n    HttpHeaderUserAgent             = 40,   \/\/ request-header [section 5.3]\\r\\n    HttpHeaderRequestMaximum        = 41,\\r\\n    \/\/ Response Headers\\r\\n    HttpHeaderAcceptRanges          = 20,   \/\/ response-header [section 6.2]\\r\\n    HttpHeaderAge                   = 21,   \/\/ response-header [section 6.2]\\r\\n    HttpHeaderEtag                  = 22,   \/\/ response-header [section 6.2]\\r\\n    HttpHeaderLocation              = 23,   \/\/ response-header [section 6.2]\\r\\n    HttpHeaderProxyAuthenticate     = 24,   \/\/ response-header [section 6.2]\\r\\n    HttpHeaderRetryAfter            = 25,   \/\/ response-header [section 6.2]\\r\\n    HttpHeaderServer                = 26,   \/\/ response-header [section 6.2]\\r\\n    HttpHeaderSetCookie             = 27,   \/\/ response-header [not in rfc]\\r\\n    HttpHeaderVary                  = 28,   \/\/ response-header [section 6.2]\\r\\n    HttpHeaderWwwAuthenticate       = 29,   \/\/ response-header [section 6.2]\\r\\n    HttpHeaderResponseMaximum       = 30,\\r\\n    HttpHeaderMaximum               = 41\\r\\n} HTTP_HEADER_ID, *PHTTP_HEADER_ID;"},"_HTTP_KNOWN_HEADER":{"comment":"","exp":"","file":"http.h","line":1127,"type":"Struct","value":"typedef struct _HTTP_KNOWN_HEADER\\r\\n{\\r\\n    USHORT RawValueLength;     \/\/ in bytes not including the NUL\\r\\n    PCSTR  pRawValue;\\r\\n} HTTP_KNOWN_HEADER, *PHTTP_KNOWN_HEADER;"},"_HTTP_LISTEN_ENDPOINT_INFO":{"comment":"","exp":"","file":"http.h","line":379,"type":"Struct","value":"typedef struct _HTTP_LISTEN_ENDPOINT_INFO\\r\\n{\\r\\n    HTTP_PROPERTY_FLAGS Flags;\\r\\n    BOOLEAN EnableSharing;\\r\\n} HTTP_LISTEN_ENDPOINT_INFO, *PHTTP_LISTEN_ENDPOINT_INFO;"},"_HTTP_LOGGING_INFO":{"comment":"","exp":"","file":"http.h","line":656,"type":"Struct","value":"typedef struct _HTTP_LOGGING_INFO\\r\\n{\\r\\n    \/\/\\r\\n    \/\/ Specifies whether this property exists or not.\\r\\n    \/\/\\r\\n    HTTP_PROPERTY_FLAGS Flags;\\r\\n    \/\/\\r\\n    \/\/ Optional logging flags.\\r\\n    \/\/\\r\\n    ULONG LoggingFlags;\\r\\n    \/\/\\r\\n    \/\/ Optional informatonal software directive string for W3C type logging. Not\\r\\n    \/\/ used for other types of logging. If nothing is provided here HTTPAPI will\\r\\n    \/\/ log a default string. Any arbitrary string could be used here to identify\\r\\n    \/\/ the application. Length cannot be greater than MAX_PATH. Lenght is in\\r\\n    \/\/ bytes.\\r\\n    \/\/\\r\\n    PCWSTR SoftwareName;\\r\\n    USHORT SoftwareNameLength;\\r\\n    \/\/\\r\\n    \/\/ Log file directory must be a fully qualified path.\\r\\n    \/\/ Length must be in number of bytes.\\r\\n    \/\/\\r\\n    USHORT DirectoryNameLength;\\r\\n    PCWSTR DirectoryName;\\r\\n    \/\/\\r\\n    \/\/ Specifies the format for the log files.\\r\\n    \/\/\\r\\n    HTTP_LOGGING_TYPE Format;\\r\\n    \/\/\\r\\n    \/\/ Bitmask value indicates which fields to be logged\\r\\n    \/\/ if the log format is set to W3C. This must be the 'bitwise or'\\r\\n    \/\/ of the HTTP_LOG_FIELD_... values.\\r\\n    \/\/\\r\\n    ULONG Fields;\\r\\n    \/\/\\r\\n    \/\/ Following fields are reserved they must be NULL and zero..\\r\\n    \/\/\\r\\n    PVOID pExtFields;\\r\\n    USHORT NumOfExtFields;\\r\\n    \/\/\\r\\n    \/\/ Reserved must be zero.\\r\\n    \/\/\\r\\n    USHORT MaxRecordSize;\\r\\n    \/\/\\r\\n    \/\/ Defines the rollover type for the log files.\\r\\n    \/\/\\r\\n    HTTP_LOGGING_ROLLOVER_TYPE RolloverType;\\r\\n    \/\/\\r\\n    \/\/ Indicates the maximum size (in bytes) after which\\r\\n    \/\/ the log files should be rolled over. A value of -1\\r\\n    \/\/ (HTTP_LIMIT_INFINITE) indicates an unlimited size.\\r\\n    \/\/ This value is discarded if rollover type is not set to\\r\\n    \/\/ HttpLoggingRolloverSize.\\r\\n    \/\/\\r\\n    ULONG RolloverSize;\\r\\n    \/\/\\r\\n    \/\/ Specifies the security descriptor to be applied to\\r\\n    \/\/ the log files and the sub-directories. If null we will\\r\\n    \/\/ inherit the system default. This security descriptor must\\r\\n    \/\/ be self-relative.\\r\\n    \/\/\\r\\n    PSECURITY_DESCRIPTOR pSecurityDescriptor;\\r\\n} HTTP_LOGGING_INFO, *PHTTP_LOGGING_INFO;"},"_HTTP_LOGGING_ROLLOVER_TYPE":{"comment":"","exp":"","file":"http.h","line":610,"type":"Enum","value":"typedef enum _HTTP_LOGGING_ROLLOVER_TYPE\\r\\n{\\r\\n    HttpLoggingRolloverSize,\\r\\n    HttpLoggingRolloverDaily,\\r\\n    HttpLoggingRolloverWeekly,\\r\\n    HttpLoggingRolloverMonthly,\\r\\n    HttpLoggingRolloverHourly\\r\\n} HTTP_LOGGING_ROLLOVER_TYPE, *PHTTP_LOGGING_ROLLOVER_TYPE;"},"_HTTP_LOGGING_TYPE":{"comment":"","exp":"","file":"http.h","line":597,"type":"Enum","value":"typedef enum _HTTP_LOGGING_TYPE\\r\\n{\\r\\n    HttpLoggingTypeW3C,\\r\\n    HttpLoggingTypeIIS,\\r\\n    HttpLoggingTypeNCSA,\\r\\n    HttpLoggingTypeRaw\\r\\n} HTTP_LOGGING_TYPE, *PHTTP_LOGGING_TYPE;"},"_HTTP_LOG_DATA":{"comment":"","exp":"","file":"http.h","line":1164,"type":"Struct","value":"typedef struct _HTTP_LOG_DATA\\r\\n{\\r\\n    HTTP_LOG_DATA_TYPE Type;\\r\\n} HTTP_LOG_DATA, *PHTTP_LOG_DATA;"},"_HTTP_LOG_DATA_TYPE":{"comment":"","exp":"","file":"http.h","line":1157,"type":"Enum","value":"typedef enum _HTTP_LOG_DATA_TYPE\\r\\n{\\r\\n    HttpLogDataTypeFields = 0\\r\\n} HTTP_LOG_DATA_TYPE, *PHTTP_LOG_DATA_TYPE;"},"_HTTP_LOG_FIELDS_DATA":{"comment":"","exp":"","file":"http.h","line":1172,"type":"Struct","value":"typedef struct _HTTP_LOG_FIELDS_DATA\\r\\n{\\r\\n    HTTP_LOG_DATA Base;\\r\\n    USHORT UserNameLength;\\r\\n    USHORT UriStemLength;\\r\\n    USHORT ClientIpLength;\\r\\n    USHORT ServerNameLength;\\r\\n    USHORT ServiceNameLength;\\r\\n    USHORT ServerIpLength;\\r\\n    USHORT MethodLength;\\r\\n    USHORT UriQueryLength;\\r\\n    USHORT HostLength;\\r\\n    USHORT UserAgentLength;\\r\\n    USHORT CookieLength;\\r\\n    USHORT ReferrerLength;\\r\\n    PWCHAR UserName;\\r\\n    PWCHAR UriStem;\\r\\n    PCHAR  ClientIp;\\r\\n    PCHAR  ServerName;\\r\\n    PCHAR  ServiceName;\\r\\n    PCHAR  ServerIp;\\r\\n    PCHAR  Method;\\r\\n    PCHAR  UriQuery;\\r\\n    PCHAR  Host;\\r\\n    PCHAR  UserAgent;\\r\\n    PCHAR  Cookie;\\r\\n    PCHAR  Referrer;\\r\\n    USHORT ServerPort;\\r\\n    USHORT ProtocolStatus;\\r\\n    ULONG  Win32Status;\\r\\n    HTTP_VERB MethodNum;\\r\\n    USHORT SubStatus;\\r\\n} HTTP_LOG_FIELDS_DATA, *PHTTP_LOG_FIELDS_DATA;"},"_HTTP_MULTIPLE_KNOWN_HEADERS":{"comment":"","exp":"","file":"http.h","line":1969,"type":"Struct","value":"typedef struct _HTTP_MULTIPLE_KNOWN_HEADERS\\r\\n{\\r\\n    \/\/\\r\\n    \/\/ Known header id.\\r\\n    \/\/\\r\\n    HTTP_HEADER_ID      HeaderId;\\r\\n    ULONG               Flags;\\r\\n    \/\/\\r\\n    \/\/ Number of headers of the same category.\\r\\n    \/\/\\r\\n    USHORT              KnownHeaderCount;\\r\\n    \/\/\\r\\n    \/\/ Array of known header structures.\\r\\n    \/\/\\r\\n    PHTTP_KNOWN_HEADER  KnownHeaders;\\r\\n} HTTP_MULTIPLE_KNOWN_HEADERS, *PHTTP_MULTIPLE_KNOWN_HEADERS;"},"_HTTP_PERFORMANCE_PARAM":{"comment":"","exp":"","file":"http.h","line":2295,"type":"Struct","value":"typedef struct _HTTP_PERFORMANCE_PARAM\\r\\n{\\r\\n    \/\/\\r\\n    \/\/ The knob to enable\/disable buffering synchronous sends.\\r\\n    \/\/\\r\\n    ULONGLONG SendBufferingFlags;\\r\\n    \/\/\\r\\n    \/\/ The knob to enable aggressive ICW.\\r\\n    \/\/\\r\\n    BOOLEAN EnableAggressiveICW;\\r\\n    \/\/\\r\\n    \/\/ The maximum send buffer size for connections on this binding.\\r\\n    \/\/\\r\\n    ULONG MaxBufferedSendBytes;\\r\\n    \/\/\\r\\n    \/\/ The maximum number of concurrent streams on an http\/2 connection.\\r\\n    \/\/\\r\\n    ULONG MaxConcurrentClientStreams;\\r\\n} HTTP_PERFORMANCE_PARAM, *PHTTP_PERFORMANCE_PARAM;"},"_HTTP_PROPERTY_FLAGS":{"comment":"","exp":"","file":"http.h","line":177,"type":"Struct","value":"typedef struct _HTTP_PROPERTY_FLAGS\\r\\n{\\r\\n    ULONG Present:1;\\r\\n} HTTP_PROPERTY_FLAGS, *PHTTP_PROPERTY_FLAGS;"},"_HTTP_PROTECTION_LEVEL_INFO":{"comment":"","exp":"","file":"http.h","line":792,"type":"Struct","value":"typedef struct _HTTP_PROTECTION_LEVEL_INFO\\r\\n{\\r\\n    HTTP_PROPERTY_FLAGS Flags;\\r\\n    HTTP_PROTECTION_LEVEL_TYPE Level;\\r\\n} HTTP_PROTECTION_LEVEL_INFO, *PHTTP_PROTECTION_LEVEL_INFO;"},"_HTTP_PROTECTION_LEVEL_TYPE":{"comment":"","exp":"","file":"http.h","line":761,"type":"Enum","value":"typedef enum _HTTP_PROTECTION_LEVEL_TYPE\\r\\n{\\r\\n    \/\/\\r\\n    \/\/ This option will allow edge (NAT) traversed traffic, i.e. Teredo\\r\\n    \/\/ for the UrlGroup, unless there is an admin rule that overwrites the\\r\\n    \/\/ application's intend.\\r\\n    \/\/\\r\\n    HttpProtectionLevelUnrestricted,\\r\\n    \/\/\\r\\n    \/\/ This setting will ensure that edge (NAT) traversed traffic\\r\\n    \/\/ will not be allowed.\\r\\n    \/\/\\r\\n    HttpProtectionLevelEdgeRestricted,\\r\\n    \/\/\\r\\n    \/\/ Below type is not supported by HTTP API.\\r\\n    \/\/\\r\\n    HttpProtectionLevelRestricted\\r\\n} HTTP_PROTECTION_LEVEL_TYPE, *PHTTP_PROTECTION_LEVEL_TYPE;"},"_HTTP_QOS_SETTING_INFO":{"comment":"","exp":"","file":"http.h","line":241,"type":"Struct","value":"typedef struct _HTTP_QOS_SETTING_INFO\\r\\n{\\r\\n    HTTP_QOS_SETTING_TYPE QosType;\\r\\n    PVOID QosSetting;\\r\\n} HTTP_QOS_SETTING_INFO, *PHTTP_QOS_SETTING_INFO;"},"_HTTP_QOS_SETTING_TYPE":{"comment":"","exp":"","file":"http.h","line":233,"type":"Enum","value":"typedef enum _HTTP_QOS_SETTING_TYPE\\r\\n{\\r\\n    HttpQosSettingTypeBandwidth,\\r\\n    HttpQosSettingTypeConnectionLimit,\\r\\n    HttpQosSettingTypeFlowRate\\r\\n} HTTP_QOS_SETTING_TYPE, *PHTTP_QOS_SETTING_TYPE;"},"_HTTP_QUERY_REQUEST_QUALIFIER_QUIC":{"comment":"","exp":"","file":"http.h","line":2630,"type":"Struct","value":"typedef struct _HTTP_QUERY_REQUEST_QUALIFIER_QUIC\\r\\n{\\r\\n    ULONGLONG Freshness;\\r\\n} HTTP_QUERY_REQUEST_QUALIFIER_QUIC, *PHTTP_QUERY_REQUEST_QUALIFIER_QUIC;"},"_HTTP_QUERY_REQUEST_QUALIFIER_TCP":{"comment":"","exp":"","file":"http.h","line":2625,"type":"Struct","value":"typedef struct _HTTP_QUERY_REQUEST_QUALIFIER_TCP\\r\\n{\\r\\n    ULONGLONG Freshness;\\r\\n} HTTP_QUERY_REQUEST_QUALIFIER_TCP, *PHTTP_QUERY_REQUEST_QUALIFIER_TCP;"},"_HTTP_REQUEST_AUTH_INFO":{"comment":"","exp":"","file":"http.h","line":1659,"type":"Struct","value":"typedef struct _HTTP_REQUEST_AUTH_INFO\\r\\n{\\r\\n    HTTP_AUTH_STATUS AuthStatus;\\r\\n    SECURITY_STATUS  SecStatus;\\r\\n    ULONG Flags;\\r\\n    HTTP_REQUEST_AUTH_TYPE AuthType;\\r\\n    HANDLE AccessToken;\\r\\n    ULONG ContextAttributes;\\r\\n    \/\/\\r\\n    \/\/ Optional serialized context.\\r\\n    \/\/\\r\\n    ULONG PackedContextLength;\\r\\n    ULONG PackedContextType;\\r\\n    PVOID PackedContext;\\r\\n    \/\/\\r\\n    \/\/ Optional mutual authentication data and its length in bytes.\\r\\n    \/\/\\r\\n    ULONG MutualAuthDataLength;\\r\\n    PCHAR pMutualAuthData;\\r\\n    \/\/\\r\\n    \/\/ For SSPI based schemes the package name is returned. Length does\\r\\n    \/\/ not include the terminating null and it is in bytes.\\r\\n    \/\/\\r\\n    USHORT PackageNameLength;\\r\\n    PWSTR pPackageName;\\r\\n} HTTP_REQUEST_AUTH_INFO, *PHTTP_REQUEST_AUTH_INFO;"},"_HTTP_REQUEST_AUTH_TYPE":{"comment":"","exp":"","file":"http.h","line":1450,"type":"Enum","value":"typedef enum _HTTP_REQUEST_AUTH_TYPE\\r\\n{\\r\\n    HttpRequestAuthTypeNone = 0,\\r\\n    HttpRequestAuthTypeBasic,\\r\\n    HttpRequestAuthTypeDigest,\\r\\n    HttpRequestAuthTypeNTLM,\\r\\n    HttpRequestAuthTypeNegotiate,\\r\\n    HttpRequestAuthTypeKerberos\\r\\n} HTTP_REQUEST_AUTH_TYPE, *PHTTP_REQUEST_AUTH_TYPE;"},"_HTTP_REQUEST_CHANNEL_BIND_STATUS":{"comment":"","exp":"","file":"http.h","line":524,"type":"Struct","value":"typedef struct _HTTP_REQUEST_CHANNEL_BIND_STATUS\\r\\n{\\r\\n    PHTTP_SERVICE_BINDING_BASE ServiceName;\\r\\n    PUCHAR ChannelToken;\\r\\n    ULONG ChannelTokenSize;\\r\\n    ULONG Flags;\\r\\n} HTTP_REQUEST_CHANNEL_BIND_STATUS, *PHTTP_REQUEST_CHANNEL_BIND_STATUS;"},"_HTTP_REQUEST_HEADERS":{"comment":"","exp":"","file":"http.h","line":1308,"type":"Struct","value":"typedef struct _HTTP_REQUEST_HEADERS\\r\\n{\\r\\n    \/\/\\r\\n    \/\/ The array of unknown HTTP headers and the number of\\r\\n    \/\/ entries in the array.\\r\\n    \/\/\\r\\n    USHORT               UnknownHeaderCount;\\r\\n    PHTTP_UNKNOWN_HEADER pUnknownHeaders;\\r\\n    \/\/\\r\\n    \/\/ Trailers - we don't use these currently, reserved for a future release\\r\\n    \/\/\\r\\n    USHORT               TrailerCount;   \/\/ Reserved, must be 0\\r\\n    PHTTP_UNKNOWN_HEADER pTrailers;      \/\/ Reserved, must be NULL\\r\\n    \/\/\\r\\n    \/\/ Known headers.\\r\\n    \/\/\\r\\n    HTTP_KNOWN_HEADER    KnownHeaders[HttpHeaderRequestMaximum];\\r\\n} HTTP_REQUEST_HEADERS, *PHTTP_REQUEST_HEADERS;"},"_HTTP_REQUEST_INFO":{"comment":"","exp":"","file":"http.h","line":1640,"type":"Struct","value":"typedef struct _HTTP_REQUEST_INFO\\r\\n{\\r\\n    HTTP_REQUEST_INFO_TYPE InfoType;\\r\\n    ULONG                  InfoLength;\\r\\n    PVOID                  pInfo;\\r\\n} HTTP_REQUEST_INFO, *PHTTP_REQUEST_INFO;"},"_HTTP_REQUEST_INFO_TYPE":{"comment":"","exp":"","file":"http.h","line":1625,"type":"Enum","value":"typedef enum _HTTP_REQUEST_INFO_TYPE\\r\\n{\\r\\n    HttpRequestInfoTypeAuth,\\r\\n    HttpRequestInfoTypeChannelBind,\\r\\n    HttpRequestInfoTypeSslProtocol,\\r\\n    HttpRequestInfoTypeSslTokenBindingDraft,\\r\\n    HttpRequestInfoTypeSslTokenBinding,\\r\\n    HttpRequestInfoTypeRequestTiming,\\r\\n    HttpRequestInfoTypeTcpInfoV0,\\r\\n    HttpRequestInfoTypeRequestSizing,\\r\\n    HttpRequestInfoTypeQuicStats,\\r\\n    HttpRequestInfoTypeTcpInfoV1,\\r\\n} HTTP_REQUEST_INFO_TYPE, *PHTTP_REQUEST_INFO_TYPE;"},"_HTTP_REQUEST_PROPERTY":{"comment":"","exp":"","file":"http.h","line":2616,"type":"Enum","value":"typedef enum _HTTP_REQUEST_PROPERTY\\r\\n{\\r\\n    HttpRequestPropertyIsb,\\r\\n    HttpRequestPropertyTcpInfoV0,\\r\\n    HttpRequestPropertyQuicStats,\\r\\n    HttpRequestPropertyTcpInfoV1,\\r\\n    HttpRequestPropertySni,\\r\\n} HTTP_REQUEST_PROPERTY, *PHTTP_REQUEST_PROPERTY;"},"_HTTP_REQUEST_PROPERTY_SNI":{"comment":"","exp":"","file":"http.h","line":2649,"type":"Struct","value":"typedef struct _HTTP_REQUEST_PROPERTY_SNI\\r\\n{\\r\\n    WCHAR Hostname[HTTP_REQUEST_PROPERTY_SNI_HOST_MAX_LENGTH + 1];\\r\\n    ULONG Flags;\\r\\n} HTTP_REQUEST_PROPERTY_SNI, *PHTTP_REQUEST_PROPERTY_SNI;"},"_HTTP_REQUEST_SIZING_INFO":{"comment":"","exp":"","file":"http.h","line":1557,"type":"Struct","value":"typedef struct _HTTP_REQUEST_SIZING_INFO\\r\\n{\\r\\n    ULONGLONG Flags;\\r\\n    ULONG RequestIndex;\\r\\n    ULONG RequestSizingCount;\\r\\n    ULONGLONG RequestSizing[HttpRequestSizingTypeMax];\\r\\n} HTTP_REQUEST_SIZING_INFO, *PHTTP_REQUEST_SIZING_INFO;"},"_HTTP_REQUEST_SIZING_TYPE":{"comment":"","exp":"","file":"http.h","line":1532,"type":"Enum","value":"typedef enum  _HTTP_REQUEST_SIZING_TYPE\\r\\n{\\r\\n    HttpRequestSizingTypeTlsHandshakeLeg1ClientData, \/\/ Inbound\/outbound data?\\r\\n    HttpRequestSizingTypeTlsHandshakeLeg1ServerData,\\r\\n    HttpRequestSizingTypeTlsHandshakeLeg2ClientData,\\r\\n    HttpRequestSizingTypeTlsHandshakeLeg2ServerData,\\r\\n    HttpRequestSizingTypeHeaders,\\r\\n    HttpRequestSizingTypeMax\\r\\n} HTTP_REQUEST_SIZING_TYPE, *PHTTP_REQUEST_SIZING_TYPE;"},"_HTTP_REQUEST_TIMING_INFO":{"comment":"","exp":"","file":"http.h","line":1612,"type":"Struct","value":"typedef struct _HTTP_REQUEST_TIMING_INFO\\r\\n{\\r\\n    ULONG RequestTimingCount;\\r\\n    ULONGLONG RequestTiming[HttpRequestTimingTypeMax];\\r\\n} HTTP_REQUEST_TIMING_INFO, *PHTTP_REQUEST_TIMING_INFO;"},"_HTTP_REQUEST_TIMING_TYPE":{"comment":"","exp":"","file":"http.h","line":1571,"type":"Enum","value":"typedef enum  _HTTP_REQUEST_TIMING_TYPE\\r\\n{\\r\\n    HttpRequestTimingTypeConnectionStart,\\r\\n    HttpRequestTimingTypeDataStart,\\r\\n    HttpRequestTimingTypeTlsCertificateLoadStart,\\r\\n    HttpRequestTimingTypeTlsCertificateLoadEnd,\\r\\n    HttpRequestTimingTypeTlsHandshakeLeg1Start,\\r\\n    HttpRequestTimingTypeTlsHandshakeLeg1End,\\r\\n    HttpRequestTimingTypeTlsHandshakeLeg2Start,\\r\\n    HttpRequestTimingTypeTlsHandshakeLeg2End,\\r\\n    HttpRequestTimingTypeTlsAttributesQueryStart,\\r\\n    HttpRequestTimingTypeTlsAttributesQueryEnd,\\r\\n    HttpRequestTimingTypeTlsClientCertQueryStart,\\r\\n    HttpRequestTimingTypeTlsClientCertQueryEnd,\\r\\n    HttpRequestTimingTypeHttp2StreamStart,\\r\\n    HttpRequestTimingTypeHttp2HeaderDecodeStart,\\r\\n    HttpRequestTimingTypeHttp2HeaderDecodeEnd,\\r\\n    HttpRequestTimingTypeRequestHeaderParseStart,\\r\\n    HttpRequestTimingTypeRequestHeaderParseEnd,\\r\\n    HttpRequestTimingTypeRequestRoutingStart,\\r\\n    HttpRequestTimingTypeRequestRoutingEnd,\\r\\n    HttpRequestTimingTypeRequestQueuedForInspection,\\r\\n    HttpRequestTimingTypeRequestDeliveredForInspection,\\r\\n    HttpRequestTimingTypeRequestReturnedAfterInspection,\\r\\n    HttpRequestTimingTypeRequestQueuedForDelegation,\\r\\n    HttpRequestTimingTypeRequestDeliveredForDelegation,\\r\\n    HttpRequestTimingTypeRequestReturnedAfterDelegation,\\r\\n    HttpRequestTimingTypeRequestQueuedForIO,\\r\\n    HttpRequestTimingTypeRequestDeliveredForIO,\\r\\n    HttpRequestTimingTypeHttp3StreamStart,\\r\\n    HttpRequestTimingTypeHttp3HeaderDecodeStart,\\r\\n    HttpRequestTimingTypeHttp3HeaderDecodeEnd,\\r\\n    HttpRequestTimingTypeMax\\r\\n} HTTP_REQUEST_TIMING_TYPE, *PHTTP_REQUEST_TIMING_TYPE;"},"_HTTP_REQUEST_TOKEN_BINDING_INFO":{"comment":"","exp":"","file":"http.h","line":535,"type":"Struct","value":"typedef struct _HTTP_REQUEST_TOKEN_BINDING_INFO\\r\\n{\\r\\n    PUCHAR TokenBinding;\\r\\n    ULONG TokenBindingSize;\\r\\n    PUCHAR EKM;\\r\\n    ULONG EKMSize;\\r\\n    UCHAR KeyType;\\r\\n} HTTP_REQUEST_TOKEN_BINDING_INFO, *PHTTP_REQUEST_TOKEN_BINDING_INFO;"},"_HTTP_REQUEST_V1":{"comment":"","exp":"","file":"http.h","line":1702,"type":"Struct","value":"typedef struct _HTTP_REQUEST_V1\\r\\n{\\r\\n    \/\/\\r\\n    \/\/ Request flags (see HTTP_REQUEST_FLAG_* definitions below).\\r\\n    \/\/\\r\\n    ULONG Flags;\\r\\n    \/\/\\r\\n    \/\/ An opaque request identifier. These values are used by the driver\\r\\n    \/\/ to correlate outgoing responses with incoming requests.\\r\\n    \/\/\\r\\n    HTTP_CONNECTION_ID ConnectionId;\\r\\n    HTTP_REQUEST_ID    RequestId;\\r\\n    \/\/\\r\\n    \/\/ The context associated with the URL prefix.\\r\\n    \/\/\\r\\n    HTTP_URL_CONTEXT UrlContext;\\r\\n    \/\/\\r\\n    \/\/ The HTTP version number.\\r\\n    \/\/\\r\\n    HTTP_VERSION Version;\\r\\n    \/\/\\r\\n    \/\/ The request verb.\\r\\n    \/\/\\r\\n    HTTP_VERB Verb;\\r\\n    \/\/\\r\\n    \/\/ The length of the verb string if the Verb field is HttpVerbUnknown.\\r\\n    \/\/\\r\\n    USHORT UnknownVerbLength;           \/\/ in bytes not including the NUL\\r\\n    \/\/\\r\\n    \/\/ The length of the raw (uncooked) URL\\r\\n    \/\/\\r\\n    USHORT RawUrlLength;                \/\/ in bytes not including the NUL\\r\\n    \/\/\\r\\n    \/\/ Pointer to the verb string if the Verb field is HttpVerbUnknown.\\r\\n    \/\/\\r\\n    PCSTR  pUnknownVerb;\\r\\n    \/\/\\r\\n    \/\/ Pointer to the raw (uncooked) URL\\r\\n    \/\/\\r\\n    PCSTR  pRawUrl;\\r\\n    \/\/\\r\\n    \/\/ The canonicalized Unicode URL\\r\\n    \/\/\\r\\n    HTTP_COOKED_URL CookedUrl;\\r\\n    \/\/\\r\\n    \/\/ Local and remote transport addresses for the connection.\\r\\n    \/\/\\r\\n    HTTP_TRANSPORT_ADDRESS Address;\\r\\n    \/\/\\r\\n    \/\/ The request headers.\\r\\n    \/\/\\r\\n    HTTP_REQUEST_HEADERS Headers;\\r\\n    \/\/\\r\\n    \/\/ The total number of bytes received from network for this request.\\r\\n    \/\/\\r\\n    ULONGLONG BytesReceived;\\r\\n    \/\/\\r\\n    \/\/ pEntityChunks is an array of EntityChunkCount HTTP_DATA_CHUNKs. The\\r\\n    \/\/ entity body is copied only if HTTP_RECEIVE_REQUEST_FLAG_COPY_BODY\\r\\n    \/\/ was passed to HttpReceiveHttpRequest().\\r\\n    \/\/\\r\\n    USHORT           EntityChunkCount;\\r\\n    PHTTP_DATA_CHUNK pEntityChunks;\\r\\n    \/\/\\r\\n    \/\/ SSL connection information.\\r\\n    \/\/\\r\\n    HTTP_RAW_CONNECTION_ID RawConnectionId;\\r\\n    PHTTP_SSL_INFO         pSslInfo;\\r\\n} HTTP_REQUEST_V1, *PHTTP_REQUEST_V1;"},"_HTTP_REQUEST_V2":{"comment":"","exp":"","file":"http.h","line":1833,"type":"Struct","value":"typedef struct _HTTP_REQUEST_V2\\r\\n{\\r\\n    struct _HTTP_REQUEST_V1;        \/\/ Anonymous structure\\r\\n    \/\/\\r\\n    \/\/ Version 2.0 members are declared below\\r\\n    \/\/\\r\\n    \/\/\\r\\n    \/\/ Additional Request Informations.\\r\\n    \/\/\\r\\n    USHORT             RequestInfoCount;\\r\\n    PHTTP_REQUEST_INFO pRequestInfo;\\r\\n} HTTP_REQUEST_V2, *PHTTP_REQUEST_V2;"},"_HTTP_RESPONSE_HEADERS":{"comment":"","exp":"","file":"http.h","line":1337,"type":"Struct","value":"typedef struct _HTTP_RESPONSE_HEADERS\\r\\n{\\r\\n    \/\/\\r\\n    \/\/ The array of unknown HTTP headers and the number of\\r\\n    \/\/ entries in the array.\\r\\n    \/\/\\r\\n    USHORT               UnknownHeaderCount;\\r\\n    PHTTP_UNKNOWN_HEADER pUnknownHeaders;\\r\\n    \/\/\\r\\n    \/\/ Trailers - we don't use these currently, reserved for a future release\\r\\n    \/\/\\r\\n    USHORT               TrailerCount;   \/\/ Reserved, must be 0\\r\\n    PHTTP_UNKNOWN_HEADER pTrailers;      \/\/ Reserved, must be NULL\\r\\n    \/\/\\r\\n    \/\/ Known headers.\\r\\n    \/\/\\r\\n    HTTP_KNOWN_HEADER    KnownHeaders[HttpHeaderResponseMaximum];\\r\\n} HTTP_RESPONSE_HEADERS, *PHTTP_RESPONSE_HEADERS;"},"_HTTP_RESPONSE_INFO":{"comment":"","exp":"","file":"http.h","line":1956,"type":"Struct","value":"typedef struct _HTTP_RESPONSE_INFO\\r\\n{\\r\\n    HTTP_RESPONSE_INFO_TYPE Type;\\r\\n    ULONG                   Length;\\r\\n    PVOID                   pInfo;\\r\\n} HTTP_RESPONSE_INFO, *PHTTP_RESPONSE_INFO;"},"_HTTP_RESPONSE_INFO_TYPE":{"comment":"","exp":"","file":"http.h","line":1947,"type":"Enum","value":"typedef enum _HTTP_RESPONSE_INFO_TYPE\\r\\n{\\r\\n    HttpResponseInfoTypeMultipleKnownHeaders,\\r\\n    HttpResponseInfoTypeAuthenticationProperty,\\r\\n    HttpResponseInfoTypeQoSProperty,\\r\\n    HttpResponseInfoTypeChannelBind\\r\\n} HTTP_RESPONSE_INFO_TYPE, PHTTP_RESPONSE_INFO_TYPE;"},"_HTTP_RESPONSE_V1":{"comment":"","exp":"","file":"http.h","line":1884,"type":"Struct","value":"typedef struct _HTTP_RESPONSE_V1\\r\\n{\\r\\n    \/\/\\r\\n    \/\/ Response flags (see HTTP_RESPONSE_FLAG_* definitions below).\\r\\n    \/\/\\r\\n    ULONG Flags;\\r\\n    \/\/\\r\\n    \/\/ The raw HTTP protocol version number.\\r\\n    \/\/\\r\\n    HTTP_VERSION Version;\\r\\n    \/\/\\r\\n    \/\/ The HTTP status code (e.g., 200).\\r\\n    \/\/\\r\\n    USHORT StatusCode;\\r\\n    \/\/\\r\\n    \/\/ The HTTP reason (e.g., \"OK\"). This MUST not contain\\r\\n    \/\/ non-ASCII characters (i.e., all chars must be in range 0x20-0x7E).\\r\\n    \/\/\\r\\n    USHORT ReasonLength;                 \/\/ in bytes not including the '\\0'\\r\\n    PCSTR  pReason;\\r\\n    \/\/\\r\\n    \/\/ The response headers.\\r\\n    \/\/\\r\\n    HTTP_RESPONSE_HEADERS Headers;\\r\\n    \/\/\\r\\n    \/\/ pEntityChunks points to an array of EntityChunkCount HTTP_DATA_CHUNKs.\\r\\n    \/\/\\r\\n    USHORT           EntityChunkCount;\\r\\n    PHTTP_DATA_CHUNK pEntityChunks;\\r\\n} HTTP_RESPONSE_V1, *PHTTP_RESPONSE_V1;"},"_HTTP_RESPONSE_V2":{"comment":"","exp":"","file":"http.h","line":2017,"type":"Struct","value":"typedef struct _HTTP_RESPONSE_V2\\r\\n{\\r\\n    struct _HTTP_RESPONSE_V1;\\r\\n    \/\/\\r\\n    \/\/ Version 2.0 members are declared below\\r\\n    \/\/\\r\\n    USHORT ResponseInfoCount;\\r\\n    PHTTP_RESPONSE_INFO pResponseInfo;\\r\\n} HTTP_RESPONSE_V2, *PHTTP_RESPONSE_V2;"},"_HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS":{"comment":"","exp":"","file":"http.h","line":397,"type":"Struct","value":"typedef struct _HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS\\r\\n{\\r\\n    USHORT      RealmLength;\\r\\n    PWSTR       Realm;\\r\\n} HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS,\\r\\n  *PHTTP_SERVER_AUTHENTICATION_BASIC_PARAMS;"},"_HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS":{"comment":"","exp":"","file":"http.h","line":388,"type":"Struct","value":"typedef struct _HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS\\r\\n{\\r\\n    USHORT              DomainNameLength;\\r\\n    PWSTR               DomainName;\\r\\n    USHORT              RealmLength;\\r\\n    PWSTR               Realm;\\r\\n} HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS,\\r\\n  *PHTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS;"},"_HTTP_SERVER_AUTHENTICATION_INFO":{"comment":"","exp":"","file":"http.h","line":429,"type":"Struct","value":"typedef struct _HTTP_SERVER_AUTHENTICATION_INFO\\r\\n{\\r\\n    HTTP_PROPERTY_FLAGS Flags;\\r\\n    ULONG AuthSchemes;\\r\\n    BOOLEAN ReceiveMutualAuth;\\r\\n    BOOLEAN ReceiveContextHandle;\\r\\n    BOOLEAN DisableNTLMCredentialCaching;\\r\\n    UCHAR   ExFlags;\\r\\n    HTTP_SERVER_AUTHENTICATION_DIGEST_PARAMS DigestParams;\\r\\n    HTTP_SERVER_AUTHENTICATION_BASIC_PARAMS  BasicParams;\\r\\n} HTTP_SERVER_AUTHENTICATION_INFO, *PHTTP_SERVER_AUTHENTICATION_INFO;"},"_HTTP_SERVER_PROPERTY":{"comment":"","exp":"","file":"http.h","line":90,"type":"Enum","value":"typedef enum _HTTP_SERVER_PROPERTY\\r\\n{\\r\\n    \/\/\\r\\n    \/\/ Used for enabling server side authentication.\\r\\n    \/\/\\r\\n    HttpServerAuthenticationProperty = 0,\\r\\n    \/\/\\r\\n    \/\/ Used for enabling logging.\\r\\n    \/\/\\r\\n    HttpServerLoggingProperty = 1,\\r\\n    \/\/\\r\\n    \/\/ Used for setting QoS properties.\\r\\n    \/\/\\r\\n    HttpServerQosProperty = 2,\\r\\n    \/\/\\r\\n    \/\/ Used for configuring timeouts.\\r\\n    \/\/\\r\\n    HttpServerTimeoutsProperty = 3,\\r\\n    \/\/\\r\\n    \/\/ Used for limiting request queue lengths.\\r\\n    \/\/\\r\\n    HttpServerQueueLengthProperty = 4,\\r\\n    \/\/\\r\\n    \/\/ Used for manipulating the state.\\r\\n    \/\/\\r\\n    HttpServerStateProperty = 5,\\r\\n    \/\/\\r\\n    \/\/ Used for modifying the verbosity level of 503 type responses\\r\\n    \/\/ generated by server side API.\\r\\n    \/\/\\r\\n    HttpServer503VerbosityProperty = 6,\\r\\n    \/\/\\r\\n    \/\/ Used for manipulating Url Group to Request Queue association.\\r\\n    \/\/\\r\\n    HttpServerBindingProperty = 7,\\r\\n    \/\/\\r\\n    \/\/ Extended authentication property.\\r\\n    \/\/\\r\\n    HttpServerExtendedAuthenticationProperty = 8,\\r\\n    \/\/\\r\\n    \/\/ Listening endpoint property.\\r\\n    \/\/\\r\\n    HttpServerListenEndpointProperty = 9,\\r\\n    \/\/\\r\\n    \/\/ Authentication channel binding property\\r\\n    \/\/\\r\\n    HttpServerChannelBindProperty = 10,\\r\\n    \/\/\\r\\n    \/\/ IP Protection level policy for a Url Group.\\r\\n    \/\/\\r\\n    HttpServerProtectionLevelProperty = 11,\\r\\n} HTTP_SERVER_PROPERTY, *PHTTP_SERVER_PROPERTY;"},"_HTTP_SERVICE_BINDING_A":{"comment":"","exp":"","file":"http.h","line":466,"type":"Struct","value":"typedef struct _HTTP_SERVICE_BINDING_A\\r\\n{\\r\\n    HTTP_SERVICE_BINDING_BASE Base;\\r\\n    PCHAR Buffer;\\r\\n    ULONG BufferSize;\\r\\n} HTTP_SERVICE_BINDING_A, *PHTTP_SERVICE_BINDING_A;"},"_HTTP_SERVICE_BINDING_BASE":{"comment":"","exp":"","file":"http.h","line":460,"type":"Struct","value":"typedef struct _HTTP_SERVICE_BINDING_BASE\\r\\n{\\r\\n    HTTP_SERVICE_BINDING_TYPE Type;\\r\\n} HTTP_SERVICE_BINDING_BASE, *PHTTP_SERVICE_BINDING_BASE;"},"_HTTP_SERVICE_BINDING_TYPE":{"comment":"","exp":"","file":"http.h","line":452,"type":"Enum","value":"typedef enum _HTTP_SERVICE_BINDING_TYPE\\r\\n{\\r\\n    HttpServiceBindingTypeNone = 0,\\r\\n    HttpServiceBindingTypeW,\\r\\n    HttpServiceBindingTypeA\\r\\n} HTTP_SERVICE_BINDING_TYPE;"},"_HTTP_SERVICE_BINDING_W":{"comment":"","exp":"","file":"http.h","line":474,"type":"Struct","value":"typedef struct _HTTP_SERVICE_BINDING_W\\r\\n{\\r\\n    HTTP_SERVICE_BINDING_BASE Base;\\r\\n    PWCHAR Buffer;\\r\\n    ULONG BufferSize;\\r\\n} HTTP_SERVICE_BINDING_W, *PHTTP_SERVICE_BINDING_W;"},"_HTTP_SERVICE_CONFIG_CACHE_KEY":{"comment":"","exp":"","file":"http.h","line":2591,"type":"Enum","value":"typedef enum _HTTP_SERVICE_CONFIG_CACHE_KEY\\r\\n{\\r\\n    MaxCacheResponseSize = 0,\\r\\n    CacheRangeChunkSize\\r\\n} HTTP_SERVICE_CONFIG_CACHE_KEY, *PHTTP_SERVICE_CONFIG_CACHE_KEY;"},"_HTTP_SERVICE_CONFIG_ID":{"comment":"","exp":"","file":"http.h","line":2119,"type":"Enum","value":"typedef enum _HTTP_SERVICE_CONFIG_ID\\r\\n{\\r\\n    HttpServiceConfigIPListenList,    \/\/ Set, Query & Delete.\\r\\n    HttpServiceConfigSSLCertInfo,     \/\/ Set, Update, Query & Delete.\\r\\n    HttpServiceConfigUrlAclInfo,      \/\/ Set, Query & Delete.\\r\\n    HttpServiceConfigTimeout,         \/\/ Set, Query & Delete.\\r\\n    HttpServiceConfigCache,           \/\/ Set, Query & Delete.\\r\\n#if _WIN32_WINNT >= _WIN32_WINNT_WIN8\\r\\n    HttpServiceConfigSslSniCertInfo,  \/\/ Set, Update, Query & Delete.\\r\\n    HttpServiceConfigSslCcsCertInfo,  \/\/ Set, Update, Query & Delete.\\r\\n#endif\\r\\n#if _WIN32_WINNT >= _WIN32_WINNT_WIN10\\r\\n    HttpServiceConfigSetting,        \/\/ Set, Query & Delete.\\r\\n#endif\\r\\n    HttpServiceConfigSslCertInfoEx,\\r\\n    HttpServiceConfigSslSniCertInfoEx,\\r\\n    HttpServiceConfigSslCcsCertInfoEx,\\r\\n    HttpServiceConfigSslScopedCcsCertInfo,\\r\\n    HttpServiceConfigSslScopedCcsCertInfoEx,\\r\\n    HttpServiceConfigMax\\r\\n} HTTP_SERVICE_CONFIG_ID, *PHTTP_SERVICE_CONFIG_ID;"},"_HTTP_SERVICE_CONFIG_IP_LISTEN_PARAM":{"comment":"","exp":"","file":"http.h","line":2501,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_IP_LISTEN_PARAM\\r\\n{\\r\\n    USHORT      AddrLength;\\r\\n    PSOCKADDR   pAddress;\\r\\n} HTTP_SERVICE_CONFIG_IP_LISTEN_PARAM, *PHTTP_SERVICE_CONFIG_IP_LISTEN_PARAM;"},"_HTTP_SERVICE_CONFIG_IP_LISTEN_QUERY":{"comment":"","exp":"","file":"http.h","line":2521,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_IP_LISTEN_QUERY\\r\\n{\\r\\n    ULONG              AddrCount;\\r\\n    SOCKADDR_STORAGE   AddrList[ANYSIZE_ARRAY];\\r\\n} HTTP_SERVICE_CONFIG_IP_LISTEN_QUERY, *PHTTP_SERVICE_CONFIG_IP_LISTEN_QUERY;"},"_HTTP_SERVICE_CONFIG_QUERY_TYPE":{"comment":"","exp":"","file":"http.h","line":2154,"type":"Enum","value":"typedef enum _HTTP_SERVICE_CONFIG_QUERY_TYPE\\r\\n{\\r\\n    HttpServiceConfigQueryExact,\\r\\n    HttpServiceConfigQueryNext,\\r\\n    HttpServiceConfigQueryMax\\r\\n} HTTP_SERVICE_CONFIG_QUERY_TYPE, *PHTTP_SERVICE_CONFIG_QUERY_TYPE;"},"_HTTP_SERVICE_CONFIG_SETTING_KEY":{"comment":"","exp":"","file":"http.h","line":358,"type":"Enum","value":"typedef enum _HTTP_SERVICE_CONFIG_SETTING_KEY\\r\\n{\\r\\n    HttpNone = 0,\\r\\n    HttpTlsThrottle\\r\\n} HTTP_SERVICE_CONFIG_SETTING_KEY, *PHTTP_SERVICE_CONFIG_SETTING_KEY;"},"_HTTP_SERVICE_CONFIG_SETTING_SET":{"comment":"","exp":"","file":"http.h","line":367,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_SETTING_SET\\r\\n{\\r\\n    HTTP_SERVICE_CONFIG_SETTING_KEY KeyDesc;\\r\\n    HTTP_SERVICE_CONFIG_SETTING_PARAM ParamDesc;\\r\\n} HTTP_SERVICE_CONFIG_SETTING_SET, *PHTTP_SERVICE_CONFIG_SETTING_SET;"},"_HTTP_SERVICE_CONFIG_SSL_CCS_KEY":{"comment":"","exp":"","file":"http.h","line":2186,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_SSL_CCS_KEY\\r\\n{\\r\\n    SOCKADDR_STORAGE LocalAddress;\\r\\n} HTTP_SERVICE_CONFIG_SSL_CCS_KEY, *PHTTP_SERVICE_CONFIG_SSL_CCS_KEY;"},"_HTTP_SERVICE_CONFIG_SSL_CCS_QUERY":{"comment":"","exp":"","file":"http.h","line":2461,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_SSL_CCS_QUERY\\r\\n{\\r\\n    HTTP_SERVICE_CONFIG_QUERY_TYPE  QueryDesc;\\r\\n    HTTP_SERVICE_CONFIG_SSL_CCS_KEY KeyDesc;\\r\\n    DWORD                           dwToken;\\r\\n} HTTP_SERVICE_CONFIG_SSL_CCS_QUERY, *PHTTP_SERVICE_CONFIG_SSL_CCS_QUERY;"},"_HTTP_SERVICE_CONFIG_SSL_CCS_QUERY_EX":{"comment":"","exp":"","file":"http.h","line":2484,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_SSL_CCS_QUERY_EX\\r\\n{\\r\\n    HTTP_SERVICE_CONFIG_QUERY_TYPE  QueryDesc;\\r\\n    HTTP_SERVICE_CONFIG_SSL_CCS_KEY KeyDesc;\\r\\n    DWORD                           dwToken;\\r\\n    HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE ParamType;\\r\\n} HTTP_SERVICE_CONFIG_SSL_CCS_QUERY_EX, *PHTTP_SERVICE_CONFIG_SSL_CCS_QUERY_EX;"},"_HTTP_SERVICE_CONFIG_SSL_CCS_SET":{"comment":"","exp":"","file":"http.h","line":2401,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_SSL_CCS_SET\\r\\n{\\r\\n    HTTP_SERVICE_CONFIG_SSL_CCS_KEY KeyDesc;\\r\\n    HTTP_SERVICE_CONFIG_SSL_PARAM   ParamDesc;\\r\\n} HTTP_SERVICE_CONFIG_SSL_CCS_SET, *PHTTP_SERVICE_CONFIG_SSL_CCS_SET;"},"_HTTP_SERVICE_CONFIG_SSL_CCS_SET_EX":{"comment":"","exp":"","file":"http.h","line":2419,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_SSL_CCS_SET_EX\\r\\n{\\r\\n    HTTP_SERVICE_CONFIG_SSL_CCS_KEY  KeyDesc;\\r\\n    HTTP_SERVICE_CONFIG_SSL_PARAM_EX ParamDesc;\\r\\n} HTTP_SERVICE_CONFIG_SSL_CCS_SET_EX, *PHTTP_SERVICE_CONFIG_SSL_CCS_SET_EX;"},"_HTTP_SERVICE_CONFIG_SSL_KEY":{"comment":"","exp":"","file":"http.h","line":2167,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_SSL_KEY\\r\\n{\\r\\n    PSOCKADDR pIpPort;\\r\\n} HTTP_SERVICE_CONFIG_SSL_KEY, *PHTTP_SERVICE_CONFIG_SSL_KEY;"},"_HTTP_SERVICE_CONFIG_SSL_KEY_EX":{"comment":"","exp":"","file":"http.h","line":2172,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_SSL_KEY_EX\\r\\n{\\r\\n    SOCKADDR_STORAGE IpPort;\\r\\n} HTTP_SERVICE_CONFIG_SSL_KEY_EX, *PHTTP_SERVICE_CONFIG_SSL_KEY_EX;"},"_HTTP_SERVICE_CONFIG_SSL_PARAM":{"comment":"","exp":"","file":"http.h","line":2197,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_SSL_PARAM\\r\\n{\\r\\n    ULONG SslHashLength;      \/\/ Length of the SSL hash (in bytes)\\r\\n    PVOID pSslHash;           \/\/ Pointer to the SSL hash\\r\\n    GUID  AppId;              \/\/ A unique identifier that can be used to\\r\\n                              \/\/ identify the app that has set this parameter\\r\\n    PWSTR pSslCertStoreName;  \/\/ Store name to read the server certificate\\r\\n                              \/\/ from; defaults to \"MY\". Certificate must be\\r\\n                              \/\/ stored in the LOCAL_MACHINE context.\\r\\n    \/\/\\r\\n    \/\/ The following settings are used only for client certificates\\r\\n    \/\/\\r\\n    \/\/\\r\\n    \/\/ DefaultCertCheckMode is a bit flag with the following semantics\\r\\n    \/\/  0x1     - Client certificate will not be verified for revocation\\r\\n    \/\/  0x2     - Only cached certificate revocation will be used.\\r\\n    \/\/  0x4     - Enable use of the DefaultRevocationFreshnessTime setting\\r\\n    \/\/  0x10000 - No usage check.\\r\\n    DWORD DefaultCertCheckMode;\\r\\n    \/\/\\r\\n    \/\/ DefaultRevocationFreshnessTime (seconds) - How often to check for\\r\\n    \/\/ an updated Certificate revocation list (CRL). If this value is 0\\r\\n    \/\/ then the new CRL is updated only if the previous one expires\\r\\n    \/\/\\r\\n    DWORD DefaultRevocationFreshnessTime;\\r\\n    \/\/\\r\\n    \/\/ DefaultRevocationUrlRetrievalTimeout (milliseconds) - Timeout on\\r\\n    \/\/ attempt to retrieve certificate revocation list from the remote URL.\\r\\n    \/\/\\r\\n    DWORD DefaultRevocationUrlRetrievalTimeout;\\r\\n    \/\/\\r\\n    \/\/ pDefaultSslCtlIdentifier - Restrict the certificate issuers that you\\r\\n    \/\/ want to trust. Can be a subset of the certificate issuers that are\\r\\n    \/\/ trusted by the machine.\\r\\n    \/\/\\r\\n    PWSTR pDefaultSslCtlIdentifier;\\r\\n    \/\/\\r\\n    \/\/ Store name under LOCAL_MACHINE where Ctl identified by\\r\\n    \/\/ pDefaultSslCtlIdentifier is stored.\\r\\n    \/\/\\r\\n    PWSTR pDefaultSslCtlStoreName;\\r\\n    \/\/\\r\\n    \/\/ Default Flags - see HTTP_SERVICE_CONFIG_SSL_FLAG* below.\\r\\n    \/\/\\r\\n    DWORD DefaultFlags;\\r\\n} HTTP_SERVICE_CONFIG_SSL_PARAM, *PHTTP_SERVICE_CONFIG_SSL_PARAM;"},"_HTTP_SERVICE_CONFIG_SSL_PARAM_EX":{"comment":"","exp":"","file":"http.h","line":2327,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_SSL_PARAM_EX\\r\\n{\\r\\n    \/\/\\r\\n    \/\/ The id that decides which param property is passed below.\\r\\n    \/\/\\r\\n    HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE ParamType;\\r\\n    \/\/\\r\\n    \/\/ Flags for future use, if any.\\r\\n    \/\/\\r\\n    ULONGLONG Flags;\\r\\n    \/\/\\r\\n    \/\/ The property.\\r\\n    \/\/\\r\\n    union\\r\\n    {\\r\\n        HTTP2_WINDOW_SIZE_PARAM Http2WindowSizeParam;\\r\\n        HTTP2_SETTINGS_LIMITS_PARAM Http2SettingsLimitsParam;\\r\\n        HTTP_PERFORMANCE_PARAM HttpPerformanceParam;\\r\\n    };\\r\\n} HTTP_SERVICE_CONFIG_SSL_PARAM_EX, *PHTTP_SERVICE_CONFIG_SSL_PARAM_EX;"},"_HTTP_SERVICE_CONFIG_SSL_QUERY":{"comment":"","exp":"","file":"http.h","line":2445,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_SSL_QUERY\\r\\n{\\r\\n    HTTP_SERVICE_CONFIG_QUERY_TYPE  QueryDesc;\\r\\n    HTTP_SERVICE_CONFIG_SSL_KEY     KeyDesc;\\r\\n    DWORD                           dwToken;\\r\\n} HTTP_SERVICE_CONFIG_SSL_QUERY, *PHTTP_SERVICE_CONFIG_SSL_QUERY;"},"_HTTP_SERVICE_CONFIG_SSL_QUERY_EX":{"comment":"","exp":"","file":"http.h","line":2468,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_SSL_QUERY_EX\\r\\n{\\r\\n    HTTP_SERVICE_CONFIG_QUERY_TYPE  QueryDesc;\\r\\n    HTTP_SERVICE_CONFIG_SSL_KEY_EX  KeyDesc;\\r\\n    DWORD                           dwToken;\\r\\n    HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE ParamType;\\r\\n} HTTP_SERVICE_CONFIG_SSL_QUERY_EX, *PHTTP_SERVICE_CONFIG_SSL_QUERY_EX;"},"_HTTP_SERVICE_CONFIG_SSL_SET":{"comment":"","exp":"","file":"http.h","line":2387,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_SSL_SET\\r\\n{\\r\\n    HTTP_SERVICE_CONFIG_SSL_KEY     KeyDesc;\\r\\n    HTTP_SERVICE_CONFIG_SSL_PARAM   ParamDesc;\\r\\n} HTTP_SERVICE_CONFIG_SSL_SET, *PHTTP_SERVICE_CONFIG_SSL_SET;"},"_HTTP_SERVICE_CONFIG_SSL_SET_EX":{"comment":"","exp":"","file":"http.h","line":2407,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_SSL_SET_EX\\r\\n{\\r\\n    HTTP_SERVICE_CONFIG_SSL_KEY_EX   KeyDesc;\\r\\n    HTTP_SERVICE_CONFIG_SSL_PARAM_EX ParamDesc;\\r\\n} HTTP_SERVICE_CONFIG_SSL_SET_EX, *PHTTP_SERVICE_CONFIG_SSL_SET_EX;"},"_HTTP_SERVICE_CONFIG_SSL_SNI_KEY":{"comment":"","exp":"","file":"http.h","line":2180,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_SSL_SNI_KEY\\r\\n{\\r\\n    SOCKADDR_STORAGE IpPort;\\r\\n    PWSTR Host;\\r\\n} HTTP_SERVICE_CONFIG_SSL_SNI_KEY, *PHTTP_SERVICE_CONFIG_SSL_SNI_KEY;"},"_HTTP_SERVICE_CONFIG_SSL_SNI_QUERY":{"comment":"","exp":"","file":"http.h","line":2454,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_SSL_SNI_QUERY\\r\\n{\\r\\n    HTTP_SERVICE_CONFIG_QUERY_TYPE  QueryDesc;\\r\\n    HTTP_SERVICE_CONFIG_SSL_SNI_KEY KeyDesc;\\r\\n    DWORD                           dwToken;\\r\\n} HTTP_SERVICE_CONFIG_SSL_SNI_QUERY, *PHTTP_SERVICE_CONFIG_SSL_SNI_QUERY;"},"_HTTP_SERVICE_CONFIG_SSL_SNI_QUERY_EX":{"comment":"","exp":"","file":"http.h","line":2476,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_SSL_SNI_QUERY_EX\\r\\n{\\r\\n    HTTP_SERVICE_CONFIG_QUERY_TYPE  QueryDesc;\\r\\n    HTTP_SERVICE_CONFIG_SSL_SNI_KEY KeyDesc;\\r\\n    DWORD                           dwToken;\\r\\n    HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE ParamType;\\r\\n} HTTP_SERVICE_CONFIG_SSL_SNI_QUERY_EX, *PHTTP_SERVICE_CONFIG_SSL_SNI_QUERY_EX;"},"_HTTP_SERVICE_CONFIG_SSL_SNI_SET":{"comment":"","exp":"","file":"http.h","line":2395,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_SSL_SNI_SET\\r\\n{\\r\\n    HTTP_SERVICE_CONFIG_SSL_SNI_KEY KeyDesc;\\r\\n    HTTP_SERVICE_CONFIG_SSL_PARAM   ParamDesc;\\r\\n} HTTP_SERVICE_CONFIG_SSL_SNI_SET, *PHTTP_SERVICE_CONFIG_SSL_SNI_SET;"},"_HTTP_SERVICE_CONFIG_SSL_SNI_SET_EX":{"comment":"","exp":"","file":"http.h","line":2413,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_SSL_SNI_SET_EX\\r\\n{\\r\\n    HTTP_SERVICE_CONFIG_SSL_SNI_KEY  KeyDesc;\\r\\n    HTTP_SERVICE_CONFIG_SSL_PARAM_EX ParamDesc;\\r\\n} HTTP_SERVICE_CONFIG_SSL_SNI_SET_EX, *PHTTP_SERVICE_CONFIG_SSL_SNI_SET_EX;"},"_HTTP_SERVICE_CONFIG_TIMEOUT_KEY":{"comment":"","exp":"","file":"http.h","line":294,"type":"Enum","value":"typedef enum _HTTP_SERVICE_CONFIG_TIMEOUT_KEY\\r\\n{\\r\\n    IdleConnectionTimeout = 0,\\r\\n    HeaderWaitTimeout\\r\\n} HTTP_SERVICE_CONFIG_TIMEOUT_KEY, *PHTTP_SERVICE_CONFIG_TIMEOUT_KEY;"},"_HTTP_SERVICE_CONFIG_TIMEOUT_SET":{"comment":"","exp":"","file":"http.h","line":310,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_TIMEOUT_SET\\r\\n{\\r\\n    HTTP_SERVICE_CONFIG_TIMEOUT_KEY KeyDesc;\\r\\n    HTTP_SERVICE_CONFIG_TIMEOUT_PARAM ParamDesc;\\r\\n} HTTP_SERVICE_CONFIG_TIMEOUT_SET, *PHTTP_SERVICE_CONFIG_TIMEOUT_SET;"},"_HTTP_SERVICE_CONFIG_URLACL_KEY":{"comment":"","exp":"","file":"http.h","line":2531,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_URLACL_KEY\\r\\n{\\r\\n    PWSTR pUrlPrefix;\\r\\n} HTTP_SERVICE_CONFIG_URLACL_KEY, *PHTTP_SERVICE_CONFIG_URLACL_KEY;"},"_HTTP_SERVICE_CONFIG_URLACL_PARAM":{"comment":"","exp":"","file":"http.h","line":2541,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_URLACL_PARAM\\r\\n{\\r\\n    PWSTR pStringSecurityDescriptor;\\r\\n} HTTP_SERVICE_CONFIG_URLACL_PARAM, *PHTTP_SERVICE_CONFIG_URLACL_PARAM;"},"_HTTP_SERVICE_CONFIG_URLACL_QUERY":{"comment":"","exp":"","file":"http.h","line":2574,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_URLACL_QUERY\\r\\n{\\r\\n    HTTP_SERVICE_CONFIG_QUERY_TYPE  QueryDesc;\\r\\n    HTTP_SERVICE_CONFIG_URLACL_KEY  KeyDesc;\\r\\n    DWORD                           dwToken;\\r\\n} HTTP_SERVICE_CONFIG_URLACL_QUERY, *PHTTP_SERVICE_CONFIG_URLACL_QUERY;"},"_HTTP_SERVICE_CONFIG_URLACL_SET":{"comment":"","exp":"","file":"http.h","line":2553,"type":"Struct","value":"typedef struct _HTTP_SERVICE_CONFIG_URLACL_SET\\r\\n{\\r\\n    HTTP_SERVICE_CONFIG_URLACL_KEY   KeyDesc;\\r\\n    HTTP_SERVICE_CONFIG_URLACL_PARAM ParamDesc;\\r\\n} HTTP_SERVICE_CONFIG_URLACL_SET, *PHTTP_SERVICE_CONFIG_URLACL_SET;"},"_HTTP_SSL_CLIENT_CERT_INFO":{"comment":"","exp":"","file":"http.h","line":1468,"type":"Struct","value":"typedef struct _HTTP_SSL_CLIENT_CERT_INFO\\r\\n{\\r\\n    ULONG   CertFlags;\\r\\n    ULONG   CertEncodedSize;\\r\\n    PUCHAR  pCertEncoded;\\r\\n    HANDLE  Token;\\r\\n    BOOLEAN CertDeniedByMapper;\\r\\n} HTTP_SSL_CLIENT_CERT_INFO, *PHTTP_SSL_CLIENT_CERT_INFO;"},"_HTTP_SSL_INFO":{"comment":"","exp":"","file":"http.h","line":1492,"type":"Struct","value":"typedef struct _HTTP_SSL_INFO\\r\\n{\\r\\n    USHORT ServerCertKeySize;\\r\\n    USHORT ConnectionKeySize;\\r\\n    ULONG  ServerCertIssuerSize;\\r\\n    ULONG  ServerCertSubjectSize;\\r\\n    PCSTR  pServerCertIssuer;\\r\\n    PCSTR  pServerCertSubject;\\r\\n    PHTTP_SSL_CLIENT_CERT_INFO pClientCertInfo;\\r\\n    ULONG                      SslClientCertNegotiated;\\r\\n} HTTP_SSL_INFO, *PHTTP_SSL_INFO;"},"_HTTP_SSL_PROTOCOL_INFO":{"comment":"","exp":"","file":"http.h","line":1516,"type":"Struct","value":"typedef struct _HTTP_SSL_PROTOCOL_INFO\\r\\n{\\r\\n    ULONG Protocol;\\r\\n    ULONG CipherType;\\r\\n    ULONG CipherStrength;\\r\\n    ULONG HashType;\\r\\n    ULONG HashStrength;\\r\\n    ULONG KeyExchangeType;\\r\\n    ULONG KeyExchangeStrength;\\r\\n} HTTP_SSL_PROTOCOL_INFO, *PHTTP_SSL_PROTOCOL_INFO;"},"_HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE":{"comment":"","exp":"","file":"http.h","line":2263,"type":"Enum","value":"typedef enum _HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE\\r\\n{\\r\\n    ExParamTypeHttp2Window,\\r\\n    ExParamTypeHttp2SettingsLimits,\\r\\n    ExParamTypeHttpPerformance,\\r\\n    ExParamTypeMax\\r\\n} HTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE, *PHTTP_SSL_SERVICE_CONFIG_EX_PARAM_TYPE;"},"_HTTP_STATE_INFO":{"comment":"","exp":"","file":"http.h","line":195,"type":"Struct","value":"typedef struct _HTTP_STATE_INFO\\r\\n{\\r\\n    HTTP_PROPERTY_FLAGS Flags;\\r\\n    HTTP_ENABLED_STATE  State;\\r\\n} HTTP_STATE_INFO, *PHTTP_STATE_INFO;"},"_HTTP_TIMEOUT_LIMIT_INFO":{"comment":"","exp":"","file":"http.h","line":324,"type":"Struct","value":"typedef struct _HTTP_TIMEOUT_LIMIT_INFO\\r\\n{\\r\\n    HTTP_PROPERTY_FLAGS Flags;\\r\\n    \/\/\\r\\n    \/\/ Timeouts configured in seconds.\\r\\n    \/\/\\r\\n    USHORT EntityBody;\\r\\n    USHORT DrainEntityBody;\\r\\n    USHORT RequestQueue;\\r\\n    \/\/\\r\\n    \/\/ Following two timeouts are only enforced after first request on\\r\\n    \/\/ connection is routed to the application. These will not manipulate\\r\\n    \/\/ the driver wide timeouts.\\r\\n    \/\/\\r\\n    USHORT IdleConnection;\\r\\n    USHORT HeaderWait;\\r\\n    \/\/\\r\\n    \/\/ Timeouts configured in bytes\/second.\\r\\n    \/\/ This timer can be turned off by setting it to MAXULONG.\\r\\n    \/\/\\r\\n    ULONG MinSendRate;\\r\\n} HTTP_TIMEOUT_LIMIT_INFO, *PHTTP_TIMEOUT_LIMIT_INFO;"},"_HTTP_TRANSPORT_ADDRESS":{"comment":"","exp":"","file":"http.h","line":1387,"type":"Struct","value":"typedef struct _HTTP_TRANSPORT_ADDRESS\\r\\n{\\r\\n    PSOCKADDR      pRemoteAddress;\\r\\n    PSOCKADDR      pLocalAddress;\\r\\n} HTTP_TRANSPORT_ADDRESS, *PHTTP_TRANSPORT_ADDRESS;"},"_HTTP_UNKNOWN_HEADER":{"comment":"","exp":"","file":"http.h","line":1138,"type":"Struct","value":"typedef struct _HTTP_UNKNOWN_HEADER\\r\\n{\\r\\n    USHORT NameLength;          \/\/ in bytes not including the NUL\\r\\n    USHORT RawValueLength;      \/\/ in bytes not including the NUL\\r\\n    PCSTR  pName;               \/\/ The header name (minus the ':' character)\\r\\n    PCSTR  pRawValue;           \/\/ The header value\\r\\n} HTTP_UNKNOWN_HEADER, *PHTTP_UNKNOWN_HEADER;"},"_HTTP_URI_SCHEME":{"comment":"","exp":"","file":"http.h","line":1001,"type":"Enum","value":"typedef enum _HTTP_URI_SCHEME\\r\\n{\\r\\n    HttpSchemeHttp,\\r\\n    HttpSchemeHttps,\\r\\n    HttpSchemeMaximum\\r\\n} HTTP_SCHEME, *PHTTP_URI_SCHEME;"},"_HTTP_VERB":{"comment":"","exp":"","file":"http.h","line":1012,"type":"Enum","value":"typedef enum _HTTP_VERB\\r\\n{\\r\\n    HttpVerbUnparsed,\\r\\n    HttpVerbUnknown,\\r\\n    HttpVerbInvalid,\\r\\n    HttpVerbOPTIONS,\\r\\n    HttpVerbGET,\\r\\n    HttpVerbHEAD,\\r\\n    HttpVerbPOST,\\r\\n    HttpVerbPUT,\\r\\n    HttpVerbDELETE,\\r\\n    HttpVerbTRACE,\\r\\n    HttpVerbCONNECT,\\r\\n    HttpVerbTRACK,  \/\/ used by Microsoft Cluster Server for a non-logged trace\\r\\n    HttpVerbMOVE,\\r\\n    HttpVerbCOPY,\\r\\n    HttpVerbPROPFIND,\\r\\n    HttpVerbPROPPATCH,\\r\\n    HttpVerbMKCOL,\\r\\n    HttpVerbLOCK,\\r\\n    HttpVerbUNLOCK,\\r\\n    HttpVerbSEARCH,\\r\\n    HttpVerbMaximum\\r\\n} HTTP_VERB, *PHTTP_VERB;"},"_HTTP_VERSION":{"comment":"","exp":"","file":"http.h","line":950,"type":"Struct","value":"typedef struct _HTTP_VERSION\\r\\n{\\r\\n    USHORT MajorVersion;\\r\\n    USHORT MinorVersion;\\r\\n} HTTP_VERSION, *PHTTP_VERSION;"}},"__includes_list":{"D:|DEV|Win_10_SDK|Include|10.0.19041.0|um|http.h":[["winapifamily.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\shared\\winapifamily.h"],["winsock2.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\um\\WinSock2.h"],["ws2tcpip.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\um\\WS2tcpip.h"]]}}