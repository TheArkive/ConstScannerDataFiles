{"__const_list":{"ACCESSRECT_BROKEN":{"comment":"\/\/ PRIVATE: this lock was broken by an invalidate - don't call HAL on unlock","exp":"0x00000004L","file":"ddrawi.h","line":1303,"type":"Integer","value":4},"ACCESSRECT_NOTHOLDINGWIN16LOCK":{"comment":"\/\/ PRIVATE: this lock is not holding the Win16 lock","exp":"0x00000002L","file":"ddrawi.h","line":1302,"type":"Integer","value":2},"ACCESSRECT_VRAMSTYLE":{"comment":"\/\/ PRIVATE: this lock is vram style (vidmem or implict sysmem)","exp":"0x00000001L","file":"ddrawi.h","line":1301,"type":"Integer","value":1},"CCHDEVICENAME":{"comment":"","exp":"32","file":"ddrawi.h","line":414,"type":"Integer","value":32},"CO_E_NOTINITIALIZED":{"comment":"","exp":"0x800401F0L","file":"ddkernel.h","line":24,"type":"Integer","value":2147746288},"D3DFMT_INTERNAL_D15S1":{"comment":"","exp":"73","file":"ddrawi.h","line":466,"type":"Integer","value":73},"D3DFMT_INTERNAL_D24S8":{"comment":"","exp":"75","file":"ddrawi.h","line":468,"type":"Integer","value":75},"D3DFMT_INTERNAL_D24X8":{"comment":"","exp":"77","file":"ddrawi.h","line":470,"type":"Integer","value":77},"D3DFMT_INTERNAL_D32":{"comment":"","exp":"71","file":"ddrawi.h","line":464,"type":"Integer","value":71},"D3DFMT_INTERNAL_S1D15":{"comment":"","exp":"72","file":"ddrawi.h","line":465,"type":"Integer","value":72},"D3DFMT_INTERNAL_S8D24":{"comment":"","exp":"74","file":"ddrawi.h","line":467,"type":"Integer","value":74},"D3DFMT_INTERNAL_X8D24":{"comment":"","exp":"76","file":"ddrawi.h","line":469,"type":"Integer","value":76},"D3DFORMAT_MEMBEROFGROUP_ARGB":{"comment":"","exp":"0x00080000L","file":"ddrawi.h","line":210,"type":"Integer","value":524288},"D3DFORMAT_OP_3DACCELERATION":{"comment":"","exp":"0x00000800L","file":"ddrawi.h","line":179,"type":"Integer","value":2048},"D3DFORMAT_OP_AUTOGENMIPMAP":{"comment":"","exp":"0x00400000L","file":"ddrawi.h","line":221,"type":"Integer","value":4194304},"D3DFORMAT_OP_BUMPMAP":{"comment":"","exp":"0x00010000L","file":"ddrawi.h","line":200,"type":"Integer","value":65536},"D3DFORMAT_OP_CONVERT_TO_ARGB":{"comment":"","exp":"0x00002000L","file":"ddrawi.h","line":190,"type":"Integer","value":8192},"D3DFORMAT_OP_CUBETEXTURE":{"comment":"","exp":"0x00000004L","file":"ddrawi.h","line":159,"type":"Integer","value":4},"D3DFORMAT_OP_DISPLAYMODE":{"comment":"","exp":"0x00000400L","file":"ddrawi.h","line":173,"type":"Integer","value":1024},"D3DFORMAT_OP_DMAP":{"comment":"","exp":"0x00020000L","file":"ddrawi.h","line":203,"type":"Integer","value":131072},"D3DFORMAT_OP_NOALPHABLEND":{"comment":"","exp":"0x00200000L","file":"ddrawi.h","line":217,"type":"Integer","value":2097152},"D3DFORMAT_OP_NOFILTER":{"comment":"","exp":"0x00040000L","file":"ddrawi.h","line":206,"type":"Integer","value":262144},"D3DFORMAT_OP_NOTEXCOORDWRAPNORMIP":{"comment":"","exp":"0x01000000L","file":"ddrawi.h","line":227,"type":"Integer","value":16777216},"D3DFORMAT_OP_OFFSCREENPLAIN":{"comment":"","exp":"0x00004000L","file":"ddrawi.h","line":193,"type":"Integer","value":16384},"D3DFORMAT_OP_OFFSCREEN_RENDERTARGET":{"comment":"","exp":"0x00000008L","file":"ddrawi.h","line":160,"type":"Integer","value":8},"D3DFORMAT_OP_PIXELSIZE":{"comment":"","exp":"0x00001000L","file":"ddrawi.h","line":186,"type":"Integer","value":4096},"D3DFORMAT_OP_SAME_FORMAT_RENDERTARGET":{"comment":"","exp":"0x00000010L","file":"ddrawi.h","line":161,"type":"Integer","value":16},"D3DFORMAT_OP_SAME_FORMAT_UP_TO_ALPHA_RENDERTARGET":{"comment":"","exp":"0x00000100L","file":"ddrawi.h","line":169,"type":"Integer","value":256},"D3DFORMAT_OP_SRGBREAD":{"comment":"","exp":"0x00008000L","file":"ddrawi.h","line":197,"type":"Integer","value":32768},"D3DFORMAT_OP_SRGBWRITE":{"comment":"","exp":"0x00100000L","file":"ddrawi.h","line":214,"type":"Integer","value":1048576},"D3DFORMAT_OP_TEXTURE":{"comment":"","exp":"0x00000001L","file":"ddrawi.h","line":157,"type":"Integer","value":1},"D3DFORMAT_OP_VERTEXTEXTURE":{"comment":"","exp":"0x00800000L","file":"ddrawi.h","line":224,"type":"Integer","value":8388608},"D3DFORMAT_OP_VOLUMETEXTURE":{"comment":"","exp":"0x00000002L","file":"ddrawi.h","line":158,"type":"Integer","value":2},"D3DFORMAT_OP_ZSTENCIL":{"comment":"","exp":"0x00000040L","file":"ddrawi.h","line":162,"type":"Integer","value":64},"D3DFORMAT_OP_ZSTENCIL_WITH_ARBITRARY_COLOR_DEPTH":{"comment":"","exp":"0x00000080L","file":"ddrawi.h","line":163,"type":"Integer","value":128},"DCICOMMAND":{"comment":"\/\/ escape value","exp":"3075","file":"ddrawi.h","line":328,"type":"Integer","value":3075},"DDABLT_SRCOVERDEST":{"comment":"","exp":"0x00000001L","file":"ddrawint.h","line":1121,"type":"Integer","value":1},"DDAL_IMPLICIT":{"comment":"","exp":"0x00000001l","file":"ddrawi.h","line":1273,"type":"Integer","value":1},"DDBLT_AFLAGS":{"comment":"","exp":"0x80000000L","file":"ddrawint.h","line":1112,"type":"Integer","value":2147483648},"DDBLT_ANYALPHA":{"comment":"","exp":"(DDBLT_ALPHASRCSURFACEOVERRIDE | DDBLT_ALPHASRCCONSTOVERRIDE | DDBLT_ALPHASRC | DDBLT_ALPHADESTSURFACEOVERRIDE | DDBLT_ALPHADESTCONSTOVERRIDE | DDBLT_ALPHADEST)","file":"ddrawi.h","line":270,"type":"Integer","value":363},"DDCALLBACKSSIZE":{"comment":"","exp":"sizeof( DDHAL_DDCALLBACKS )","file":"ddrawi.h","line":720,"type":"Unknown","value":"sizeof( DDHAL_DDCALLBACKS )"},"DDCALLBACKSSIZE_V1":{"comment":"","exp":"( offsetof( DDHAL_DDCALLBACKS, SetExclusiveMode ) )","file":"ddrawi.h","line":719,"type":"Other","value":"( offsetof( DDHAL_DDCALLBACKS, SetExclusiveMode ) )"},"DDCOLORCONTROLCALLBACKSSIZE":{"comment":"","exp":"sizeof( DDHAL_DDCOLORCONTROLCALLBACKS )","file":"ddrawi.h","line":975,"type":"Unknown","value":"sizeof( DDHAL_DDCOLORCONTROLCALLBACKS )"},"DDCREATEDRIVEROBJECT":{"comment":"\/\/ create an object","exp":"10","file":"ddrawi.h","line":354,"type":"Integer","value":10},"DDEVENT_DISPLAY_VSYNC":{"comment":"","exp":"0x0001","file":"ddkmapi.h","line":474,"type":"Integer","value":1},"DDEVENT_POSTDOSBOX":{"comment":"","exp":"0x0040","file":"ddkmapi.h","line":480,"type":"Integer","value":64},"DDEVENT_POSTRESCHANGE":{"comment":"","exp":"0x0010","file":"ddkmapi.h","line":478,"type":"Integer","value":16},"DDEVENT_PREDOSBOX":{"comment":"","exp":"0x0020","file":"ddkmapi.h","line":479,"type":"Integer","value":32},"DDEVENT_PRERESCHANGE":{"comment":"","exp":"0x0008","file":"ddkmapi.h","line":477,"type":"Integer","value":8},"DDEVENT_VP_LINE":{"comment":"","exp":"0x0004","file":"ddkmapi.h","line":476,"type":"Integer","value":4},"DDEVENT_VP_VSYNC":{"comment":"","exp":"0x0002","file":"ddkmapi.h","line":475,"type":"Integer","value":2},"DDEXEBUFCALLBACKSSIZE":{"comment":"","exp":"sizeof( DDHAL_DDEXEBUFCALLBACKS )","file":"ddrawi.h","line":894,"type":"Unknown","value":"sizeof( DDHAL_DDEXEBUFCALLBACKS )"},"DDGET32BITDRIVERNAME":{"comment":"\/\/ get a 32-bit driver name","exp":"11","file":"ddrawi.h","line":355,"type":"Integer","value":11},"DDHALINFOSIZE_V2":{"comment":"","exp":"sizeof( DDHALINFO )","file":"ddrawi.h","line":2028,"type":"Unknown","value":"sizeof( DDHALINFO )"},"DDHALINFO_GETDRIVERINFO2":{"comment":"\/\/ indicates driver support GetDriverInfo2 variant","exp":"0x00000008l","file":"ddrawi.h","line":2033,"type":"Integer","value":8},"DDHALINFO_GETDRIVERINFOSET":{"comment":"\/\/ indicates that GetDriverInfo is set","exp":"0x00000004l","file":"ddrawi.h","line":2032,"type":"Integer","value":4},"DDHALINFO_ISPRIMARYDISPLAY":{"comment":"\/\/ indicates driver is primary display driver","exp":"0x00000001l","file":"ddrawi.h","line":2030,"type":"Integer","value":1},"DDHALINFO_MODEXILLEGAL":{"comment":"\/\/ indicates this hardware does not support modex modes","exp":"0x00000002l","file":"ddrawi.h","line":2031,"type":"Integer","value":2},"DDHAL_ALIGNVALIDCAPS":{"comment":"","exp":"(DDSCAPS_OFFSCREENPLAIN | DDSCAPS_EXECUTEBUFFER | DDSCAPS_OVERLAY | DDSCAPS_TEXTURE | DDSCAPS_ZBUFFER | DDSCAPS_ALPHA | DDSCAPS_FLIP )","file":"ddrawi.h","line":2716,"type":"Integer","value":8523986},"DDHAL_APP_DLLNAME":{"comment":"","exp":"\"DDRAW.DLL\"","file":"ddrawi.h","line":408,"type":"String","value":"\"DDRAW.DLL\""},"DDHAL_CB32_CANCREATESURFACE":{"comment":"","exp":"0x00000020l","file":"ddrawi.h","line":727,"type":"Integer","value":32},"DDHAL_CB32_CREATEPALETTE":{"comment":"","exp":"0x00000040l","file":"ddrawi.h","line":728,"type":"Integer","value":64},"DDHAL_CB32_CREATESURFACE":{"comment":"","exp":"0x00000002l","file":"ddrawi.h","line":723,"type":"Integer","value":2},"DDHAL_CB32_DESTROYDRIVER":{"comment":"","exp":"0x00000001l","file":"ddrawi.h","line":722,"type":"Integer","value":1},"DDHAL_CB32_FLIPTOGDISURFACE":{"comment":"","exp":"0x00000200l","file":"ddrawi.h","line":731,"type":"Integer","value":512},"DDHAL_CB32_GETSCANLINE":{"comment":"","exp":"0x00000080l","file":"ddrawi.h","line":729,"type":"Integer","value":128},"DDHAL_CB32_MAPMEMORY":{"comment":"","exp":"0x80000000l","file":"ddrawint.h","line":385,"type":"Integer","value":2147483648},"DDHAL_CB32_SETCOLORKEY":{"comment":"","exp":"0x00000004l","file":"ddrawi.h","line":724,"type":"Integer","value":4},"DDHAL_CB32_SETEXCLUSIVEMODE":{"comment":"","exp":"0x00000100l","file":"ddrawi.h","line":730,"type":"Integer","value":256},"DDHAL_CB32_SETMODE":{"comment":"","exp":"0x00000008l","file":"ddrawi.h","line":725,"type":"Integer","value":8},"DDHAL_CB32_WAITFORVERTICALBLANK":{"comment":"","exp":"0x00000010l","file":"ddrawi.h","line":726,"type":"Integer","value":16},"DDHAL_COLOR_COLORCONTROL":{"comment":"","exp":"0x00000001l","file":"ddrawi.h","line":977,"type":"Integer","value":1},"DDHAL_CREATESURFACEEX_SWAPHANDLES":{"comment":"","exp":"0x00000001l","file":"ddrawint.h","line":425,"type":"Integer","value":1},"DDHAL_D3DBUFCB32_CANCREATED3DBUF":{"comment":"","exp":"DDHAL_EXEBUFCB32_CANCREATEEXEBUF","file":"ddrawint.h","line":926,"type":"Integer","value":1},"DDHAL_D3DBUFCB32_CREATED3DBUF":{"comment":"","exp":"DDHAL_EXEBUFCB32_CREATEEXEBUF","file":"ddrawint.h","line":927,"type":"Integer","value":2},"DDHAL_D3DBUFCB32_DESTROYD3DBUF":{"comment":"","exp":"DDHAL_EXEBUFCB32_DESTROYEXEBUF","file":"ddrawint.h","line":928,"type":"Integer","value":4},"DDHAL_D3DBUFCB32_LOCKD3DBUF":{"comment":"","exp":"DDHAL_EXEBUFCB32_LOCKEXEBUF","file":"ddrawint.h","line":929,"type":"Integer","value":8},"DDHAL_D3DBUFCB32_UNLOCKD3DBUF":{"comment":"","exp":"DDHAL_EXEBUFCB32_UNLOCKEXEBUF","file":"ddrawint.h","line":930,"type":"Integer","value":16},"DDHAL_DRIVER_DLLNAME":{"comment":"","exp":"\"DDRAW16.DLL\"","file":"ddrawi.h","line":407,"type":"String","value":"\"DDRAW16.DLL\""},"DDHAL_DRIVER_HANDLED":{"comment":"","exp":"0x00000001l","file":"ddrawi.h","line":1059,"type":"Integer","value":1},"DDHAL_DRIVER_NOCKEYHW":{"comment":"","exp":"0x00000002l","file":"ddrawi.h","line":1065,"type":"Integer","value":2},"DDHAL_DRIVER_NOTHANDLED":{"comment":"","exp":"0x00000000l","file":"ddrawi.h","line":1054,"type":"Integer","value":0},"DDHAL_EXEBUFCB32_CANCREATEEXEBUF":{"comment":"","exp":"0x00000001l","file":"ddrawi.h","line":896,"type":"Integer","value":1},"DDHAL_EXEBUFCB32_CREATEEXEBUF":{"comment":"","exp":"0x00000002l","file":"ddrawi.h","line":897,"type":"Integer","value":2},"DDHAL_EXEBUFCB32_DESTROYEXEBUF":{"comment":"","exp":"0x00000004l","file":"ddrawi.h","line":898,"type":"Integer","value":4},"DDHAL_EXEBUFCB32_LOCKEXEBUF":{"comment":"","exp":"0x00000008l","file":"ddrawi.h","line":899,"type":"Integer","value":8},"DDHAL_EXEBUFCB32_UNLOCKEXEBUF":{"comment":"","exp":"0x00000010l","file":"ddrawi.h","line":900,"type":"Integer","value":16},"DDHAL_KERNEL_SYNCSURFACEDATA":{"comment":"","exp":"0x00000001l","file":"ddrawi.h","line":995,"type":"Integer","value":1},"DDHAL_KERNEL_SYNCVIDEOPORTDATA":{"comment":"","exp":"0x00000002l","file":"ddrawi.h","line":996,"type":"Integer","value":2},"DDHAL_MISC2CB32_ALPHABLT":{"comment":"","exp":"0x00000001l","file":"ddrawint.h","line":418,"type":"Integer","value":1},"DDHAL_MISC2CB32_CREATESURFACEEX":{"comment":"","exp":"0x00000002l","file":"ddrawi.h","line":857,"type":"Integer","value":2},"DDHAL_MISC2CB32_DESTROYDDLOCAL":{"comment":"","exp":"0x00000008l","file":"ddrawi.h","line":859,"type":"Integer","value":8},"DDHAL_MISC2CB32_GETDRIVERSTATE":{"comment":"","exp":"0x00000004l","file":"ddrawi.h","line":858,"type":"Integer","value":4},"DDHAL_MISCCB32_GETAVAILDRIVERMEMORY":{"comment":"","exp":"0x00000001l","file":"ddrawi.h","line":832,"type":"Integer","value":1},"DDHAL_MISCCB32_GETHEAPALIGNMENT":{"comment":"","exp":"0x00000004l","file":"ddrawi.h","line":834,"type":"Integer","value":4},"DDHAL_MISCCB32_GETSYSMEMBLTSTATUS":{"comment":"","exp":"0x00000008l","file":"ddrawi.h","line":835,"type":"Integer","value":8},"DDHAL_MISCCB32_UPDATENONLOCALHEAP":{"comment":"","exp":"0x00000002l","file":"ddrawi.h","line":833,"type":"Integer","value":2},"DDHAL_MOCOMP32_BEGINFRAME":{"comment":"","exp":"0x00000020","file":"ddrawi.h","line":1040,"type":"Integer","value":32},"DDHAL_MOCOMP32_CREATE":{"comment":"","exp":"0x00000004","file":"ddrawi.h","line":1037,"type":"Integer","value":4},"DDHAL_MOCOMP32_DESTROY":{"comment":"","exp":"0x00000200","file":"ddrawi.h","line":1044,"type":"Integer","value":512},"DDHAL_MOCOMP32_ENDFRAME":{"comment":"","exp":"0x00000040","file":"ddrawi.h","line":1041,"type":"Integer","value":64},"DDHAL_MOCOMP32_GETCOMPBUFFINFO":{"comment":"","exp":"0x00000008","file":"ddrawi.h","line":1038,"type":"Integer","value":8},"DDHAL_MOCOMP32_GETFORMATS":{"comment":"","exp":"0x00000002","file":"ddrawi.h","line":1036,"type":"Integer","value":2},"DDHAL_MOCOMP32_GETGUIDS":{"comment":"","exp":"0x00000001","file":"ddrawi.h","line":1035,"type":"Integer","value":1},"DDHAL_MOCOMP32_GETINTERNALINFO":{"comment":"","exp":"0x00000010","file":"ddrawi.h","line":1039,"type":"Integer","value":16},"DDHAL_MOCOMP32_QUERYSTATUS":{"comment":"","exp":"0x00000100","file":"ddrawi.h","line":1043,"type":"Integer","value":256},"DDHAL_MOCOMP32_RENDER":{"comment":"","exp":"0x00000080","file":"ddrawi.h","line":1042,"type":"Integer","value":128},"DDHAL_NTCB32_FLIPTOGDISURFACE":{"comment":"","exp":"0x00000004l","file":"ddrawint.h","line":444,"type":"Integer","value":4},"DDHAL_NTCB32_FREEDRIVERMEMORY":{"comment":"","exp":"0x00000001l","file":"ddrawint.h","line":442,"type":"Integer","value":1},"DDHAL_NTCB32_SETEXCLUSIVEMODE":{"comment":"","exp":"0x00000002l","file":"ddrawint.h","line":443,"type":"Integer","value":2},"DDHAL_PALCB32_DESTROYPALETTE":{"comment":"","exp":"0x00000001l","file":"ddrawi.h","line":750,"type":"Integer","value":1},"DDHAL_PALCB32_SETENTRIES":{"comment":"","exp":"0x00000002l","file":"ddrawi.h","line":751,"type":"Integer","value":2},"DDHAL_PLEASEALLOC_BLOCKSIZE":{"comment":"","exp":"0x00000002l","file":"ddrawi.h","line":550,"type":"Integer","value":2},"DDHAL_PLEASEALLOC_LINEARSIZE":{"comment":"","exp":"0x00000003l","file":"ddrawi.h","line":558,"type":"Integer","value":3},"DDHAL_PLEASEALLOC_USERMEM":{"comment":"","exp":"0x00000004l","file":"ddrawint.h","line":276,"type":"Integer","value":4},"DDHAL_PRIVATECAP_ATOMICSURFACECREATION":{"comment":"","exp":"0x00000001l","file":"ddrawint.h","line":1082,"type":"Integer","value":1},"DDHAL_PRIVATECAP_NOTIFYPRIMARYCREATION":{"comment":"","exp":"0x00000002l","file":"ddrawint.h","line":1085,"type":"Integer","value":2},"DDHAL_PRIVATECAP_RESERVED1":{"comment":"","exp":"0x00000004l","file":"ddrawint.h","line":1087,"type":"Integer","value":4},"DDHAL_SURFCB32_ADDATTACHEDSURFACE":{"comment":"","exp":"0x00000080l","file":"ddrawi.h","line":801,"type":"Integer","value":128},"DDHAL_SURFCB32_BLT":{"comment":"","exp":"0x00000020l","file":"ddrawi.h","line":799,"type":"Integer","value":32},"DDHAL_SURFCB32_DESTROYSURFACE":{"comment":"","exp":"0x00000001l","file":"ddrawi.h","line":794,"type":"Integer","value":1},"DDHAL_SURFCB32_FLIP":{"comment":"","exp":"0x00000002l","file":"ddrawi.h","line":795,"type":"Integer","value":2},"DDHAL_SURFCB32_GETBLTSTATUS":{"comment":"","exp":"0x00000100l","file":"ddrawi.h","line":802,"type":"Integer","value":256},"DDHAL_SURFCB32_GETFLIPSTATUS":{"comment":"","exp":"0x00000200l","file":"ddrawi.h","line":803,"type":"Integer","value":512},"DDHAL_SURFCB32_LOCK":{"comment":"","exp":"0x00000008l","file":"ddrawi.h","line":797,"type":"Integer","value":8},"DDHAL_SURFCB32_RESERVED4":{"comment":"","exp":"0x00001000l","file":"ddrawi.h","line":806,"type":"Integer","value":4096},"DDHAL_SURFCB32_SETCLIPLIST":{"comment":"","exp":"0x00000004l","file":"ddrawi.h","line":796,"type":"Integer","value":4},"DDHAL_SURFCB32_SETCOLORKEY":{"comment":"","exp":"0x00000040l","file":"ddrawi.h","line":800,"type":"Integer","value":64},"DDHAL_SURFCB32_SETOVERLAYPOSITION":{"comment":"","exp":"0x00000800l","file":"ddrawi.h","line":805,"type":"Integer","value":2048},"DDHAL_SURFCB32_SETPALETTE":{"comment":"","exp":"0x00002000l","file":"ddrawi.h","line":807,"type":"Integer","value":8192},"DDHAL_SURFCB32_UNLOCK":{"comment":"","exp":"0x00000010l","file":"ddrawi.h","line":798,"type":"Integer","value":16},"DDHAL_SURFCB32_UPDATEOVERLAY":{"comment":"","exp":"0x00000400l","file":"ddrawi.h","line":804,"type":"Integer","value":1024},"DDHAL_VPORT32_CANCREATEVIDEOPORT":{"comment":"","exp":"0x00000001l","file":"ddrawi.h","line":946,"type":"Integer","value":1},"DDHAL_VPORT32_COLORCONTROL":{"comment":"","exp":"0x00008000l","file":"ddrawi.h","line":960,"type":"Integer","value":32768},"DDHAL_VPORT32_CREATEVIDEOPORT":{"comment":"","exp":"0x00000002l","file":"ddrawi.h","line":947,"type":"Integer","value":2},"DDHAL_VPORT32_DESTROY":{"comment":"","exp":"0x00000400l","file":"ddrawi.h","line":955,"type":"Integer","value":1024},"DDHAL_VPORT32_FLIP":{"comment":"","exp":"0x00000004l","file":"ddrawi.h","line":948,"type":"Integer","value":4},"DDHAL_VPORT32_GETAUTOFLIPSURF":{"comment":"","exp":"0x00000040l","file":"ddrawint.h","line":569,"type":"Integer","value":64},"DDHAL_VPORT32_GETBANDWIDTH":{"comment":"","exp":"0x00000008l","file":"ddrawi.h","line":949,"type":"Integer","value":8},"DDHAL_VPORT32_GETCONNECT":{"comment":"","exp":"0x00000200l","file":"ddrawi.h","line":954,"type":"Integer","value":512},"DDHAL_VPORT32_GETFIELD":{"comment":"","exp":"0x00000080l","file":"ddrawi.h","line":952,"type":"Integer","value":128},"DDHAL_VPORT32_GETFLIPSTATUS":{"comment":"","exp":"0x00000800l","file":"ddrawi.h","line":956,"type":"Integer","value":2048},"DDHAL_VPORT32_GETINPUTFORMATS":{"comment":"","exp":"0x00000010l","file":"ddrawi.h","line":950,"type":"Integer","value":16},"DDHAL_VPORT32_GETLINE":{"comment":"","exp":"0x00000100l","file":"ddrawi.h","line":953,"type":"Integer","value":256},"DDHAL_VPORT32_GETOUTPUTFORMATS":{"comment":"","exp":"0x00000020l","file":"ddrawi.h","line":951,"type":"Integer","value":32},"DDHAL_VPORT32_GETSIGNALSTATUS":{"comment":"","exp":"0x00004000l","file":"ddrawi.h","line":959,"type":"Integer","value":16384},"DDHAL_VPORT32_UPDATE":{"comment":"","exp":"0x00001000l","file":"ddrawi.h","line":957,"type":"Integer","value":4096},"DDHAL_VPORT32_WAITFORSYNC":{"comment":"","exp":"0x00002000l","file":"ddrawi.h","line":958,"type":"Integer","value":8192},"DDIRQ_BUSMASTER":{"comment":"","exp":"0x00000002l","file":"dxmini.h","line":150,"type":"Integer","value":2},"DDIRQ_DISPLAY_VSYNC":{"comment":"","exp":"0x00000001l","file":"ddkernel.h","line":191,"type":"Integer","value":1},"DDIRQ_RESERVED1":{"comment":"","exp":"0x00000002l","file":"ddkernel.h","line":196,"type":"Integer","value":2},"DDIRQ_VPORT0_LINE":{"comment":"","exp":"0x00000008l","file":"ddkernel.h","line":206,"type":"Integer","value":8},"DDIRQ_VPORT0_VSYNC":{"comment":"","exp":"0x00000004l","file":"ddkernel.h","line":201,"type":"Integer","value":4},"DDIRQ_VPORT1_LINE":{"comment":"","exp":"0x00000020l","file":"ddkernel.h","line":216,"type":"Integer","value":32},"DDIRQ_VPORT1_VSYNC":{"comment":"","exp":"0x00000010l","file":"ddkernel.h","line":211,"type":"Integer","value":16},"DDIRQ_VPORT2_LINE":{"comment":"","exp":"0x00000080l","file":"ddkernel.h","line":226,"type":"Integer","value":128},"DDIRQ_VPORT2_VSYNC":{"comment":"","exp":"0x00000040l","file":"ddkernel.h","line":221,"type":"Integer","value":64},"DDIRQ_VPORT3_LINE":{"comment":"","exp":"0x00000200l","file":"ddkernel.h","line":236,"type":"Integer","value":512},"DDIRQ_VPORT3_VSYNC":{"comment":"","exp":"0x00000100l","file":"ddkernel.h","line":231,"type":"Integer","value":256},"DDIRQ_VPORT4_LINE":{"comment":"","exp":"0x00000800l","file":"ddkernel.h","line":246,"type":"Integer","value":2048},"DDIRQ_VPORT4_VSYNC":{"comment":"","exp":"0x00000400l","file":"ddkernel.h","line":241,"type":"Integer","value":1024},"DDIRQ_VPORT5_LINE":{"comment":"","exp":"0x00002000l","file":"ddkernel.h","line":256,"type":"Integer","value":8192},"DDIRQ_VPORT5_VSYNC":{"comment":"","exp":"0x00001000l","file":"ddkernel.h","line":251,"type":"Integer","value":4096},"DDIRQ_VPORT6_LINE":{"comment":"","exp":"0x00008000l","file":"ddkernel.h","line":266,"type":"Integer","value":32768},"DDIRQ_VPORT6_VSYNC":{"comment":"","exp":"0x00004000l","file":"ddkernel.h","line":261,"type":"Integer","value":16384},"DDIRQ_VPORT7_LINE":{"comment":"","exp":"0x00020000l","file":"ddkernel.h","line":276,"type":"Integer","value":131072},"DDIRQ_VPORT7_VSYNC":{"comment":"","exp":"0x00010000l","file":"ddkernel.h","line":271,"type":"Integer","value":65536},"DDIRQ_VPORT8_LINE":{"comment":"","exp":"0x00080000l","file":"ddkernel.h","line":286,"type":"Integer","value":524288},"DDIRQ_VPORT8_VSYNC":{"comment":"","exp":"0x00040000l","file":"ddkernel.h","line":281,"type":"Integer","value":262144},"DDIRQ_VPORT9_LINE":{"comment":"","exp":"0x00020000l","file":"ddkernel.h","line":296,"type":"Integer","value":131072},"DDIRQ_VPORT9_VSYNC":{"comment":"","exp":"0x00010000l","file":"ddkernel.h","line":291,"type":"Integer","value":65536},"DDKERNELCALLBACKSSIZE":{"comment":"","exp":"sizeof(DDHAL_DDKERNELCALLBACKS)","file":"ddrawi.h","line":998,"type":"Unknown","value":"sizeof(DDHAL_DDKERNELCALLBACKS)"},"DDKERNELCAPS_AUTOFLIP":{"comment":"","exp":"0x00000002l","file":"ddkernel.h","line":136,"type":"Integer","value":2},"DDKERNELCAPS_CAPTURE_INVERTED":{"comment":"","exp":"0x00000200l","file":"ddkernel.h","line":180,"type":"Integer","value":512},"DDKERNELCAPS_CAPTURE_NONLOCALVIDMEM":{"comment":"","exp":"0x00000080l","file":"ddkernel.h","line":168,"type":"Integer","value":128},"DDKERNELCAPS_CAPTURE_SYSMEM":{"comment":"","exp":"0x00000040l","file":"ddkernel.h","line":162,"type":"Integer","value":64},"DDKERNELCAPS_FIELDPOLARITY":{"comment":"","exp":"0x00000100l","file":"ddkernel.h","line":174,"type":"Integer","value":256},"DDKERNELCAPS_FLIPOVERLAY":{"comment":"","exp":"0x00000020l","file":"ddkernel.h","line":156,"type":"Integer","value":32},"DDKERNELCAPS_FLIPVIDEOPORT":{"comment":"","exp":"0x00000010l","file":"ddkernel.h","line":151,"type":"Integer","value":16},"DDKERNELCAPS_LOCK":{"comment":"","exp":"0x00000008l","file":"ddkernel.h","line":146,"type":"Integer","value":8},"DDKERNELCAPS_SETSTATE":{"comment":"","exp":"0x00000004l","file":"ddkernel.h","line":141,"type":"Integer","value":4},"DDKERNELCAPS_SKIPFIELDS":{"comment":"","exp":"0x00000001l","file":"ddkernel.h","line":131,"type":"Integer","value":1},"DDMCQUERY_READ":{"comment":"","exp":"0x00000001","file":"ddrawi.h","line":2965,"type":"Integer","value":1},"DDMISCELLANEOUS2CALLBACKSSIZE":{"comment":"","exp":"sizeof(DDHAL_DDMISCELLANEOUS2CALLBACKS)","file":"ddrawi.h","line":862,"type":"Unknown","value":"sizeof(DDHAL_DDMISCELLANEOUS2CALLBACKS)"},"DDMISCELLANEOUSCALLBACKSSIZE":{"comment":"","exp":"sizeof(DDHAL_DDMISCELLANEOUSCALLBACKS)","file":"ddrawi.h","line":837,"type":"Unknown","value":"sizeof(DDHAL_DDMISCELLANEOUSCALLBACKS)"},"DDMODEINFO_MAXREFRESH":{"comment":"\/\/ refresh rate specified is the max supported","exp":"0x0010","file":"ddrawi.h","line":1644,"type":"Integer","value":16},"DDMODEINFO_MODEX":{"comment":"\/\/ mode is a modex mode","exp":"0x0002","file":"ddrawi.h","line":1636,"type":"Integer","value":2},"DDMODEINFO_PALETTIZED":{"comment":"\/\/ mode is palettized","exp":"0x0001","file":"ddrawi.h","line":1635,"type":"Integer","value":1},"DDMODEINFO_STANDARDVGA":{"comment":"\/\/ mode is standard vga, e.g. mode 0x13","exp":"0x0008","file":"ddrawi.h","line":1642,"type":"Integer","value":8},"DDMODEINFO_STEREO":{"comment":"\/\/ mode can be switched to stereo","exp":"0x0020","file":"ddrawi.h","line":1645,"type":"Integer","value":32},"DDMODEINFO_UNSUPPORTED":{"comment":"\/\/ mode is not supported by driver","exp":"0x0004","file":"ddrawi.h","line":1637,"type":"Integer","value":4},"DDMOTIONCOMPCALLBACKSSIZE":{"comment":"","exp":"sizeof( DDHAL_DDMOTIONCOMPCALLBACKS )","file":"ddrawi.h","line":1033,"type":"Unknown","value":"sizeof( DDHAL_DDMOTIONCOMPCALLBACKS )"},"DDNEWCALLBACKFNS":{"comment":"\/\/ new callback fns coming","exp":"12","file":"ddrawi.h","line":356,"type":"Integer","value":12},"DDNOTIFY_CLOSECAPTURE":{"comment":"\/\/ dwParam1 = hCapture","exp":"0x0400","file":"ddkmapi.h","line":495,"type":"Integer","value":1024},"DDNOTIFY_CLOSEDIRECTDRAW":{"comment":"\/\/ dwParam1 = hDirectDraw","exp":"0x0080","file":"ddkmapi.h","line":492,"type":"Integer","value":128},"DDNOTIFY_CLOSESURFACE":{"comment":"\/\/ dwParam1 = hSurface","exp":"0x0100","file":"ddkmapi.h","line":493,"type":"Integer","value":256},"DDNOTIFY_CLOSEVIDEOPORT":{"comment":"\/\/ dwParam1 = hVideoPort","exp":"0x0200","file":"ddkmapi.h","line":494,"type":"Integer","value":512},"DDNOTIFY_DISPLAY_VSYNC":{"comment":"\/\/ dwParam1 = hDirectDraw","exp":"0x0001","file":"ddkmapi.h","line":485,"type":"Integer","value":1},"DDNOTIFY_POSTDOSBOX":{"comment":"\/\/ dwParam1 = hDirectDraw","exp":"0x0040","file":"ddkmapi.h","line":491,"type":"Integer","value":64},"DDNOTIFY_POSTRESCHANGE":{"comment":"\/\/ dwParam1 = hDirectDraw","exp":"0x0010","file":"ddkmapi.h","line":489,"type":"Integer","value":16},"DDNOTIFY_PREDOSBOX":{"comment":"\/\/ dwParam1 = hDirectDraw","exp":"0x0020","file":"ddkmapi.h","line":490,"type":"Integer","value":32},"DDNOTIFY_PRERESCHANGE":{"comment":"\/\/ dwParam1 = hDirectDraw","exp":"0x0008","file":"ddkmapi.h","line":488,"type":"Integer","value":8},"DDNOTIFY_VP_LINE":{"comment":"\/\/ dwParam1 = hVideoPort","exp":"0x0004","file":"ddkmapi.h","line":487,"type":"Integer","value":4},"DDNOTIFY_VP_VSYNC":{"comment":"\/\/ dwParam1 = hVideoPort","exp":"0x0002","file":"ddkmapi.h","line":486,"type":"Integer","value":2},"DDOVER_ANYALPHA":{"comment":"","exp":"(DDOVER_ALPHASRCSURFACEOVERRIDE | DDOVER_ALPHASRCCONSTOVERRIDE | DDOVER_ALPHASRC | DDOVER_ALPHADESTSURFACEOVERRIDE | DDOVER_ALPHADESTCONSTOVERRIDE | DDOVER_ALPHADEST)","file":"ddrawi.h","line":278,"type":"Integer","value":363},"DDOVER_AUTOFLIP":{"comment":"","exp":"0x00100000l","file":"dxmini.h","line":86,"type":"Integer","value":1048576},"DDOVER_BOB":{"comment":"","exp":"0x00200000l","file":"dxmini.h","line":87,"type":"Integer","value":2097152},"DDOVER_INTERLEAVED":{"comment":"","exp":"0x00800000l","file":"dxmini.h","line":89,"type":"Integer","value":8388608},"DDOVER_OVERRIDEBOBWEAVE":{"comment":"","exp":"0x00400000l","file":"dxmini.h","line":88,"type":"Integer","value":4194304},"DDPALETTECALLBACKSSIZE":{"comment":"","exp":"sizeof( DDHAL_DDPALETTECALLBACKS )","file":"ddrawi.h","line":748,"type":"Unknown","value":"sizeof( DDHAL_DDPALETTECALLBACKS )"},"DDPF_D3DFORMAT":{"comment":"","exp":"0x00200000l","file":"ddrawi.h","line":151,"type":"Integer","value":2097152},"DDPF_NOVEL_TEXTURE_FORMAT":{"comment":"","exp":"0x00100000l","file":"ddrawi.h","line":144,"type":"Integer","value":1048576},"DDRAWICLIP_INMASTERSPRITELIST":{"comment":"\/\/ clipper is referenced in master sprite list","exp":"0x00000004l","file":"ddrawi.h","line":1260,"type":"Integer","value":4},"DDRAWICLIP_ISINITIALIZED":{"comment":"","exp":"0x00000002l","file":"ddrawi.h","line":1259,"type":"Integer","value":2},"DDRAWICLIP_WATCHWINDOW":{"comment":"","exp":"0x00000001l","file":"ddrawi.h","line":1258,"type":"Integer","value":1},"DDRAWILCL_ACTIVENO":{"comment":"","exp":"0x00000010l","file":"ddrawi.h","line":1873,"type":"Integer","value":16},"DDRAWILCL_ACTIVEYES":{"comment":"","exp":"0x00000008l","file":"ddrawi.h","line":1872,"type":"Integer","value":8},"DDRAWILCL_ALLOWMODEX":{"comment":"","exp":"0x00000040l","file":"ddrawi.h","line":1875,"type":"Integer","value":64},"DDRAWILCL_ATTEMPTEDD3DCONTEXT":{"comment":"\/\/ PRIVATE: Marks if this ddraw local has attempted to create a d3d context","exp":"0x00040000l","file":"ddrawi.h","line":1887,"type":"Integer","value":262144},"DDRAWILCL_CREATEDWINDOW":{"comment":"","exp":"0x00000200l","file":"ddrawi.h","line":1878,"type":"Integer","value":512},"DDRAWILCL_CURSORCLIPPED":{"comment":"","exp":"0x00001000l","file":"ddrawi.h","line":1881,"type":"Integer","value":4096},"DDRAWILCL_DIRECTDRAW7":{"comment":"\/\/ PRIVATE: Marks if this is a IDirectDraw7 object","exp":"0x00020000l","file":"ddrawi.h","line":1886,"type":"Integer","value":131072},"DDRAWILCL_DIRECTDRAW8":{"comment":"\/\/ PRIVATE: Marks if this is a IDirectDraw8 object","exp":"0x00200000l","file":"ddrawi.h","line":1890,"type":"Integer","value":2097152},"DDRAWILCL_DIRTYDC":{"comment":"\/\/ Set on ChangeDisplaySettings, cleared when device DC is reinited","exp":"0x00000400l","file":"ddrawi.h","line":1879,"type":"Integer","value":1024},"DDRAWILCL_DISABLEINACTIVATE":{"comment":"","exp":"0x00000800l","file":"ddrawi.h","line":1880,"type":"Integer","value":2048},"DDRAWILCL_DX8DRIVER":{"comment":"\/\/ PRIVATE: Set if this drvier can handle lightweight surfaces","exp":"0x00100000l","file":"ddrawi.h","line":1889,"type":"Integer","value":1048576},"DDRAWILCL_EXPLICITMONITOR":{"comment":"\/\/ device was chosen explicitly i.e. not DDrawCreate(NULL)","exp":"0x00002000l","file":"ddrawi.h","line":1882,"type":"Integer","value":8192},"DDRAWILCL_FPUPRESERVE":{"comment":"\/\/ D3D needs to switch to single prec\/exceptions disabled each time","exp":"0x00080000l","file":"ddrawi.h","line":1888,"type":"Integer","value":524288},"DDRAWILCL_FPUSETUP":{"comment":"\/\/ D3D does not need to switch to single prec\/exceptions disabled each time","exp":"0x00008000l","file":"ddrawi.h","line":1884,"type":"Integer","value":32768},"DDRAWILCL_HASEXCLUSIVEMODE":{"comment":"","exp":"0x00000001l","file":"ddrawi.h","line":1869,"type":"Integer","value":1},"DDRAWILCL_HOOKEDHWND":{"comment":"","exp":"0x00000020l","file":"ddrawi.h","line":1874,"type":"Integer","value":32},"DDRAWILCL_ISFULLSCREEN":{"comment":"","exp":"0x00000002l","file":"ddrawi.h","line":1870,"type":"Integer","value":2},"DDRAWILCL_MODEHASBEENCHANGED":{"comment":"","exp":"0x00000100l","file":"ddrawi.h","line":1877,"type":"Integer","value":256},"DDRAWILCL_MULTITHREADED":{"comment":"\/\/ App threaten to be multithreaded","exp":"0x00004000l","file":"ddrawi.h","line":1883,"type":"Integer","value":16384},"DDRAWILCL_POWEREDDOWN":{"comment":"\/\/ Private: indicates that screen saver is powered down","exp":"0x00010000l","file":"ddrawi.h","line":1885,"type":"Integer","value":65536},"DDRAWILCL_SETCOOPCALLED":{"comment":"","exp":"0x00000004l","file":"ddrawi.h","line":1871,"type":"Integer","value":4},"DDRAWILCL_V1SCLBEHAVIOUR":{"comment":"","exp":"0x00000080l","file":"ddrawi.h","line":1876,"type":"Integer","value":128},"DDRAWIPAL_16":{"comment":"\/\/ 16 entry palette","exp":"0x00000002l","file":"ddrawi.h","line":1199,"type":"Integer","value":2},"DDRAWIPAL_2":{"comment":"\/\/ 2 entry palette","exp":"0x00000800l","file":"ddrawi.h","line":1209,"type":"Integer","value":2048},"DDRAWIPAL_256":{"comment":"\/\/ 256 entry palette","exp":"0x00000001l","file":"ddrawi.h","line":1198,"type":"Integer","value":1},"DDRAWIPAL_4":{"comment":"\/\/ 4 entry palette","exp":"0x00000400l","file":"ddrawi.h","line":1208,"type":"Integer","value":1024},"DDRAWIPAL_ALLOW256":{"comment":"\/\/ can fully update palette","exp":"0x00000200l","file":"ddrawi.h","line":1207,"type":"Integer","value":512},"DDRAWIPAL_ALPHA":{"comment":"\/\/ palette entries contain alpha","exp":"0x00002000l","file":"ddrawi.h","line":1211,"type":"Integer","value":8192},"DDRAWIPAL_DIRTY":{"comment":"\/\/ gdi palette out 'o sync","exp":"0x00000100l","file":"ddrawi.h","line":1206,"type":"Integer","value":256},"DDRAWIPAL_EXCLUSIVE":{"comment":"\/\/ palette being used in exclusive mode","exp":"0x00000040l","file":"ddrawi.h","line":1204,"type":"Integer","value":64},"DDRAWIPAL_GDI":{"comment":"\/\/ palette allocated through GDI","exp":"0x00000004l","file":"ddrawi.h","line":1200,"type":"Integer","value":4},"DDRAWIPAL_INHEL":{"comment":"\/\/ palette is done in the hel","exp":"0x00000080l","file":"ddrawi.h","line":1205,"type":"Integer","value":128},"DDRAWIPAL_STORED_16":{"comment":"\/\/ palette stored as 16bpp\/entry","exp":"0x00000010l","file":"ddrawi.h","line":1202,"type":"Integer","value":16},"DDRAWIPAL_STORED_24":{"comment":"\/\/ palette stored as 24bpp\/entry","exp":"0x00000020l","file":"ddrawi.h","line":1203,"type":"Integer","value":32},"DDRAWIPAL_STORED_8":{"comment":"\/\/ palette stored as 8bpp\/entry","exp":"0x00000008l","file":"ddrawi.h","line":1201,"type":"Integer","value":8},"DDRAWIPAL_STORED_8INDEX":{"comment":"\/\/ palette stored as 8-bit index into dst palette","exp":"0x00001000l","file":"ddrawi.h","line":1210,"type":"Integer","value":4096},"DDRAWISURFGBL_DDHELDONTFREE":{"comment":"\/\/ PRIVATE: indicates that the surace memory should not be freed by the HEL","exp":"0x00100000L","file":"ddrawi.h","line":1563,"type":"Integer","value":1048576},"DDRAWISURFGBL_DX8SURFACE":{"comment":"\/\/ PRIVATE: indicates that the surace was created using DX8","exp":"0x00080000L","file":"ddrawi.h","line":1562,"type":"Integer","value":524288},"DDRAWISURFGBL_FASTLOCKHELD":{"comment":"\/\/ PRIVATE: indicates that InternLock took the fast path","exp":"0x00008000L","file":"ddrawi.h","line":1560,"type":"Integer","value":32768},"DDRAWISURFGBL_HARDWAREOPDEST":{"comment":"\/\/ This surface was dest for an asynchronous hardware operation","exp":"0x00000400L","file":"ddrawi.h","line":1554,"type":"Integer","value":1024},"DDRAWISURFGBL_HARDWAREOPSOURCE":{"comment":"\/\/ This surface was the source for an asynchronous hardware operation","exp":"0x00000200L","file":"ddrawi.h","line":1553,"type":"Integer","value":512},"DDRAWISURFGBL_HARDWAREOPSTARTED":{"comment":"","exp":"(DDRAWISURFGBL_HARDWAREOPSOURCE|DDRAWISURFGBL_HARDWAREOPDEST)","file":"ddrawi.h","line":1555,"type":"Integer","value":1536},"DDRAWISURFGBL_IMPLICITHANDLE":{"comment":"\/\/ This dwKernelHandle was created implicitly","exp":"0x00000080L","file":"ddrawi.h","line":1551,"type":"Integer","value":128},"DDRAWISURFGBL_ISCLIENTMEM":{"comment":"\/\/ PRIVATE: the memory pointer to by fpVidMem was allocated by the client","exp":"0x00000100L","file":"ddrawi.h","line":1552,"type":"Integer","value":256},"DDRAWISURFGBL_ISGDISURFACE":{"comment":"\/\/ This surface represents what GDI thinks is front buffer","exp":"0x00000004L","file":"ddrawi.h","line":1546,"type":"Integer","value":4},"DDRAWISURFGBL_LATEALLOCATELINEAR":{"comment":"\/\/ Optimized surface was allocated as a formless chunk. lPitch invalid, dwLinearSize valid.","exp":"0x00002000L","file":"ddrawi.h","line":1558,"type":"Integer","value":8192},"DDRAWISURFGBL_LOCKBROKEN":{"comment":"\/\/ PRIVATE: a lock of the entire surface was broken by an invalidate","exp":"0x00000040L","file":"ddrawi.h","line":1550,"type":"Integer","value":64},"DDRAWISURFGBL_LOCKNOTHOLDINGWIN16LOCK":{"comment":"\/\/ PRIVATE: a vram lock of the entire surface is not holding the Win16 lock","exp":"0x00000010L","file":"ddrawi.h","line":1548,"type":"Integer","value":16},"DDRAWISURFGBL_LOCKVRAMSTYLE":{"comment":"\/\/ PRIVATE: entire surface was locked with VRAM style lock","exp":"0x00000020L","file":"ddrawi.h","line":1549,"type":"Integer","value":32},"DDRAWISURFGBL_MEMFREE":{"comment":"\/\/ video memory has been freed","exp":"0x00000001L","file":"ddrawi.h","line":1544,"type":"Integer","value":1},"DDRAWISURFGBL_NOTIFYWHENUNLOCKED":{"comment":"\/\/ PRIVATE: indicates that the this surface help a NOSYSLOCK lock when a mode change occured","exp":"0x00200000L","file":"ddrawi.h","line":1564,"type":"Integer","value":2097152},"DDRAWISURFGBL_READONLYLOCKHELD":{"comment":"\/\/ PRIVATE: indicates that the application indicated read-only lock","exp":"0x00010000L","file":"ddrawi.h","line":1561,"type":"Integer","value":65536},"DDRAWISURFGBL_RESERVED0":{"comment":"\/\/ Reserved flag","exp":"0x80000000L","file":"ddrawi.h","line":1571,"type":"Integer","value":2147483648},"DDRAWISURFGBL_SOFTWAREAUTOFLIP":{"comment":"\/\/ This surface is autoflipped using software","exp":"0x00000008L","file":"ddrawi.h","line":1547,"type":"Integer","value":8},"DDRAWISURFGBL_SYSMEMEXECUTEBUFFER":{"comment":"\/\/ Driver sets this flag to tell ddraw that the surface was allocated in system memory","exp":"0x00004000L","file":"ddrawi.h","line":1559,"type":"Integer","value":16384},"DDRAWISURFGBL_SYSMEMREQUESTED":{"comment":"\/\/ surface is in system memory at request of user","exp":"0x00000002L","file":"ddrawi.h","line":1545,"type":"Integer","value":2},"DDRAWISURFGBL_VPORTDATA":{"comment":"\/\/ This surface received data from the video port","exp":"0x00001000L","file":"ddrawi.h","line":1557,"type":"Integer","value":4096},"DDRAWISURFGBL_VPORTINTERLEAVED":{"comment":"\/\/ This surface contains interleaved video port data","exp":"0x00000800L","file":"ddrawi.h","line":1556,"type":"Integer","value":2048},"DDRAWISURF_ATTACHED":{"comment":"\/\/ surface is attached to another","exp":"0x00000001L","file":"ddrawi.h","line":1573,"type":"Integer","value":1},"DDRAWISURF_ATTACHED_FROM":{"comment":"\/\/ surface has others attached to it","exp":"0x00000008L","file":"ddrawi.h","line":1576,"type":"Integer","value":8},"DDRAWISURF_BACKBUFFER":{"comment":"\/\/ surface was originally backbuffer","exp":"0x08000000L","file":"ddrawi.h","line":1600,"type":"Integer","value":134217728},"DDRAWISURF_DATAISALIASED":{"comment":"\/\/ used for thunking","exp":"0x00000040L","file":"ddrawi.h","line":1579,"type":"Integer","value":64},"DDRAWISURF_DCIBUSY":{"comment":"\/\/ HEL has turned off BUSY so DCI would work","exp":"0x20000000L","file":"ddrawi.h","line":1602,"type":"Integer","value":536870912},"DDRAWISURF_DCILOCK":{"comment":"\/\/ Surface was locked using DCIBeginAccess","exp":"0x80000000L","file":"ddrawi.h","line":1608,"type":"Integer","value":2147483648},"DDRAWISURF_DRIVERMANAGED":{"comment":"\/\/ Surface is a driver managed texture (D3D)","exp":"0x40000000L","file":"ddrawi.h","line":1607,"type":"Integer","value":1073741824},"DDRAWISURF_FRONTBUFFER":{"comment":"\/\/ surface was originally a front buffer","exp":"0x04000000L","file":"ddrawi.h","line":1599,"type":"Integer","value":67108864},"DDRAWISURF_GETDCNULL":{"comment":"\/\/ getdc could not lock and so returned GetDC(NULL)","exp":"0x40000000L","file":"ddrawi.h","line":1603,"type":"Integer","value":1073741824},"DDRAWISURF_HASCKEYDESTBLT":{"comment":"\/\/ surface has CKDestBlt","exp":"0x00000200L","file":"ddrawi.h","line":1582,"type":"Integer","value":512},"DDRAWISURF_HASCKEYDESTOVERLAY":{"comment":"\/\/ surface has CKDestOverlay","exp":"0x00000100L","file":"ddrawi.h","line":1581,"type":"Integer","value":256},"DDRAWISURF_HASCKEYSRCBLT":{"comment":"\/\/ surface has CKSrcBlt","exp":"0x00000800L","file":"ddrawi.h","line":1584,"type":"Integer","value":2048},"DDRAWISURF_HASCKEYSRCOVERLAY":{"comment":"\/\/ surface has CKSrcOverlay","exp":"0x00000400L","file":"ddrawi.h","line":1583,"type":"Integer","value":1024},"DDRAWISURF_HASDC":{"comment":"\/\/ has a DC","exp":"0x00000080L","file":"ddrawi.h","line":1580,"type":"Integer","value":128},"DDRAWISURF_HASOVERLAYDATA":{"comment":"\/\/ surface structure has overlay data","exp":"0x00004000L","file":"ddrawi.h","line":1587,"type":"Integer","value":16384},"DDRAWISURF_HASPIXELFORMAT":{"comment":"\/\/ surface structure has pixel format data","exp":"0x00002000L","file":"ddrawi.h","line":1586,"type":"Integer","value":8192},"DDRAWISURF_HELCB":{"comment":"\/\/ surface is the ddhel cb. must call hel for lock\/blt.","exp":"0x02000000L","file":"ddrawi.h","line":1598,"type":"Integer","value":33554432},"DDRAWISURF_HW_CKEYDESTBLT":{"comment":"\/\/ surface expects to process colorkey in hardware","exp":"0x00200000L","file":"ddrawi.h","line":1594,"type":"Integer","value":2097152},"DDRAWISURF_HW_CKEYDESTOVERLAY":{"comment":"\/\/ surface expects to process colorkey in hardware","exp":"0x00100000L","file":"ddrawi.h","line":1593,"type":"Integer","value":1048576},"DDRAWISURF_HW_CKEYSRCBLT":{"comment":"\/\/ surface expects to process colorkey in hardware","exp":"0x00800000L","file":"ddrawi.h","line":1596,"type":"Integer","value":8388608},"DDRAWISURF_HW_CKEYSRCOVERLAY":{"comment":"\/\/ surface expects to process colorkey in hardware","exp":"0x00400000L","file":"ddrawi.h","line":1595,"type":"Integer","value":4194304},"DDRAWISURF_IMPLICITCREATE":{"comment":"\/\/ surface implicitly created","exp":"0x00000002L","file":"ddrawi.h","line":1574,"type":"Integer","value":2},"DDRAWISURF_IMPLICITROOT":{"comment":"\/\/ surface root of implicit creation","exp":"0x00000010L","file":"ddrawi.h","line":1577,"type":"Integer","value":16},"DDRAWISURF_INMASTERSPRITELIST":{"comment":"\/\/ surface is referenced in master sprite list","exp":"0x01000000l","file":"ddrawi.h","line":1597,"type":"Integer","value":16777216},"DDRAWISURF_INVALID":{"comment":"\/\/ surface has been invalidated by mode set","exp":"0x10000000L","file":"ddrawi.h","line":1601,"type":"Integer","value":268435456},"DDRAWISURF_ISFREE":{"comment":"\/\/ surface already freed (temp flag)","exp":"0x00000004L","file":"ddrawi.h","line":1575,"type":"Integer","value":4},"DDRAWISURF_LOCKEXCLUDEDCURSOR":{"comment":"\/\/ surface was locked and excluded cursor","exp":"0x00001000L","file":"ddrawi.h","line":1585,"type":"Integer","value":4096},"DDRAWISURF_PARTOFPRIMARYCHAIN":{"comment":"\/\/ surface is part of primary chain","exp":"0x00000020L","file":"ddrawi.h","line":1578,"type":"Integer","value":32},"DDRAWISURF_SETGAMMA":{"comment":"\/\/ gamma ramp for this surface is active","exp":"0x00008000L","file":"ddrawi.h","line":1588,"type":"Integer","value":32768},"DDRAWISURF_STEREOSURFACELEFT":{"comment":"\/\/ surface is left of stereo pair","exp":"0x20000000L","file":"ddrawi.h","line":1606,"type":"Integer","value":536870912},"DDRAWISURF_SW_CKEYDESTBLT":{"comment":"\/\/ surface expects to process colorkey in software","exp":"0x00020000L","file":"ddrawi.h","line":1590,"type":"Integer","value":131072},"DDRAWISURF_SW_CKEYDESTOVERLAY":{"comment":"\/\/ surface expects to process colorkey in software","exp":"0x00010000L","file":"ddrawi.h","line":1589,"type":"Integer","value":65536},"DDRAWISURF_SW_CKEYSRCBLT":{"comment":"\/\/ surface expects to process colorkey in software","exp":"0x00080000L","file":"ddrawi.h","line":1592,"type":"Integer","value":524288},"DDRAWISURF_SW_CKEYSRCOVERLAY":{"comment":"\/\/ surface expects to process colorkey in software","exp":"0x00040000L","file":"ddrawi.h","line":1591,"type":"Integer","value":262144},"DDRAWIVPORT_COLORKEYANDINTERP":{"comment":"\/\/ Overlay cannot bob and colorkey at same time","exp":"0x00000004","file":"ddrawi.h","line":1964,"type":"Integer","value":4},"DDRAWIVPORT_NOKERNELHANDLES":{"comment":"\/\/ Unable to allocate kernel resources","exp":"0x00000008","file":"ddrawi.h","line":1965,"type":"Integer","value":8},"DDRAWIVPORT_ON":{"comment":"\/\/ Video port is pumping data","exp":"0x00000001","file":"ddrawi.h","line":1962,"type":"Integer","value":1},"DDRAWIVPORT_SOFTWARE_AUTOFLIP":{"comment":"\/\/ Video port cannot use hardware autoflip","exp":"0x00000002","file":"ddrawi.h","line":1963,"type":"Integer","value":2},"DDRAWIVPORT_SOFTWARE_BOB":{"comment":"\/\/ All bobbing must be performed in software","exp":"0x00000010","file":"ddrawi.h","line":1966,"type":"Integer","value":16},"DDRAWIVPORT_VBION":{"comment":"\/\/ Video is on for the VBI region","exp":"0x00000020","file":"ddrawi.h","line":1967,"type":"Integer","value":32},"DDRAWIVPORT_VIDEOON":{"comment":"\/\/ Video is on for the video region","exp":"0x00000040","file":"ddrawi.h","line":1968,"type":"Integer","value":64},"DDRAWI_ATTACHEDTODESKTOP":{"comment":"\/\/ Device is attached to the desktop","exp":"0x01000000l","file":"ddrawi.h","line":1915,"type":"Integer","value":16777216},"DDRAWI_BADPDEV":{"comment":"\/\/ PRIVATE: Indiactes that we should not re-use this PDEV","exp":"0x40000000l","file":"ddrawi.h","line":1921,"type":"Integer","value":1073741824},"DDRAWI_CHANGINGMODE":{"comment":"\/\/ Currently in the middle of a mode change","exp":"0x00400000l","file":"ddrawi.h","line":1913,"type":"Integer","value":4194304},"DDRAWI_DDRAWDATANOTFETCHED":{"comment":"\/\/ PRIVATE: Marks mode-change data fetched (NT)","exp":"0x04000000l","file":"ddrawi.h","line":1917,"type":"Integer","value":67108864},"DDRAWI_DISPLAYDRV":{"comment":"\/\/ driver is display driver","exp":"0x00000020l","file":"ddrawi.h","line":1896,"type":"Integer","value":32},"DDRAWI_DRIVERINFO2":{"comment":"\/\/ PRIVATE: Driver supports GetDriverInfo2","exp":"0x20000000l","file":"ddrawi.h","line":1920,"type":"Integer","value":536870912},"DDRAWI_EMULATIONINITIALIZED":{"comment":"\/\/ emulation is initialized","exp":"0x00004000l","file":"ddrawi.h","line":1905,"type":"Integer","value":16384},"DDRAWI_EXTENDEDALIGNMENT":{"comment":"\/\/ At least one heap has extended alignment. Ignore alignment in VIDMEMINFO","exp":"0x00200000l","file":"ddrawi.h","line":1912,"type":"Integer","value":2097152},"DDRAWI_FLIPPEDTOGDI":{"comment":"\/\/ driver has been flipped to show GDI surface","exp":"0x00020000l","file":"ddrawi.h","line":1908,"type":"Integer","value":131072},"DDRAWI_FULLSCREEN":{"comment":"\/\/ driver in fullscreen mode","exp":"0x00000040l","file":"ddrawi.h","line":1897,"type":"Integer","value":64},"DDRAWI_GDIDRV":{"comment":"\/\/ Driver is a GDI driver","exp":"0x00800000l","file":"ddrawi.h","line":1914,"type":"Integer","value":8388608},"DDRAWI_GETCOLOR":{"comment":"","exp":"0x0001","file":"ddrawi.h","line":2635,"type":"Integer","value":1},"DDRAWI_HASCKEYDESTOVERLAY":{"comment":"\/\/ driver has CKDestOverlay","exp":"0x00000800l","file":"ddrawi.h","line":1902,"type":"Integer","value":2048},"DDRAWI_HASCKEYSRCOVERLAY":{"comment":"\/\/ driver has CKSrcOverlay","exp":"0x00001000l","file":"ddrawi.h","line":1903,"type":"Integer","value":4096},"DDRAWI_HASGDIPALETTE":{"comment":"\/\/ GDI palette exists on primary surface","exp":"0x00002000l","file":"ddrawi.h","line":1904,"type":"Integer","value":8192},"DDRAWI_HASGDIPALETTE_EXCLUSIVE":{"comment":"\/\/ exclusive mode palette","exp":"0x00008000l","file":"ddrawi.h","line":1906,"type":"Integer","value":32768},"DDRAWI_MODECHANGED":{"comment":"\/\/ display mode has been changed","exp":"0x00000080l","file":"ddrawi.h","line":1898,"type":"Integer","value":128},"DDRAWI_MODEX":{"comment":"\/\/ driver is using modex","exp":"0x00000010l","file":"ddrawi.h","line":1895,"type":"Integer","value":16},"DDRAWI_MODEXILLEGAL":{"comment":"\/\/ modex is not supported by this hardware","exp":"0x00010000l","file":"ddrawi.h","line":1907,"type":"Integer","value":65536},"DDRAWI_NEEDSWIN16FORVRAMLOCK":{"comment":"\/\/ PRIVATE: Win16 lock must be taken when locking a VRAM surface","exp":"0x00040000l","file":"ddrawi.h","line":1909,"type":"Integer","value":262144},"DDRAWI_NOEMULATION":{"comment":"\/\/ no emulation at all","exp":"0x00000400l","file":"ddrawi.h","line":1901,"type":"Integer","value":1024},"DDRAWI_NOHARDWARE":{"comment":"\/\/ no driver hardware at all","exp":"0x00000100l","file":"ddrawi.h","line":1899,"type":"Integer","value":256},"DDRAWI_PALETTEINIT":{"comment":"\/\/ GDI palette stuff has been initalized","exp":"0x00000200l","file":"ddrawi.h","line":1900,"type":"Integer","value":512},"DDRAWI_PDEVICEVRAMBITCLEARED":{"comment":"\/\/ PRIVATE: the PDEVICE's VRAM bit was cleared by a lock","exp":"0x00080000l","file":"ddrawi.h","line":1910,"type":"Integer","value":524288},"DDRAWI_SECONDARYDRIVERLOADED":{"comment":"\/\/ PRIVATE: Marks if a secndary PVR-style HAL was loaded","exp":"0x08000000l","file":"ddrawi.h","line":1918,"type":"Integer","value":134217728},"DDRAWI_SETCOLOR":{"comment":"","exp":"0x0002","file":"ddrawi.h","line":2636,"type":"Integer","value":2},"DDRAWI_STANDARDVGA":{"comment":"\/\/ Device is using standard VGA mode (DDRAWI_MODEX will be set)","exp":"0x00100000l","file":"ddrawi.h","line":1911,"type":"Integer","value":1048576},"DDRAWI_TESTINGMODES":{"comment":"\/\/ PRIVATE: A mode test in is progress","exp":"0x10000000l","file":"ddrawi.h","line":1919,"type":"Integer","value":268435456},"DDRAWI_UMODELOADED":{"comment":"\/\/ User mode driver dll is loaded","exp":"0x02000000l","file":"ddrawi.h","line":1916,"type":"Integer","value":33554432},"DDRAWI_VIRTUALDESKTOP":{"comment":"\/\/ driver is really a multi-monitor virtual desktop","exp":"0x00000008l","file":"ddrawi.h","line":1894,"type":"Integer","value":8},"DDRAWI_VPORTGETCOLOR":{"comment":"","exp":"0x0001","file":"ddrawi.h","line":2613,"type":"Integer","value":1},"DDRAWI_VPORTSETCOLOR":{"comment":"","exp":"0x0002","file":"ddrawi.h","line":2614,"type":"Integer","value":2},"DDRAWI_VPORTSTART":{"comment":"","exp":"0x0001","file":"ddrawi.h","line":2570,"type":"Integer","value":1},"DDRAWI_VPORTSTOP":{"comment":"","exp":"0x0002","file":"ddrawi.h","line":2571,"type":"Integer","value":2},"DDRAWI_VPORTUPDATE":{"comment":"","exp":"0x0003","file":"ddrawi.h","line":2572,"type":"Integer","value":3},"DDRAWI_xxxxxxxxx1":{"comment":"\/\/ unused","exp":"0x00000001l","file":"ddrawi.h","line":1892,"type":"Integer","value":1},"DDRAWI_xxxxxxxxx2":{"comment":"\/\/ unused","exp":"0x00000002l","file":"ddrawi.h","line":1893,"type":"Integer","value":2},"DDRAW_DLL_UNLOADED":{"comment":"","exp":"(LPVOID) 1","file":"ddrawi.h","line":383,"type":"Unknown","value":"(LPVOID) 1"},"DDSCAPS2_COMMANDBUFFER":{"comment":"","exp":"DDSCAPS2_RESERVED2","file":"ddrawi.h","line":446,"type":"Integer","value":64},"DDSCAPS2_INDEXBUFFER":{"comment":"","exp":"DDSCAPS2_RESERVED3","file":"ddrawi.h","line":452,"type":"Integer","value":67108864},"DDSCAPS2_VERTEXBUFFER":{"comment":"","exp":"DDSCAPS2_RESERVED1","file":"ddrawi.h","line":440,"type":"Integer","value":32},"DDSCAPS3_VIDEO":{"comment":"","exp":"DDSCAPS3_RESERVED2","file":"ddrawi.h","line":457,"type":"Integer","value":512},"DDSCAPS_COMMANDBUFFER":{"comment":"","exp":"DDSCAPS_RESERVED3","file":"ddrawint.h","line":99,"type":"Integer","value":1024},"DDSCAPS_EXECUTEBUFFER":{"comment":"","exp":"DDSCAPS_RESERVED2","file":"ddrawi.h","line":435,"type":"Integer","value":8388608},"DDSCAPS_VERTEXBUFFER":{"comment":"","exp":"DDSCAPS_RESERVED4","file":"ddrawint.h","line":100,"type":"Unknown","value":"DDSCAPS_RESERVED4"},"DDSKIP_ENABLENEXT":{"comment":"","exp":"2","file":"dxmini.h","line":194,"type":"Integer","value":2},"DDSKIP_SKIPNEXT":{"comment":"","exp":"1","file":"dxmini.h","line":193,"type":"Integer","value":1},"DDSTATE_BOB":{"comment":"","exp":"0x0001","file":"ddkmapi.h","line":465,"type":"Integer","value":1},"DDSTATE_EXPLICITLY_SET":{"comment":"","exp":"0x0004","file":"ddkmapi.h","line":467,"type":"Integer","value":4},"DDSTATE_SKIPEVENFIELDS":{"comment":"","exp":"0x0010","file":"ddkmapi.h","line":469,"type":"Integer","value":16},"DDSTATE_SOFTWARE_AUTOFLIP":{"comment":"","exp":"0x0008","file":"ddkmapi.h","line":468,"type":"Integer","value":8},"DDSTATE_WEAVE":{"comment":"","exp":"0x0002","file":"ddkmapi.h","line":466,"type":"Integer","value":2},"DDSURFACECALLBACKSSIZE":{"comment":"","exp":"sizeof( DDHAL_DDSURFACECALLBACKS )","file":"ddrawi.h","line":792,"type":"Unknown","value":"sizeof( DDHAL_DDSURFACECALLBACKS )"},"DDTRANSFER_CANCEL":{"comment":"","exp":"0x00000080","file":"dxmini.h","line":287,"type":"Integer","value":128},"DDTRANSFER_HALFLINES":{"comment":"","exp":"0x00000100","file":"dxmini.h","line":288,"type":"Integer","value":256},"DDTRANSFER_INVERT":{"comment":"","exp":"0x00000004","file":"dxmini.h","line":286,"type":"Integer","value":4},"DDTRANSFER_NONLOCALVIDMEM":{"comment":"","exp":"0x00000002","file":"dxmini.h","line":285,"type":"Integer","value":2},"DDTRANSFER_SYSTEMMEMORY":{"comment":"","exp":"0x00000001","file":"dxmini.h","line":284,"type":"Integer","value":1},"DDUNSUPPORTEDMODE":{"comment":"","exp":"((DWORD) -1)","file":"ddrawi.h","line":96,"type":"Integer","value":-1},"DDVERSIONINFO":{"comment":"\/\/ tells driver the ddraw version","exp":"13","file":"ddrawi.h","line":357,"type":"Integer","value":13},"DDVIDEOPORTCALLBACKSSIZE":{"comment":"","exp":"sizeof( DDHAL_DDVIDEOPORTCALLBACKS )","file":"ddrawi.h","line":944,"type":"Unknown","value":"sizeof( DDHAL_DDVIDEOPORTCALLBACKS )"},"DDVIDEOPORTDATA":{"comment":"","exp":"","file":"dxmini.h","line":125,"type":"Struct","value":"typedef struct DDVIDEOPORTDATA {\\r\\n    DWORD       dwVideoPortId;          \/\/ ID of video port (0 - MaxVideoPorts-1)\\r\\n    DWORD       dwVPFlags;              \/\/ Video port DDVP_ option flags\\r\\n    DWORD       dwOriginOffset;         \/\/ Start address relative to surface\\r\\n    DWORD       dwHeight;               \/\/ Height of total video region (per field)\\r\\n    DWORD       dwVBIHeight;            \/\/ Height of VBI region (per field)\\r\\n    ULONG       dwDriverReserved1;      \/\/ Reserved for the HAL\/Miniport\\r\\n    ULONG       dwDriverReserved2;      \/\/ Reserved for the HAL\/Miniport\\r\\n    ULONG       dwDriverReserved3;      \/\/ Reserved for the HAL\/Miniport\\r\\n} DDVIDEOPORTDATA, *LPDDVIDEOPORTDATA;"},"DDVPBCAPS_DESTINATION":{"comment":"","exp":"0x00000002l","file":"dvp.h","line":928,"type":"Integer","value":2},"DDVPBCAPS_SOURCE":{"comment":"","exp":"0x00000001l","file":"dvp.h","line":922,"type":"Integer","value":1},"DDVPB_OVERLAY":{"comment":"","exp":"0x00000002l","file":"dvp.h","line":906,"type":"Integer","value":2},"DDVPB_TYPE":{"comment":"","exp":"0x00000004l","file":"dvp.h","line":911,"type":"Integer","value":4},"DDVPB_VIDEOPORT":{"comment":"","exp":"0x00000001l","file":"dvp.h","line":901,"type":"Integer","value":1},"DDVPCAPS_AUTOFLIP":{"comment":"","exp":"0x00000001l","file":"dvp.h","line":493,"type":"Integer","value":1},"DDVPCAPS_COLORCONTROL":{"comment":"","exp":"0x00000400l","file":"dvp.h","line":551,"type":"Integer","value":1024},"DDVPCAPS_HARDWAREDEINTERLACE":{"comment":"","exp":"0x00004000l","file":"dvp.h","line":575,"type":"Integer","value":16384},"DDVPCAPS_INTERLACED":{"comment":"","exp":"0x00000002l","file":"dvp.h","line":498,"type":"Integer","value":2},"DDVPCAPS_NONINTERLACED":{"comment":"","exp":"0x00000004l","file":"dvp.h","line":503,"type":"Integer","value":4},"DDVPCAPS_OVERSAMPLEDVBI":{"comment":"","exp":"0x00000800l","file":"dvp.h","line":557,"type":"Integer","value":2048},"DDVPCAPS_READBACKFIELD":{"comment":"","exp":"0x00000008l","file":"dvp.h","line":509,"type":"Integer","value":8},"DDVPCAPS_READBACKLINE":{"comment":"","exp":"0x00000010l","file":"dvp.h","line":515,"type":"Integer","value":16},"DDVPCAPS_SHAREABLE":{"comment":"","exp":"0x00000020l","file":"dvp.h","line":523,"type":"Integer","value":32},"DDVPCAPS_SKIPEVENFIELDS":{"comment":"","exp":"0x00000040l","file":"dvp.h","line":528,"type":"Integer","value":64},"DDVPCAPS_SKIPODDFIELDS":{"comment":"","exp":"0x00000080l","file":"dvp.h","line":533,"type":"Integer","value":128},"DDVPCAPS_SYNCMASTER":{"comment":"","exp":"0x00000100l","file":"dvp.h","line":539,"type":"Integer","value":256},"DDVPCAPS_SYSTEMMEMORY":{"comment":"","exp":"0x00001000l","file":"dvp.h","line":562,"type":"Integer","value":4096},"DDVPCAPS_VBIANDVIDEOINDEPENDENT":{"comment":"","exp":"0x00002000l","file":"dvp.h","line":568,"type":"Integer","value":8192},"DDVPCAPS_VBISURFACE":{"comment":"","exp":"0x00000200l","file":"dvp.h","line":545,"type":"Integer","value":512},"DDVPCONNECT_DISCARDSVREFDATA":{"comment":"","exp":"0x00000008l","file":"dvp.h","line":456,"type":"Integer","value":8},"DDVPCONNECT_DOUBLECLOCK":{"comment":"","exp":"0x00000001l","file":"dvp.h","line":433,"type":"Integer","value":1},"DDVPCONNECT_HALFLINE":{"comment":"","exp":"0x00000010l","file":"dvp.h","line":464,"type":"Integer","value":16},"DDVPCONNECT_INTERLACED":{"comment":"","exp":"0x00000020l","file":"dvp.h","line":470,"type":"Integer","value":32},"DDVPCONNECT_INVERTPOLARITY":{"comment":"","exp":"0x00000004l","file":"dvp.h","line":450,"type":"Integer","value":4},"DDVPCONNECT_SHAREEVEN":{"comment":"","exp":"0x00000040l","file":"dvp.h","line":476,"type":"Integer","value":64},"DDVPCONNECT_SHAREODD":{"comment":"","exp":"0x00000080l","file":"dvp.h","line":482,"type":"Integer","value":128},"DDVPCONNECT_VACT":{"comment":"","exp":"0x00000002l","file":"dvp.h","line":441,"type":"Integer","value":2},"DDVPCREATE_VBIONLY":{"comment":"","exp":"0x00000001l","file":"dvp.h","line":939,"type":"Integer","value":1},"DDVPCREATE_VIDEOONLY":{"comment":"","exp":"0x00000002l","file":"dvp.h","line":945,"type":"Integer","value":2},"DDVPD_ALIGN":{"comment":"","exp":"0x00000040l","file":"dvp.h","line":318,"type":"Integer","value":64},"DDVPD_AUTOFLIP":{"comment":"","exp":"0x00000020l","file":"dvp.h","line":313,"type":"Integer","value":32},"DDVPD_CAPS":{"comment":"","exp":"0x00000008l","file":"dvp.h","line":303,"type":"Integer","value":8},"DDVPD_FILTERQUALITY":{"comment":"","exp":"0x00000100l","file":"dvp.h","line":328,"type":"Integer","value":256},"DDVPD_FX":{"comment":"","exp":"0x00000010l","file":"dvp.h","line":308,"type":"Integer","value":16},"DDVPD_HEIGHT":{"comment":"","exp":"0x00000002l","file":"dvp.h","line":293,"type":"Integer","value":2},"DDVPD_ID":{"comment":"","exp":"0x00000004l","file":"dvp.h","line":298,"type":"Integer","value":4},"DDVPD_PREFERREDAUTOFLIP":{"comment":"","exp":"0x00000080l","file":"dvp.h","line":323,"type":"Integer","value":128},"DDVPD_WIDTH":{"comment":"","exp":"0x00000001l","file":"dvp.h","line":288,"type":"Integer","value":1},"DDVPFLIP_VBI":{"comment":"","exp":"0x00000002l","file":"dvp.h","line":873,"type":"Integer","value":2},"DDVPFLIP_VIDEO":{"comment":"","exp":"0x00000001l","file":"dvp.h","line":868,"type":"Integer","value":1},"DDVPFORMAT_VBI":{"comment":"","exp":"0x00000002l","file":"dvp.h","line":818,"type":"Integer","value":2},"DDVPFORMAT_VIDEO":{"comment":"","exp":"0x00000001l","file":"dvp.h","line":813,"type":"Integer","value":1},"DDVPFX_CROPTOPDATA":{"comment":"","exp":"0x00000001l","file":"dvp.h","line":587,"type":"Integer","value":1},"DDVPFX_CROPX":{"comment":"","exp":"0x00000002l","file":"dvp.h","line":593,"type":"Integer","value":2},"DDVPFX_CROPY":{"comment":"","exp":"0x00000004l","file":"dvp.h","line":599,"type":"Integer","value":4},"DDVPFX_IGNOREVBIXCROP":{"comment":"","exp":"0x00040000l","file":"dvp.h","line":696,"type":"Integer","value":262144},"DDVPFX_INTERLEAVE":{"comment":"","exp":"0x00000008l","file":"dvp.h","line":604,"type":"Integer","value":8},"DDVPFX_MIRRORLEFTRIGHT":{"comment":"","exp":"0x00000010l","file":"dvp.h","line":610,"type":"Integer","value":16},"DDVPFX_MIRRORUPDOWN":{"comment":"","exp":"0x00000020l","file":"dvp.h","line":616,"type":"Integer","value":32},"DDVPFX_PRESHRINKX":{"comment":"","exp":"0x00000040l","file":"dvp.h","line":622,"type":"Integer","value":64},"DDVPFX_PRESHRINKXB":{"comment":"","exp":"0x00000100l","file":"dvp.h","line":634,"type":"Integer","value":256},"DDVPFX_PRESHRINKXS":{"comment":"","exp":"0x00000400l","file":"dvp.h","line":647,"type":"Integer","value":1024},"DDVPFX_PRESHRINKY":{"comment":"","exp":"0x00000080l","file":"dvp.h","line":628,"type":"Integer","value":128},"DDVPFX_PRESHRINKYB":{"comment":"","exp":"0x00000200l","file":"dvp.h","line":640,"type":"Integer","value":512},"DDVPFX_PRESHRINKYS":{"comment":"","exp":"0x00000800l","file":"dvp.h","line":654,"type":"Integer","value":2048},"DDVPFX_PRESTRETCHX":{"comment":"","exp":"0x00001000l","file":"dvp.h","line":660,"type":"Integer","value":4096},"DDVPFX_PRESTRETCHXN":{"comment":"","exp":"0x00004000l","file":"dvp.h","line":672,"type":"Integer","value":16384},"DDVPFX_PRESTRETCHY":{"comment":"","exp":"0x00002000l","file":"dvp.h","line":666,"type":"Integer","value":8192},"DDVPFX_PRESTRETCHYN":{"comment":"","exp":"0x00008000l","file":"dvp.h","line":678,"type":"Integer","value":32768},"DDVPFX_VBICONVERT":{"comment":"","exp":"0x00010000l","file":"dvp.h","line":684,"type":"Integer","value":65536},"DDVPFX_VBINOINTERLEAVE":{"comment":"","exp":"0x00080000l","file":"dvp.h","line":702,"type":"Integer","value":524288},"DDVPFX_VBINOSCALE":{"comment":"","exp":"0x00020000l","file":"dvp.h","line":690,"type":"Integer","value":131072},"DDVPSQ_NOSIGNAL":{"comment":"","exp":"0x00000001l","file":"dvp.h","line":884,"type":"Integer","value":1},"DDVPSQ_SIGNALOK":{"comment":"","exp":"0x00000002l","file":"dvp.h","line":889,"type":"Integer","value":2},"DDVPSTATUS_VBIONLY":{"comment":"","exp":"0x00000001l","file":"dvp.h","line":957,"type":"Integer","value":1},"DDVPSTATUS_VIDEOONLY":{"comment":"","exp":"0x00000002l","file":"dvp.h","line":963,"type":"Integer","value":2},"DDVPTARGET_VBI":{"comment":"","exp":"0x00000002l","file":"dvp.h","line":835,"type":"Integer","value":2},"DDVPTARGET_VIDEO":{"comment":"","exp":"0x00000001l","file":"dvp.h","line":830,"type":"Integer","value":1},"DDVPWAIT_BEGIN":{"comment":"","exp":"0x00000001l","file":"dvp.h","line":847,"type":"Integer","value":1},"DDVPWAIT_END":{"comment":"","exp":"0x00000002l","file":"dvp.h","line":852,"type":"Integer","value":2},"DDVPWAIT_LINE":{"comment":"","exp":"0x00000003l","file":"dvp.h","line":857,"type":"Integer","value":3},"DDVP_AUTOFLIP":{"comment":"","exp":"0x00000001l","file":"dvp.h","line":719,"type":"Integer","value":1},"DDVP_CONVERT":{"comment":"","exp":"0x00000002l","file":"dvp.h","line":724,"type":"Integer","value":2},"DDVP_CROP":{"comment":"","exp":"0x00000004l","file":"dvp.h","line":729,"type":"Integer","value":4},"DDVP_HARDWAREDEINTERLACE":{"comment":"","exp":"0x00008000l","file":"dvp.h","line":802,"type":"Integer","value":32768},"DDVP_IGNOREVBIXCROP":{"comment":"","exp":"0x00002000l","file":"dvp.h","line":790,"type":"Integer","value":8192},"DDVP_INTERLEAVE":{"comment":"","exp":"0x00000008l","file":"dvp.h","line":734,"type":"Integer","value":8},"DDVP_MIRRORLEFTRIGHT":{"comment":"","exp":"0x00000010l","file":"dvp.h","line":740,"type":"Integer","value":16},"DDVP_MIRRORUPDOWN":{"comment":"","exp":"0x00000020l","file":"dvp.h","line":746,"type":"Integer","value":32},"DDVP_OVERRIDEBOBWEAVE":{"comment":"","exp":"0x00001000l","file":"dvp.h","line":784,"type":"Integer","value":4096},"DDVP_PRESCALE":{"comment":"","exp":"0x00000040l","file":"dvp.h","line":751,"type":"Integer","value":64},"DDVP_SKIPEVENFIELDS":{"comment":"","exp":"0x00000080l","file":"dvp.h","line":756,"type":"Integer","value":128},"DDVP_SKIPODDFIELDS":{"comment":"","exp":"0x00000100l","file":"dvp.h","line":761,"type":"Integer","value":256},"DDVP_SYNCMASTER":{"comment":"","exp":"0x00000200l","file":"dvp.h","line":766,"type":"Integer","value":512},"DDVP_VBICONVERT":{"comment":"","exp":"0x00000400l","file":"dvp.h","line":772,"type":"Integer","value":1024},"DDVP_VBINOINTERLEAVE":{"comment":"","exp":"0x00004000l","file":"dvp.h","line":796,"type":"Integer","value":16384},"DDVP_VBINOSCALE":{"comment":"","exp":"0x00000800l","file":"dvp.h","line":778,"type":"Integer","value":2048},"DDWAITVB_I_TESTVB":{"comment":"","exp":"0x80000006l","file":"ddrawi.h","line":2322,"type":"Integer","value":2147483654},"DD_CALLBACKS":{"comment":"","exp":"","file":"ddrawint.h","line":360,"type":"Struct","value":"typedef struct DD_CALLBACKS\\r\\n{\\r\\n    DWORD                       dwSize;\\r\\n    DWORD                       dwFlags;\\r\\n    PDD_DESTROYDRIVER           DestroyDriver;\\r\\n    PDD_CREATESURFACE           CreateSurface;\\r\\n    PDD_SETCOLORKEY             SetColorKey;\\r\\n    PDD_SETMODE                 SetMode;\\r\\n    PDD_WAITFORVERTICALBLANK    WaitForVerticalBlank;\\r\\n    PDD_CANCREATESURFACE        CanCreateSurface;\\r\\n    PDD_CREATEPALETTE           CreatePalette;\\r\\n    PDD_GETSCANLINE             GetScanLine;\\r\\n    PDD_MAPMEMORY               MapMemory;\\r\\n} DD_CALLBACKS;"},"DD_DXAPI_ADDVPCAPTUREBUFFER":{"comment":"","exp":"(DD_FIRST_DXAPI+20)","file":"ddkmapi.h","line":430,"type":"Integer","value":1300},"DD_DXAPI_CLOSEHANDLE":{"comment":"","exp":"(DD_FIRST_DXAPI+1)","file":"ddkmapi.h","line":69,"type":"Integer","value":1281},"DD_DXAPI_FLIP_OVERLAY":{"comment":"","exp":"(DD_FIRST_DXAPI+12)","file":"ddkmapi.h","line":291,"type":"Integer","value":1292},"DD_DXAPI_FLIP_VP":{"comment":"","exp":"(DD_FIRST_DXAPI+13)","file":"ddkmapi.h","line":307,"type":"Integer","value":1293},"DD_DXAPI_FLUSHVPCAPTUREBUFFERS":{"comment":"","exp":"(DD_FIRST_DXAPI+21)","file":"ddkmapi.h","line":459,"type":"Integer","value":1301},"DD_DXAPI_GETKERNELCAPS":{"comment":"","exp":"(DD_FIRST_DXAPI+5)","file":"ddkmapi.h","line":147,"type":"Integer","value":1285},"DD_DXAPI_GETVERSIONNUMBER":{"comment":"","exp":"(DD_FIRST_DXAPI)","file":"ddkmapi.h","line":54,"type":"Integer","value":1280},"DD_DXAPI_GET_CURRENT_VP_AUTOFLIP_SURFACE":{"comment":"","exp":"(DD_FIRST_DXAPI+14)","file":"ddkmapi.h","line":324,"type":"Integer","value":1294},"DD_DXAPI_GET_LAST_VP_AUTOFLIP_SURFACE":{"comment":"","exp":"(DD_FIRST_DXAPI+15)","file":"ddkmapi.h","line":347,"type":"Integer","value":1295},"DD_DXAPI_GET_POLARITY":{"comment":"","exp":"(DD_FIRST_DXAPI+18)","file":"ddkmapi.h","line":381,"type":"Integer","value":1298},"DD_DXAPI_GET_SURFACE_STATE":{"comment":"","exp":"(DD_FIRST_DXAPI+9)","file":"ddkmapi.h","line":212,"type":"Integer","value":1289},"DD_DXAPI_GET_VP_FIELD_NUMBER":{"comment":"","exp":"(DD_FIRST_DXAPI+6)","file":"ddkmapi.h","line":162,"type":"Integer","value":1286},"DD_DXAPI_LOCK":{"comment":"","exp":"(DD_FIRST_DXAPI+11)","file":"ddkmapi.h","line":249,"type":"Integer","value":1291},"DD_DXAPI_OPENDIRECTDRAW":{"comment":"","exp":"(DD_FIRST_DXAPI+2)","file":"ddkmapi.h","line":82,"type":"Integer","value":1282},"DD_DXAPI_OPENSURFACE":{"comment":"","exp":"(DD_FIRST_DXAPI+3)","file":"ddkmapi.h","line":103,"type":"Integer","value":1283},"DD_DXAPI_OPENVIDEOPORT":{"comment":"","exp":"(DD_FIRST_DXAPI+4)","file":"ddkmapi.h","line":125,"type":"Integer","value":1284},"DD_DXAPI_OPENVPCAPTUREDEVICE":{"comment":"","exp":"(DD_FIRST_DXAPI+19)","file":"ddkmapi.h","line":401,"type":"Integer","value":1299},"DD_DXAPI_REGISTER_CALLBACK":{"comment":"","exp":"(DD_FIRST_DXAPI+16)","file":"ddkmapi.h","line":355,"type":"Integer","value":1296},"DD_DXAPI_SET_SURFACE_STATE":{"comment":"","exp":"(DD_FIRST_DXAPI+10)","file":"ddkmapi.h","line":233,"type":"Integer","value":1290},"DD_DXAPI_SET_VP_FIELD_NUMBER":{"comment":"","exp":"(DD_FIRST_DXAPI+7)","file":"ddkmapi.h","line":182,"type":"Integer","value":1287},"DD_DXAPI_SET_VP_SKIP_FIELD":{"comment":"","exp":"(DD_FIRST_DXAPI+8)","file":"ddkmapi.h","line":197,"type":"Integer","value":1288},"DD_DXAPI_UNREGISTER_CALLBACK":{"comment":"","exp":"(DD_FIRST_DXAPI+17)","file":"ddkmapi.h","line":373,"type":"Integer","value":1297},"DD_FIRST_DXAPI":{"comment":"","exp":"0x500","file":"ddkmapi.h","line":44,"type":"Integer","value":1280},"DD_HAL_VERSION":{"comment":"","exp":"0x0100","file":"ddrawi.h","line":350,"type":"Integer","value":256},"DD_KERNELCALLBACKS":{"comment":"","exp":"","file":"ddrawint.h","line":604,"type":"Struct","value":"typedef struct DD_KERNELCALLBACKS\\r\\n{\\r\\n    DWORD                               dwSize;\\r\\n    DWORD                               dwFlags;\\r\\n    PDD_KERNELCB_SYNCSURFACE            SyncSurfaceData;\\r\\n    PDD_KERNELCB_SYNCVIDEOPORT          SyncVideoPortData;\\r\\n} DD_KERNELCALLBACKS, *PDD_KERNELCALLBACKS;"},"DD_MOTIONCOMPCALLBACKS":{"comment":"","exp":"","file":"ddrawint.h","line":629,"type":"Struct","value":"typedef struct DD_MOTIONCOMPCALLBACKS\\r\\n{\\r\\n    DWORD                           dwSize;\\r\\n    DWORD                           dwFlags;\\r\\n    PDD_MOCOMPCB_GETGUIDS           GetMoCompGuids;\\r\\n    PDD_MOCOMPCB_GETFORMATS         GetMoCompFormats;\\r\\n    PDD_MOCOMPCB_CREATE             CreateMoComp;\\r\\n    PDD_MOCOMPCB_GETCOMPBUFFINFO    GetMoCompBuffInfo;\\r\\n    PDD_MOCOMPCB_GETINTERNALINFO    GetInternalMoCompInfo;\\r\\n    PDD_MOCOMPCB_BEGINFRAME         BeginMoCompFrame;\\r\\n    PDD_MOCOMPCB_ENDFRAME           EndMoCompFrame;\\r\\n    PDD_MOCOMPCB_RENDER             RenderMoComp;\\r\\n    PDD_MOCOMPCB_QUERYSTATUS        QueryMoCompStatus;\\r\\n    PDD_MOCOMPCB_DESTROY            DestroyMoComp;\\r\\n} DD_MOTIONCOMPCALLBACKS;"},"DD_NTPRIVATEDRIVERCAPS":{"comment":"","exp":"","file":"ddrawint.h","line":1074,"type":"Struct","value":"typedef struct DD_NTPRIVATEDRIVERCAPS\\r\\n{\\r\\n    DWORD                               dwSize;\\r\\n    DWORD                               dwPrivateCaps;\\r\\n} DD_NTPRIVATEDRIVERCAPS;"},"DD_PALETTECALLBACKS":{"comment":"","exp":"","file":"ddrawint.h","line":452,"type":"Struct","value":"typedef struct DD_PALETTECALLBACKS\\r\\n{\\r\\n    DWORD                       dwSize;\\r\\n    DWORD                       dwFlags;\\r\\n    PDD_PALCB_DESTROYPALETTE    DestroyPalette;\\r\\n    PDD_PALCB_SETENTRIES        SetEntries;\\r\\n} DD_PALETTECALLBACKS;"},"DD_RUNTIME_VERSION":{"comment":"","exp":"0x00000902l","file":"ddrawi.h","line":344,"type":"Integer","value":2306},"DD_SURFACECALLBACKS":{"comment":"","exp":"","file":"ddrawint.h","line":483,"type":"Struct","value":"typedef struct DD_SURFACECALLBACKS\\r\\n{\\r\\n    DWORD                               dwSize;\\r\\n    DWORD                               dwFlags;\\r\\n    PDD_SURFCB_DESTROYSURFACE           DestroySurface;\\r\\n    PDD_SURFCB_FLIP                     Flip;\\r\\n    PDD_SURFCB_SETCLIPLIST              SetClipList;\\r\\n    PDD_SURFCB_LOCK                     Lock;\\r\\n    PDD_SURFCB_UNLOCK                   Unlock;\\r\\n    PDD_SURFCB_BLT                      Blt;\\r\\n    PDD_SURFCB_SETCOLORKEY              SetColorKey;\\r\\n    PDD_SURFCB_ADDATTACHEDSURFACE       AddAttachedSurface;\\r\\n    PDD_SURFCB_GETBLTSTATUS             GetBltStatus;\\r\\n    PDD_SURFCB_GETFLIPSTATUS            GetFlipStatus;\\r\\n    PDD_SURFCB_UPDATEOVERLAY            UpdateOverlay;\\r\\n    PDD_SURFCB_SETOVERLAYPOSITION       SetOverlayPosition;\\r\\n    LPVOID                              reserved4;\\r\\n    PDD_SURFCB_SETPALETTE               SetPalette;\\r\\n} DD_SURFACECALLBACKS;"},"DD_VERSION":{"comment":"","exp":"0x00000200l","file":"ddrawi.h","line":343,"type":"Integer","value":512},"DD_VIDEOPORTCALLBACKS":{"comment":"","exp":"","file":"ddrawint.h","line":539,"type":"Struct","value":"typedef struct DD_VIDEOPORTCALLBACKS\\r\\n{\\r\\n    DWORD                               dwSize;\\r\\n    DWORD                               dwFlags;\\r\\n    PDD_VPORTCB_CANCREATEVIDEOPORT      CanCreateVideoPort;\\r\\n    PDD_VPORTCB_CREATEVIDEOPORT         CreateVideoPort;\\r\\n    PDD_VPORTCB_FLIP                    FlipVideoPort;\\r\\n    PDD_VPORTCB_GETBANDWIDTH            GetVideoPortBandwidth;\\r\\n    PDD_VPORTCB_GETINPUTFORMATS         GetVideoPortInputFormats;\\r\\n    PDD_VPORTCB_GETOUTPUTFORMATS        GetVideoPortOutputFormats;\\r\\n    LPVOID                              lpReserved1;\\r\\n    PDD_VPORTCB_GETFIELD                GetVideoPortField;\\r\\n    PDD_VPORTCB_GETLINE                 GetVideoPortLine;\\r\\n    PDD_VPORTCB_GETVPORTCONNECT         GetVideoPortConnectInfo;\\r\\n    PDD_VPORTCB_DESTROYVPORT            DestroyVideoPort;\\r\\n    PDD_VPORTCB_GETFLIPSTATUS           GetVideoPortFlipStatus;\\r\\n    PDD_VPORTCB_UPDATE                  UpdateVideoPort;\\r\\n    PDD_VPORTCB_WAITFORSYNC             WaitForVideoPortSync;\\r\\n    PDD_VPORTCB_GETSIGNALSTATUS         GetVideoSignalStatus;\\r\\n    PDD_VPORTCB_COLORCONTROL            ColorControl;\\r\\n} DD_VIDEOPORTCALLBACKS;"},"DELETED_LASTONE":{"comment":"","exp":"1","file":"ddrawi.h","line":267,"type":"Integer","value":1},"DELETED_NOTFOUND":{"comment":"","exp":"2","file":"ddrawi.h","line":268,"type":"Integer","value":2},"DELETED_OK":{"comment":"","exp":"0","file":"ddrawi.h","line":266,"type":"Integer","value":0},"DXAPI_HALVERSION":{"comment":"","exp":"0x0001","file":"dxmini.h","line":326,"type":"Integer","value":1},"DXAPI_MAJORVERSION":{"comment":"","exp":"1","file":"ddkmapi.h","line":41,"type":"Integer","value":1},"DXAPI_MINORVERSION":{"comment":"","exp":"0","file":"ddkmapi.h","line":42,"type":"Integer","value":0},"DXERR_GENERIC":{"comment":"","exp":"0x80004005","file":"dxmini.h","line":77,"type":"Integer","value":2147500037},"DXERR_OUTOFCAPS":{"comment":"","exp":"0x88760168","file":"dxmini.h","line":78,"type":"Integer","value":2289434984},"DXERR_UNSUPPORTED":{"comment":"","exp":"0x80004001","file":"dxmini.h","line":76,"type":"Integer","value":2147500033},"DX_OK":{"comment":"","exp":"0x0","file":"dxmini.h","line":75,"type":"Integer","value":0},"E_FAIL":{"comment":"","exp":"0x80004005L","file":"ddrawi.h","line":92,"type":"Integer","value":2147500037},"E_INVALIDARG":{"comment":"","exp":"0x80070057L","file":"ddrawi.h","line":91,"type":"Integer","value":2147942487},"E_NOTIMPL":{"comment":"","exp":"0x80004001L","file":"ddrawi.h","line":89,"type":"Integer","value":2147500033},"E_OUTOFMEMORY":{"comment":"","exp":"0x8007000EL","file":"ddrawi.h","line":90,"type":"Integer","value":2147942414},"GETCONNECTEDIDS_SOURCE":{"comment":"","exp":"1","file":"cloneviewhelper.h","line":72,"type":"Integer","value":1},"GETCONNECTEDIDS_TARGET":{"comment":"","exp":"0","file":"cloneviewhelper.h","line":71,"type":"Integer","value":0},"HEAPALIASINFO_MAPPEDDUMMY":{"comment":"\/\/ PRIVATE: heap aliased mapped to dummy memory","exp":"0x00000002l","file":"ddrawi.h","line":642,"type":"Integer","value":2},"HEAPALIASINFO_MAPPEDREAL":{"comment":"\/\/ PRIVATE: heap aliases mapped to real video memory","exp":"0x00000001l","file":"ddrawi.h","line":641,"type":"Integer","value":1},"ICloneViewHelperVtbl":{"comment":"","exp":"","file":"cloneviewhelper.h","line":163,"type":"Struct","value":"typedef struct ICloneViewHelperVtbl\\r\\n    {\\r\\n        BEGIN_INTERFACE\\r\\n        \\r\\n        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( \\r\\n            __RPC__in ICloneViewHelper * This,\\r\\n            \/* [in] *\/ __RPC__in REFIID riid,\\r\\n            \/* [annotation][iid_is][out] *\/ \\r\\n            _COM_Outptr_  void **ppvObject);\\r\\n        \\r\\n        ULONG ( STDMETHODCALLTYPE *AddRef )( \\r\\n            __RPC__in ICloneViewHelper * This);\\r\\n        \\r\\n        ULONG ( STDMETHODCALLTYPE *Release )( \\r\\n            __RPC__in ICloneViewHelper * This);\\r\\n        \\r\\n        HRESULT ( STDMETHODCALLTYPE *GetConnectedIDs )( \\r\\n            __RPC__in ICloneViewHelper * This,\\r\\n            \/* [in] *\/ __RPC__in LPCWSTR wszAdaptorName,\\r\\n            \/* [out][in] *\/ __RPC__inout ULONG *pulCount,\\r\\n            \/* [out][in] *\/ __RPC__inout ULONG *pulID,\\r\\n            \/* [in] *\/ ULONG ulFlags);\\r\\n        \\r\\n        HRESULT ( STDMETHODCALLTYPE *GetActiveTopology )( \\r\\n            __RPC__in ICloneViewHelper * This,\\r\\n            \/* [in] *\/ __RPC__in LPCWSTR wszAdaptorName,\\r\\n            \/* [in] *\/ ULONG ulSourceID,\\r\\n            \/* [out][in] *\/ __RPC__inout ULONG *pulCount,\\r\\n            \/* [out][in] *\/ __RPC__inout ULONG *pulTargetID);\\r\\n        \\r\\n        HRESULT ( STDMETHODCALLTYPE *SetActiveTopology )( \\r\\n            __RPC__in ICloneViewHelper * This,\\r\\n            \/* [in] *\/ __RPC__in LPCWSTR wszAdaptorName,\\r\\n            \/* [in] *\/ ULONG ulSourceID,\\r\\n            \/* [in] *\/ ULONG ulCount,\\r\\n            \/* [in] *\/ __RPC__in ULONG *pulTargetID);\\r\\n        \\r\\n        HRESULT ( STDMETHODCALLTYPE *Commit )( \\r\\n            __RPC__in ICloneViewHelper * This,\\r\\n            \/* [in] *\/ BOOL fFinalCall);\\r\\n        \\r\\n        END_INTERFACE\\r\\n    } ICloneViewHelperVtbl;"},"INTERFACE":{"comment":"","dupe":[{"comment":"","exp":"IDirectDrawSurfaceKernel","file":"ddkernel.h","line":90,"type":"Unknown","value":"IDirectDrawSurfaceKernel"},{"comment":"","exp":"IDDVideoPortContainer","file":"dvp.h","line":107,"type":"Unknown","value":"IDDVideoPortContainer"},{"comment":"","exp":"IDirectDrawVideoPort","file":"dvp.h","line":147,"type":"Unknown","value":"IDirectDrawVideoPort"},{"comment":"","exp":"IDirectDrawVideoPortNotify","file":"dvp.h","line":217,"type":"Unknown","value":"IDirectDrawVideoPortNotify"}],"exp":"IDirectDrawKernel","file":"ddkernel.h","line":64,"type":"Unknown","value":"IDirectDrawKernel"},"IRQINFO_HANDLED":{"comment":"\/\/ Miniport is managing IRQ","exp":"0x01","file":"dxmini.h","line":176,"type":"Integer","value":1},"IRQINFO_NOTHANDLED":{"comment":"\/\/ Not supported on NT","exp":"0x02","file":"dxmini.h","line":177,"type":"Integer","value":2},"IUnknown":{"comment":"","exp":"void","file":"ddkernel.h","line":22,"type":"Unknown","value":"void"},"IViewHelperVtbl":{"comment":"","exp":"","file":"cloneviewhelper.h","line":296,"type":"Struct","value":"typedef struct IViewHelperVtbl\\r\\n    {\\r\\n        BEGIN_INTERFACE\\r\\n        \\r\\n        HRESULT ( STDMETHODCALLTYPE *QueryInterface )( \\r\\n            __RPC__in IViewHelper * This,\\r\\n            \/* [in] *\/ __RPC__in REFIID riid,\\r\\n            \/* [annotation][iid_is][out] *\/ \\r\\n            _COM_Outptr_  void **ppvObject);\\r\\n        \\r\\n        ULONG ( STDMETHODCALLTYPE *AddRef )( \\r\\n            __RPC__in IViewHelper * This);\\r\\n        \\r\\n        ULONG ( STDMETHODCALLTYPE *Release )( \\r\\n            __RPC__in IViewHelper * This);\\r\\n        \\r\\n        HRESULT ( STDMETHODCALLTYPE *GetConnectedIDs )( \\r\\n            __RPC__in IViewHelper * This,\\r\\n            \/* [in] *\/ __RPC__in LPCWSTR wszAdaptorName,\\r\\n            \/* [out][in] *\/ __RPC__inout ULONG *pulCount,\\r\\n            \/* [out][in] *\/ __RPC__inout ULONG *pulID,\\r\\n            \/* [in] *\/ ULONG ulFlags);\\r\\n        \\r\\n        HRESULT ( STDMETHODCALLTYPE *GetActiveTopology )( \\r\\n            __RPC__in IViewHelper * This,\\r\\n            \/* [in] *\/ __RPC__in LPCWSTR wszAdaptorName,\\r\\n            \/* [in] *\/ ULONG ulSourceID,\\r\\n            \/* [out][in] *\/ __RPC__inout ULONG *pulCount,\\r\\n            \/* [out][in] *\/ __RPC__inout ULONG *pulTargetID);\\r\\n        \\r\\n        HRESULT ( STDMETHODCALLTYPE *SetActiveTopology )( \\r\\n            __RPC__in IViewHelper * This,\\r\\n            \/* [in] *\/ __RPC__in LPCWSTR wszAdaptorName,\\r\\n            \/* [in] *\/ ULONG ulSourceID,\\r\\n            \/* [in] *\/ ULONG ulCount,\\r\\n            \/* [in] *\/ __RPC__in ULONG *pulTargetID);\\r\\n        \\r\\n        HRESULT ( STDMETHODCALLTYPE *Commit )( \\r\\n            __RPC__in IViewHelper * This);\\r\\n        \\r\\n        HRESULT ( STDMETHODCALLTYPE *SetConfiguration )( \\r\\n            __RPC__in IViewHelper * This,\\r\\n            \/* [in] *\/ __RPC__in_opt IStream *pIStream,\\r\\n            \/* [out] *\/ __RPC__out ULONG *pulStatus);\\r\\n        \\r\\n        HRESULT ( STDMETHODCALLTYPE *GetProceedOnNewConfiguration )( \\r\\n            __RPC__in IViewHelper * This);\\r\\n        \\r\\n        END_INTERFACE\\r\\n    } IViewHelperVtbl;"},"LPD3DHAL_CALLBACKS":{"comment":"","exp":"ULONG_PTR","file":"ddrawi.h","line":74,"type":"Unknown","value":"DWORD"},"LPD3DHAL_CALLBACKS2":{"comment":"","exp":"ULONG_PTR","file":"ddrawi.h","line":75,"type":"Unknown","value":"DWORD"},"LPD3DHAL_CALLBACKS3":{"comment":"","exp":"ULONG_PTR","file":"ddrawi.h","line":76,"type":"Unknown","value":"DWORD"},"LPD3DHAL_COMMANDBUFFERCALLBACKS":{"comment":"","exp":"ULONG_PTR","file":"ddrawi.h","line":78,"type":"Unknown","value":"DWORD"},"LPD3DHAL_D3DEXTENDEDCAPS":{"comment":"","exp":"ULONG_PTR","file":"ddrawi.h","line":77,"type":"Unknown","value":"DWORD"},"LPD3DHAL_GLOBALDRIVERDATA":{"comment":"","exp":"ULONG_PTR","file":"ddrawi.h","line":73,"type":"Unknown","value":"DWORD"},"MAX_AUTOFLIP_BUFFERS":{"comment":"","exp":"10","file":"ddrawi.h","line":426,"type":"Integer","value":10},"MAX_DRIVER_NAME":{"comment":"","exp":"CCHDEVICENAME","file":"ddrawi.h","line":416,"type":"Integer","value":32},"MAX_PALETTE_SIZE":{"comment":"","exp":"256","file":"ddrawi.h","line":421,"type":"Integer","value":256},"OBJECT_ISROOT":{"comment":"\/\/ object is root object","exp":"0x80000000l","file":"ddrawi.h","line":31,"type":"Integer","value":2147483648},"PFINDEX_UNINITIALIZED":{"comment":"\/\/ pixel-format index is in uninitialized state","exp":"(0UL)","file":"ddrawi.h","line":1481,"type":"Integer","value":0},"PFINDEX_UNSUPPORTED":{"comment":"\/\/ surface's pixel format is not supported by HEL","exp":"(~0UL)","file":"ddrawi.h","line":1482,"type":"Integer","value":-1},"PULONG_PTR":{"comment":"","exp":"LPDWORD","file":"ddrawi.h","line":62,"type":"Unknown","value":"LPDWORD"},"ROP_HAS_PATTERN":{"comment":"","exp":"0x00000002l","file":"ddrawi.h","line":1614,"type":"Integer","value":2},"ROP_HAS_SOURCE":{"comment":"","exp":"0x00000001l","file":"ddrawi.h","line":1613,"type":"Integer","value":1},"ROP_HAS_SOURCEPATTERN":{"comment":"","exp":"ROP_HAS_SOURCE | ROP_HAS_PATTERN","file":"ddrawi.h","line":1615,"type":"Integer","value":3},"SETCONFIGURATION_STATUS_ADDITIONAL":{"comment":"","exp":"1","file":"cloneviewhelper.h","line":77,"type":"Integer","value":1},"SETCONFIGURATION_STATUS_APPLIED":{"comment":"","exp":"0","file":"cloneviewhelper.h","line":75,"type":"Integer","value":0},"SETCONFIGURATION_STATUS_OVERRIDDEN":{"comment":"","exp":"2","file":"cloneviewhelper.h","line":79,"type":"Integer","value":2},"SURFACEALIGN_DISCARDABLE":{"comment":"\/* Surface can be discarded to   *\/","exp":"0x00000001l","file":"dmemmgr.h","line":68,"type":"Integer","value":1},"S_INIT":{"comment":"","exp":"2","file":"cloneviewhelper.h","line":73,"type":"Integer","value":2},"ULONG_PTR":{"comment":"","exp":"DWORD","file":"ddrawi.h","line":61,"type":"Unknown","value":"DWORD"},"VIDMEM_HEAPDISABLED":{"comment":"\/\/ heap disabled","exp":"0x00000020l","file":"ddrawi.h","line":604,"type":"Integer","value":32},"VIDMEM_ISHEAP":{"comment":"\/\/ heap is preallocated by driver","exp":"0x00000004l","file":"ddrawi.h","line":601,"type":"Integer","value":4},"VIDMEM_ISLINEAR":{"comment":"\/\/ heap is linear","exp":"0x00000001l","file":"ddrawi.h","line":599,"type":"Integer","value":1},"VIDMEM_ISNONLOCAL":{"comment":"\/\/ heap populated with non-local video memory","exp":"0x00000008l","file":"ddrawi.h","line":602,"type":"Integer","value":8},"VIDMEM_ISRECTANGULAR":{"comment":"\/\/ heap is rectangular","exp":"0x00000002l","file":"ddrawi.h","line":600,"type":"Integer","value":2},"VIDMEM_ISWC":{"comment":"\/\/ heap populated with write combining memory","exp":"0x00000010l","file":"ddrawi.h","line":603,"type":"Integer","value":16},"VMEMHEAP_ALIGNMENT":{"comment":"\/* Heap has extended alignment info  *\/","exp":"0x00000004l","file":"dmemmgr.h","line":171,"type":"Integer","value":4},"VMEMHEAP_LINEAR":{"comment":"\/* Heap is linear                    *\/","exp":"0x00000001l","file":"dmemmgr.h","line":169,"type":"Integer","value":1},"VMEMHEAP_RECTANGULAR":{"comment":"\/* Heap is rectangular               *\/","exp":"0x00000002l","file":"dmemmgr.h","line":170,"type":"Integer","value":2},"_ACCESSRECTLIST":{"comment":"","exp":"","file":"ddrawi.h","line":1290,"type":"Struct","value":"typedef struct _ACCESSRECTLIST\\r\\n{\\r\\n    struct _ACCESSRECTLIST FAR  *lpLink;     \/\/ link to next attached surface\\r\\n    RECT                        rDest;       \/\/ rectangle being used\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpOwner;     \/\/ owning local object\\r\\n    LPVOID                      lpSurfaceData;   \/\/ associated screen ptr\\r\\n    DWORD                       dwFlags;     \/\/ PRIVATE: flags\\r\\n    LPHEAPALIASINFO             lpHeapAliasInfo; \/\/ PRIVATE: aliased heaps being used by this lock\\r\\n} ACCESSRECTLIST;"},"_ATTACHLIST":{"comment":"","exp":"","file":"ddrawi.h","line":1265,"type":"Struct","value":"typedef struct _ATTACHLIST\\r\\n{\\r\\n    DWORD                               dwFlags;\\r\\n    struct _ATTACHLIST                  FAR *lpLink;      \/\/ link to next attached surface\\r\\n    struct _DDRAWI_DDRAWSURFACE_LCL FAR *lpAttached;  \/\/ attached surface local obj\\r\\n    struct _DDRAWI_DDRAWSURFACE_INT FAR *lpIAttached; \/\/ attached surface interface\\r\\n} ATTACHLIST;"},"_DBLNODE":{"comment":"","exp":"","file":"ddrawi.h","line":1278,"type":"Struct","value":"typedef struct _DBLNODE\\r\\n{\\r\\n    struct  _DBLNODE                    FAR *next;  \/\/ link to next node\\r\\n    struct  _DBLNODE                    FAR *prev;  \/\/ link to previous node\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL           object;     \/\/ link to object\\r\\n    LPDDRAWI_DDRAWSURFACE_INT           object_int; \/\/ object interface\\r\\n} DBLNODE;"},"_DDADDVPCAPTUREBUFF":{"comment":"","exp":"","file":"ddkmapi.h","line":440,"type":"Struct","value":"typedef struct _DDADDVPCAPTUREBUFF\\r\\n    {\\r\\n\\tHANDLE  hCapture;\\r\\n\\tDWORD   dwFlags;\\r\\n\\tPMDL    pMDL;\\r\\n\\tPKEVENT pKEvent;\\r\\n\\tLPDDCAPBUFFINFO lpBuffInfo;\\r\\n    } DDADDVPCAPTUREBUFF, FAR * LPDDADDVPCAPTUREBUFF;"},"_DDBOBNEXTFIELDINFO":{"comment":"","exp":"","file":"dxmini.h","line":197,"type":"Struct","value":"typedef struct _DDBOBNEXTFIELDINFO {\\r\\n    LPDDSURFACEDATA     lpSurface;\\r\\n} DDBOBNEXTFIELDINFO, *PDDBOBNEXTFIELDINFO;"},"_DDCAPBUFFINFO":{"comment":"","exp":"","file":"ddkmapi.h","line":432,"type":"Struct","value":"typedef struct _DDCAPBUFFINFO\\r\\n    {\\r\\n\\tDWORD   \\tdwFieldNumber;\\r\\n\\tDWORD   \\tbPolarity;\\r\\n\\tLARGE_INTEGER\\tliTimeStamp;\\r\\n\\tDWORD   \\tddRVal;\\r\\n    } DDCAPBUFFINFO, FAR * LPDDCAPBUFFINFO;"},"_DDCLOSEHANDLE":{"comment":"","exp":"","file":"ddkmapi.h","line":71,"type":"Struct","value":"typedef struct _DDCLOSEHANDLE\\r\\n    {\\r\\n        HANDLE  hHandle;\\r\\n    } DDCLOSEHANDLE, FAR *LPDDCLOSEHANDLE;"},"_DDCOMPBUFFERINFO":{"comment":"","exp":"","file":"ddrawint.h","line":1841,"type":"Struct","value":"typedef struct _DDCOMPBUFFERINFO\\r\\n{\\r\\n    DWORD                     dwSize;             \/\/ [in]   size of the struct\\r\\n    DWORD                     dwNumCompBuffers;   \/\/ [out]  number of buffers required for compressed data\\r\\n    DWORD                     dwWidthToCreate;    \/\/ [out]    Width of surface to create\\r\\n    DWORD                     dwHeightToCreate;   \/\/ [out]    Height of surface to create\\r\\n    DWORD                     dwBytesToAllocate;  \/\/ [out]    Total number of bytes used by each surface\\r\\n    DDSCAPS2                  ddCompCaps;         \/\/ [out]    caps to create surfaces to store compressed data\\r\\n    DDPIXELFORMAT             ddPixelFormat;      \/\/ [out]  format to create surfaces to store compressed data\\r\\n} DDCOMPBUFFERINFO, *LPDDCOMPBUFFERINFO;"},"_DDCORECAPS":{"comment":"","exp":"","file":"ddrawi.h","line":1697,"type":"Struct","value":"typedef struct _DDCORECAPS\\r\\n{\\r\\n    DWORD   dwSize;         \/\/ size of the DDDRIVERCAPS structure\\r\\n    DWORD   dwCaps;         \/\/ driver specific capabilities\\r\\n    DWORD   dwCaps2;        \/\/ more driver specific capabilites\\r\\n    DWORD   dwCKeyCaps;     \/\/ color key capabilities of the surface\\r\\n    DWORD   dwFXCaps;       \/\/ driver specific stretching and effects capabilites\\r\\n    DWORD   dwFXAlphaCaps;      \/\/ alpha driver specific capabilities\\r\\n    DWORD   dwPalCaps;      \/\/ palette capabilities\\r\\n    DWORD   dwSVCaps;       \/\/ stereo vision capabilities\\r\\n    DWORD   dwAlphaBltConstBitDepths;   \/\/ DDBD_2,4,8\\r\\n    DWORD   dwAlphaBltPixelBitDepths;   \/\/ DDBD_1,2,4,8\\r\\n    DWORD   dwAlphaBltSurfaceBitDepths; \/\/ DDBD_1,2,4,8\\r\\n    DWORD   dwAlphaOverlayConstBitDepths;   \/\/ DDBD_2,4,8\\r\\n    DWORD   dwAlphaOverlayPixelBitDepths;   \/\/ DDBD_1,2,4,8\\r\\n    DWORD   dwAlphaOverlaySurfaceBitDepths; \/\/ DDBD_1,2,4,8\\r\\n    DWORD   dwZBufferBitDepths;     \/\/ DDBD_8,16,24,32\\r\\n    DWORD   dwVidMemTotal;      \/\/ total amount of video memory\\r\\n    DWORD   dwVidMemFree;       \/\/ amount of free video memory\\r\\n    DWORD   dwMaxVisibleOverlays;   \/\/ maximum number of visible overlays\\r\\n    DWORD   dwCurrVisibleOverlays;  \/\/ current number of visible overlays\\r\\n    DWORD   dwNumFourCCCodes;   \/\/ number of four cc codes\\r\\n    DWORD   dwAlignBoundarySrc; \/\/ source rectangle alignment\\r\\n    DWORD   dwAlignSizeSrc;     \/\/ source rectangle byte size\\r\\n    DWORD   dwAlignBoundaryDest;    \/\/ dest rectangle alignment\\r\\n    DWORD   dwAlignSizeDest;    \/\/ dest rectangle byte size\\r\\n    DWORD   dwAlignStrideAlign; \/\/ stride alignment\\r\\n    DWORD   dwRops[DD_ROP_SPACE];   \/\/ ROPS supported\\r\\n    DDSCAPS ddsCaps;        \/\/ DDSCAPS structure has all the general capabilities\\r\\n    DWORD   dwMinOverlayStretch;    \/\/ minimum overlay stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3\\r\\n    DWORD   dwMaxOverlayStretch;    \/\/ maximum overlay stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3\\r\\n    DWORD   dwMinLiveVideoStretch;  \/\/ minimum live video stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3\\r\\n    DWORD   dwMaxLiveVideoStretch;  \/\/ maximum live video stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3\\r\\n    DWORD   dwMinHwCodecStretch;    \/\/ minimum hardware codec stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3\\r\\n    DWORD   dwMaxHwCodecStretch;    \/\/ maximum hardware codec stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3\\r\\n    DWORD   dwReserved1;        \/\/ reserved\\r\\n    DWORD   dwReserved2;        \/\/ reserved\\r\\n    DWORD   dwReserved3;        \/\/ reserved\\r\\n    DWORD   dwSVBCaps;      \/\/ driver specific capabilities for System->Vmem blts\\r\\n    DWORD   dwSVBCKeyCaps;      \/\/ driver color key capabilities for System->Vmem blts\\r\\n    DWORD   dwSVBFXCaps;        \/\/ driver FX capabilities for System->Vmem blts\\r\\n    DWORD   dwSVBRops[DD_ROP_SPACE];\/\/ ROPS supported for System->Vmem blts\\r\\n    DWORD   dwVSBCaps;      \/\/ driver specific capabilities for Vmem->System blts\\r\\n    DWORD   dwVSBCKeyCaps;      \/\/ driver color key capabilities for Vmem->System blts\\r\\n    DWORD   dwVSBFXCaps;        \/\/ driver FX capabilities for Vmem->System blts\\r\\n    DWORD   dwVSBRops[DD_ROP_SPACE];\/\/ ROPS supported for Vmem->System blts\\r\\n    DWORD   dwSSBCaps;      \/\/ driver specific capabilities for System->System blts\\r\\n    DWORD   dwSSBCKeyCaps;      \/\/ driver color key capabilities for System->System blts\\r\\n    DWORD   dwSSBFXCaps;        \/\/ driver FX capabilities for System->System blts\\r\\n    DWORD   dwSSBRops[DD_ROP_SPACE];\/\/ ROPS supported for System->System blts\\r\\n    DWORD   dwMaxVideoPorts;    \/\/ maximum number of usable video ports\\r\\n    DWORD   dwCurrVideoPorts;   \/\/ current number of video ports used\\r\\n    DWORD   dwSVBCaps2;     \/\/ more driver specific capabilities for System->Vmem blts\\r\\n} DDCORECAPS;"},"_DDENABLEIRQINFO":{"comment":"","exp":"","file":"dxmini.h","line":180,"type":"Struct","value":"typedef struct _DDENABLEIRQINFO {\\r\\n    DWORD           dwIRQSources;\\r\\n    DWORD           dwLine;             \/\/ Line for DDIRQ_VPORTx_LINE interrupt\\r\\n    PDX_IRQCALLBACK IRQCallback;\\t\/\/ Miniport calls this when IRQ happens\\r\\n    PDX_IRQDATA     lpIRQData;          \/\/ Parameter to be passed to IRQCallback\\r\\n} DDENABLEIRQINFO, *PDDENABLEIRQINFO;"},"_DDFLIPOVERLAY":{"comment":"","exp":"","file":"ddkmapi.h","line":293,"type":"Struct","value":"typedef struct _DDFLIPOVERLAY\\r\\n    {\\r\\n\\tHANDLE\\thDirectDraw;\\r\\n\\tHANDLE\\thCurrentSurface;\\r\\n\\tHANDLE\\thTargetSurface;\\r\\n\\tDWORD\\tdwFlags;\\r\\n    } DDFLIPOVERLAY, FAR *LPDDFLIPOVERLAY;"},"_DDFLIPOVERLAYINFO":{"comment":"","exp":"","file":"dxmini.h","line":225,"type":"Struct","value":"typedef struct _DDFLIPOVERLAYINFO {\\r\\n    LPDDSURFACEDATA     lpCurrentSurface;\\r\\n    LPDDSURFACEDATA     lpTargetSurface;\\r\\n    DWORD               dwFlags;\\r\\n} DDFLIPOVERLAYINFO, *PDDFLIPOVERLAYINFO;"},"_DDFLIPVIDEOPORT":{"comment":"","exp":"","file":"ddkmapi.h","line":309,"type":"Struct","value":"typedef struct _DDFLIPVIDEOPORT\\r\\n    {\\r\\n\\tHANDLE\\thDirectDraw;\\r\\n\\tHANDLE\\thVideoPort;\\r\\n\\tHANDLE\\thCurrentSurface;\\r\\n\\tHANDLE\\thTargetSurface;\\r\\n\\tDWORD\\tdwFlags;\\r\\n    } DDFLIPVIDEOPORT, FAR *LPDDFLIPVIDEOPORT;"},"_DDFLIPVIDEOPORTINFO":{"comment":"","exp":"","file":"dxmini.h","line":232,"type":"Struct","value":"typedef struct _DDFLIPVIDEOPORTINFO {\\r\\n    LPDDVIDEOPORTDATA   lpVideoPortData;\\r\\n    LPDDSURFACEDATA     lpCurrentSurface;\\r\\n    LPDDSURFACEDATA     lpTargetSurface;\\r\\n    DWORD               dwFlipVPFlags;\\r\\n} DDFLIPVIDEOPORTINFO, *PDDFLIPVIDEOPORTINFO;"},"_DDGETAUTOFLIPIN":{"comment":"","exp":"","file":"ddkmapi.h","line":326,"type":"Struct","value":"typedef struct _DDGETAUTOFLIPIN\\r\\n    {\\r\\n\\tHANDLE\\thDirectDraw;\\r\\n\\tHANDLE\\thVideoPort;\\r\\n    } DDGETAUTOFLIPIN, FAR *LPDDGETAUTOFLIPIN;"},"_DDGETAUTOFLIPOUT":{"comment":"","exp":"","file":"ddkmapi.h","line":332,"type":"Struct","value":"typedef struct _DDGETAUTOFLIPOUT\\r\\n    {\\r\\n\\tDWORD\\tddRVal;\\r\\n\\tHANDLE\\thVideoSurface;\\r\\n\\tHANDLE\\thVBISurface;\\r\\n\\tBOOL\\tbPolarity;\\r\\n    } DDGETAUTOFLIPOUT, FAR *LPDDGETAUTOFLIPOUT;"},"_DDGETCURRENTAUTOFLIPININFO":{"comment":"","exp":"","file":"dxmini.h","line":253,"type":"Struct","value":"typedef struct _DDGETCURRENTAUTOFLIPININFO {\\r\\n    LPDDVIDEOPORTDATA   lpVideoPortData;\\r\\n} DDGETCURRENTAUTOFLIPININFO, *PDDGETCURRENTAUTOFLIPININFO;"},"_DDGETCURRENTAUTOFLIPOUTINFO":{"comment":"","exp":"","file":"dxmini.h","line":258,"type":"Struct","value":"typedef struct _DDGETCURRENTAUTOFLIPOUTINFO {\\r\\n    DWORD               dwSurfaceIndex;\\r\\n    DWORD               dwVBISurfaceIndex;\\r\\n} DDGETCURRENTAUTOFLIPOUTINFO, *PDDGETCURRENTAUTOFLIPOUTINFO;"},"_DDGETFIELDNUMIN":{"comment":"","exp":"","file":"ddkmapi.h","line":164,"type":"Struct","value":"typedef struct _DDGETFIELDNUMIN\\r\\n    {\\r\\n\\tHANDLE\\thDirectDraw;\\r\\n\\tHANDLE\\thVideoPort;\\r\\n    } DDGETFIELDNUMIN, FAR *LPDDGETFIELDNUMIN;"},"_DDGETFIELDNUMOUT":{"comment":"","exp":"","file":"ddkmapi.h","line":170,"type":"Struct","value":"typedef struct _DDGETFIELDNUMOUT\\r\\n    {\\r\\n\\tDWORD\\tddRVal;\\r\\n\\tDWORD\\tdwFieldNum;\\r\\n    } DDGETFIELDNUMOUT, FAR *LPDDGETFIELDNUMOUT;"},"_DDGETIRQINFO":{"comment":"","exp":"","file":"dxmini.h","line":173,"type":"Struct","value":"typedef struct _DDGETIRQINFO {\\r\\n    DWORD\\tdwFlags;\\r\\n} DDGETIRQINFO, *PDDGETIRQINFO;"},"_DDGETKERNELCAPSOUT":{"comment":"","exp":"","file":"ddkmapi.h","line":149,"type":"Struct","value":"typedef struct _DDGETKERNELCAPSOUT\\r\\n    {\\r\\n\\tDWORD\\tddRVal;\\r\\n        DWORD\\tdwCaps;\\r\\n\\tDWORD\\tdwIRQCaps;\\r\\n    } DDGETKERNELCAPSOUT, FAR *LPDDGETKERNELCAPSOUT;"},"_DDGETPOLARITYIN":{"comment":"","exp":"","file":"ddkmapi.h","line":383,"type":"Struct","value":"typedef struct _DDGETPOLARITYIN\\r\\n    {\\r\\n\\tHANDLE \\thDirectDraw;\\r\\n\\tHANDLE\\thVideoPort;\\r\\n    } DDGETPOLARITYIN, FAR *LPDDGETPOLARITYIN;"},"_DDGETPOLARITYININFO":{"comment":"","exp":"","file":"dxmini.h","line":243,"type":"Struct","value":"typedef struct _DDGETPOLARITYININFO {\\r\\n    LPDDVIDEOPORTDATA   lpVideoPortData;\\r\\n} DDGETPOLARITYININFO, *PDDGETPOLARITYININFO;"},"_DDGETPOLARITYOUT":{"comment":"","exp":"","file":"ddkmapi.h","line":389,"type":"Struct","value":"typedef struct _DDGETPOLARITYOUT\\r\\n    {\\r\\n\\tDWORD \\tddRVal;\\r\\n\\tBOOL\\tbPolarity;\\r\\n    } DDGETPOLARITYOUT, FAR *LPDDGETPOLARITYOUT;"},"_DDGETPOLARITYOUTINFO":{"comment":"","exp":"","file":"dxmini.h","line":248,"type":"Struct","value":"typedef struct _DDGETPOLARITYOUTINFO {\\r\\n    DWORD               bPolarity;\\r\\n} DDGETPOLARITYOUTINFO, *PDDGETPOLARITYOUTINFO;"},"_DDGETPREVIOUSAUTOFLIPININFO":{"comment":"","exp":"","file":"dxmini.h","line":264,"type":"Struct","value":"typedef struct _DDGETPREVIOUSAUTOFLIPININFO {\\r\\n    LPDDVIDEOPORTDATA   lpVideoPortData;\\r\\n} DDGETPREVIOUSAUTOFLIPININFO, *PDDGETPREVIOUSAUTOFLIPININFO;"},"_DDGETPREVIOUSAUTOFLIPOUTINFO":{"comment":"","exp":"","file":"dxmini.h","line":269,"type":"Struct","value":"typedef struct _DDGETPREVIOUSAUTOFLIPOUTINFO {\\r\\n    DWORD               dwSurfaceIndex;\\r\\n    DWORD               dwVBISurfaceIndex;\\r\\n} DDGETPREVIOUSAUTOFLIPOUTINFO, *PDDGETPREVIOUSAUTOFLIPOUTINFO;"},"_DDGETSURFACESTATEIN":{"comment":"","exp":"","file":"ddkmapi.h","line":214,"type":"Struct","value":"typedef struct _DDGETSURFACESTATEIN\\r\\n    {\\r\\n\\tHANDLE\\thDirectDraw;\\r\\n\\tHANDLE\\thSurface;\\r\\n    } DDGETSURFACESTATEIN, FAR *LPDDGETSURFACESTATEIN;"},"_DDGETSURFACESTATEOUT":{"comment":"","exp":"","file":"ddkmapi.h","line":220,"type":"Struct","value":"typedef struct _DDGETSURFACESTATEOUT\\r\\n    {\\r\\n\\tDWORD\\tddRVal;\\r\\n\\tDWORD\\tdwStateCaps;\\r\\n\\tDWORD\\tdwStateStatus;\\r\\n    } DDGETSURFACESTATEOUT, FAR *LPDDGETSURFACESTATEOUT;"},"_DDGETTRANSFERSTATUSOUTINFO":{"comment":"","exp":"","file":"dxmini.h","line":296,"type":"Struct","value":"typedef struct _DDGETTRANSFERSTATUSOUTINFO {\\r\\n    DWORD_PTR dwTransferID;\\r\\n} DDGETTRANSFERSTATUSOUTINFO, *PDDGETTRANSFEROUTINFO;"},"_DDGETVERSIONNUMBER":{"comment":"","exp":"","file":"ddkmapi.h","line":56,"type":"Struct","value":"typedef struct _DDGETVERSIONNUMBER\\r\\n    {\\r\\n        DWORD   ddRVal;\\r\\n        DWORD   dwMajorVersion;\\r\\n        DWORD   dwMinorVersion;\\r\\n    } DDGETVERSIONNUMBER, FAR *LPDDGETVERSIONNUMBER;"},"_DDHALINFO":{"comment":"","exp":"","file":"ddrawi.h","line":2004,"type":"Struct","value":"typedef struct _DDHALINFO\\r\\n{\\r\\n    DWORD                       dwSize;\\r\\n    LPDDHAL_DDCALLBACKS         lpDDCallbacks;      \/\/ direct draw object callbacks\\r\\n    LPDDHAL_DDSURFACECALLBACKS  lpDDSurfaceCallbacks;   \/\/ surface object callbacks\\r\\n    LPDDHAL_DDPALETTECALLBACKS  lpDDPaletteCallbacks;   \/\/ palette object callbacks\\r\\n    VIDMEMINFO                  vmiData;        \/\/ video memory info\\r\\n    DDCORECAPS                  ddCaps;         \/\/ core hw specific caps\\r\\n    DWORD                       dwMonitorFrequency; \/\/ monitor frequency in current mode\\r\\n    LPDDHAL_GETDRIVERINFO       GetDriverInfo;          \/\/ callback to get arbitrary vtable from driver\\r\\n    DWORD                       dwModeIndex;        \/\/ current mode: index into array\\r\\n    LPDWORD                     lpdwFourCC;     \/\/ fourcc codes supported\\r\\n    DWORD                       dwNumModes;     \/\/ number of modes supported\\r\\n    LPDDHALMODEINFO             lpModeInfo;     \/\/ mode information\\r\\n    DWORD                       dwFlags;        \/\/ create flags\\r\\n    LPVOID                      lpPDevice;      \/\/ physical device ptr\\r\\n    DWORD                       hInstance;      \/\/ instance handle of driver\\r\\n    \/\/------- Fields added in Version 2.0 -------\\r\\n    ULONG_PTR                    lpD3DGlobalDriverData;  \/\/ D3D global Data\\r\\n    ULONG_PTR                   lpD3DHALCallbacks;  \/\/ D3D callbacks\\r\\n    LPDDHAL_DDEXEBUFCALLBACKS   lpDDExeBufCallbacks;    \/\/ Execute buffer pseudo object callbacks\\r\\n} DDHALINFO;"},"_DDHALMODEINFO":{"comment":"","exp":"","file":"ddrawi.h","line":1620,"type":"Struct","value":"typedef struct _DDHALMODEINFO\\r\\n{\\r\\n    DWORD   dwWidth;        \/\/ width (in pixels) of mode\\r\\n    DWORD   dwHeight;       \/\/ height (in pixels) of mode\\r\\n    LONG    lPitch;         \/\/ pitch (in bytes) of mode\\r\\n    DWORD   dwBPP;          \/\/ bits per pixel\\r\\n    WORD    wFlags;         \/\/ flags\\r\\n    WORD    wRefreshRate;       \/\/ refresh rate\\r\\n    DWORD   dwRBitMask;     \/\/ red bit mask\\r\\n    DWORD   dwGBitMask;     \/\/ green bit mask\\r\\n    DWORD   dwBBitMask;     \/\/ blue bit mask\\r\\n    DWORD   dwAlphaBitMask;     \/\/ alpha bit mask\\r\\n} DDHALMODEINFO;"},"_DDHAL_ADDATTACHEDSURFACEDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2198,"type":"Struct","value":"typedef struct _DDHAL_ADDATTACHEDSURFACEDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL         lpDD;       \/\/ driver struct\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL       lpDDSurface;    \/\/ surface struct\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL       lpSurfAttached; \/\/ surface to attach\\r\\n    HRESULT                         ddRVal;     \/\/ return value\\r\\n    LPDDHALSURFCB_ADDATTACHEDSURFACE    AddAttachedSurface; \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_ADDATTACHEDSURFACEDATA;"},"_DDHAL_BEGINMOCOMPFRAMEDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2898,"type":"Struct","value":"typedef struct _DDHAL_BEGINMOCOMPFRAMEDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;\\r\\n    LPDDRAWI_DDMOTIONCOMP_LCL   lpMoComp;\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpDestSurface;        \/\/ [in]  destination buffer in which to decoding this frame\\r\\n    DWORD                       dwInputDataSize;      \/\/ [in]  size of other misc input data to begin frame\\r\\n    LPVOID                      lpInputData;          \/\/ [in]  pointer to misc input data\\r\\n    DWORD                       dwOutputDataSize;     \/\/ [in]  size of other misc output data to begin frame\\r\\n    LPVOID                      lpOutputData;         \/\/ [in]  pointer to output misc data (allocated by client)\\r\\n    HRESULT                     ddRVal;               \/\/ [out]\\r\\n    LPDDHALMOCOMPCB_BEGINFRAME  BeginMoCompFrame;\\r\\n} DDHAL_BEGINMOCOMPFRAMEDATA;"},"_DDHAL_BLTDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2067,"type":"Struct","value":"typedef struct _DDHAL_BLTDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       \/\/ driver struct\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpDDDestSurface;\/\/ dest surface\\r\\n    RECTL                       rDest;      \/\/ dest rect\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSrcSurface; \/\/ src surface\\r\\n    RECTL                       rSrc;       \/\/ src rect\\r\\n    DWORD                       dwFlags;    \/\/ blt flags\\r\\n    DWORD                       dwROPFlags; \/\/ ROP flags (valid for ROPS only)\\r\\n    DDBLTFX                     bltFX;      \/\/ blt FX\\r\\n    HRESULT                     ddRVal;     \/\/ return value\\r\\n    LPDDHALSURFCB_BLT           Blt;        \/\/ PRIVATE: ptr to callback\\r\\n    BOOL                        IsClipped;      \/\/ clipped blt?\\r\\n    RECTL                       rOrigDest;  \/\/ unclipped dest rect\\r\\n                                            \/\/ (only valid if IsClipped)\\r\\n    RECTL                       rOrigSrc;   \/\/ unclipped src rect\\r\\n                                            \/\/ (only valid if IsClipped)\\r\\n    DWORD                       dwRectCnt;  \/\/ count of dest rects\\r\\n                                            \/\/ (only valid if IsClipped)\\r\\n    LPRECT                      prDestRects;    \/\/ array of dest rects\\r\\n} DDHAL_BLTDATA;"},"_DDHAL_CALLBACKS":{"comment":"","exp":"","file":"ddrawi.h","line":1664,"type":"Struct","value":"typedef struct _DDHAL_CALLBACKS\\r\\n{\\r\\n    DDHAL_DDCALLBACKS           cbDDCallbacks;  \/\/ addresses in display driver for DIRECTDRAW object HAL\\r\\n    DDHAL_DDSURFACECALLBACKS    cbDDSurfaceCallbacks; \/\/ addresses in display driver for DIRECTDRAWSURFACE object HAL\\r\\n    DDHAL_DDPALETTECALLBACKS    cbDDPaletteCallbacks; \/\/ addresses in display driver for DIRECTDRAWPALETTE object HAL\\r\\n    DDHAL_DDCALLBACKS           HALDD;      \/\/ HAL for DIRECTDRAW object\\r\\n    DDHAL_DDSURFACECALLBACKS    HALDDSurface;   \/\/ HAL for DIRECTDRAWSURFACE object\\r\\n    DDHAL_DDPALETTECALLBACKS    HALDDPalette;   \/\/ HAL for DIRECTDRAWPALETTE object\\r\\n    DDHAL_DDCALLBACKS           HELDD;      \/\/ HEL for DIRECTDRAW object\\r\\n    DDHAL_DDSURFACECALLBACKS    HELDDSurface;   \/\/ HEL for DIRECTDRAWSURFACE object\\r\\n    DDHAL_DDPALETTECALLBACKS    HELDDPalette;   \/\/ HEL for DIRECTDRAWPALETTE object\\r\\n    DDHAL_DDEXEBUFCALLBACKS     cbDDExeBufCallbacks; \/\/ addresses in display driver for DIRECTDRAWEXEBUF pseudo object HAL\\r\\n    DDHAL_DDEXEBUFCALLBACKS     HALDDExeBuf;    \/\/ HAL for DIRECTDRAWEXEBUF pseudo object\\r\\n    DDHAL_DDEXEBUFCALLBACKS     HELDDExeBuf;    \/\/ HEL for DIRECTDRAWEXEBUF preudo object\\r\\n    DDHAL_DDVIDEOPORTCALLBACKS  cbDDVideoPortCallbacks; \/\/ addresses in display driver for VideoPort object HAL\\r\\n    DDHAL_DDVIDEOPORTCALLBACKS  HALDDVideoPort; \/\/ HAL for DIRECTDRAWVIDEOPORT psuedo object\\r\\n    DDHAL_DDCOLORCONTROLCALLBACKS cbDDColorControlCallbacks; \/\/ addresses in display driver for color control object HAL\\r\\n    DDHAL_DDCOLORCONTROLCALLBACKS HALDDColorControl; \/\/ HAL for DIRECTDRAWCOLORCONTROL psuedo object\\r\\n    DDHAL_DDMISCELLANEOUSCALLBACKS cbDDMiscellaneousCallbacks;\\r\\n    DDHAL_DDMISCELLANEOUSCALLBACKS HALDDMiscellaneous;\\r\\n    DDHAL_DDKERNELCALLBACKS     cbDDKernelCallbacks;\\r\\n    DDHAL_DDKERNELCALLBACKS HALDDKernel;\\r\\n    DDHAL_DDMOTIONCOMPCALLBACKS cbDDMotionCompCallbacks;\\r\\n    DDHAL_DDMOTIONCOMPCALLBACKS HALDDMotionComp;\\r\\n } DDHAL_CALLBACKS, far *LPDDHAL_CALLBACKS;"},"_DDHAL_CANCREATESURFACEDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2297,"type":"Struct","value":"typedef struct _DDHAL_CANCREATESURFACEDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;           \/\/ driver struct\\r\\n    LPDDSURFACEDESC             lpDDSurfaceDesc;    \/\/ description of surface being created\\r\\n    DWORD                       bIsDifferentPixelFormat;\/\/ pixel format differs from primary surface\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    LPDDHAL_CANCREATESURFACE    CanCreateSurface;   \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_CANCREATESURFACEDATA;"},"_DDHAL_CANCREATEVPORTDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2416,"type":"Struct","value":"typedef struct _DDHAL_CANCREATEVPORTDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           \/\/ driver struct\\r\\n    LPDDVIDEOPORTDESC           lpDDVideoPortDesc;\\r\\n    HRESULT                     ddRVal;             \/\/ return value\\r\\n    LPDDHALVPORTCB_CANCREATEVIDEOPORT CanCreateVideoPort; \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_CANCREATEVPORTDATA;"},"_DDHAL_COLORCONTROLDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2625,"type":"Struct","value":"typedef struct _DDHAL_COLORCONTROLDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       \/\/ driver struct\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    \/\/ surface\\r\\n    LPDDCOLORCONTROL            lpColorData;    \/\/ color control information\\r\\n    DWORD                       dwFlags;    \/\/ DDRAWI_GETCOLOR\/DDRAWI_SETCOLOR\\r\\n    HRESULT                     ddRVal;     \/\/ return value\\r\\n    LPDDHALCOLORCB_COLORCONTROL ColorControl;   \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_COLORCONTROLDATA;"},"_DDHAL_CREATEMOCOMPDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2839,"type":"Struct","value":"typedef struct _DDHAL_CREATEMOCOMPDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;\\r\\n    LPDDRAWI_DDMOTIONCOMP_LCL   lpMoComp;\\r\\n    LPGUID                      lpGuid;\\r\\n    DWORD                       dwUncompWidth;\\r\\n    DWORD                       dwUncompHeight;\\r\\n    DDPIXELFORMAT               ddUncompPixelFormat;\\r\\n    LPVOID                      lpData;\\r\\n    DWORD                       dwDataSize;\\r\\n    HRESULT                     ddRVal;\\r\\n    LPDDHALMOCOMPCB_CREATE      CreateMoComp;\\r\\n} DDHAL_CREATEMOCOMPDATA;"},"_DDHAL_CREATEPALETTEDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2309,"type":"Struct","value":"typedef struct _DDHAL_CREATEPALETTEDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       \/\/ driver struct\\r\\n    LPDDRAWI_DDRAWPALETTE_GBL   lpDDPalette;    \/\/ ddraw palette struct\\r\\n    LPPALETTEENTRY              lpColorTable;   \/\/ colors to go in palette\\r\\n    HRESULT                     ddRVal;     \/\/ return value\\r\\n    LPDDHAL_CREATEPALETTE       CreatePalette;  \/\/ PRIVATE: ptr to callback\\r\\n    BOOL                        is_excl;        \/\/ process has exclusive mode\\r\\n} DDHAL_CREATEPALETTEDATA;"},"_DDHAL_CREATESURFACEDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2284,"type":"Struct","value":"typedef struct _DDHAL_CREATESURFACEDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       \/\/ driver struct\\r\\n    LPDDSURFACEDESC             lpDDSurfaceDesc;\/\/ description of surface being created\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   FAR *lplpSList; \/\/ list of created surface objects\\r\\n    DWORD                       dwSCnt;     \/\/ number of surfaces in SList\\r\\n    HRESULT                     ddRVal;     \/\/ return value\\r\\n    LPDDHAL_CREATESURFACE       CreateSurface;  \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_CREATESURFACEDATA;"},"_DDHAL_CREATESURFACEEXDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2730,"type":"Struct","value":"typedef struct _DDHAL_CREATESURFACEEXDATA {\\r\\n    DWORD                       dwFlags;    \/\/ Currently always 0 and not used\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDDLcl;    \/\/ driver struct\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSLcl;   \/\/ list of created surface objects\\r\\n    HRESULT                     ddRVal;     \/\/ return value\\r\\n} DDHAL_CREATESURFACEEXDATA;"},"_DDHAL_CREATEVPORTDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2427,"type":"Struct","value":"typedef struct _DDHAL_CREATEVPORTDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           \/\/ driver struct\\r\\n    LPDDVIDEOPORTDESC           lpDDVideoPortDesc;\\r\\n    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        \/\/ Video port created\\r\\n    HRESULT                     ddRVal;             \/\/ return value\\r\\n    LPDDHALVPORTCB_CREATEVIDEOPORT CreateVideoPort; \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_CREATEVPORTDATA;"},"_DDHAL_DDCALLBACKS":{"comment":"","exp":"","file":"ddrawi.h","line":701,"type":"Struct","value":"typedef struct _DDHAL_DDCALLBACKS\\r\\n{\\r\\n    DWORD            dwSize;\\r\\n    DWORD            dwFlags;\\r\\n    LPDDHAL_DESTROYDRIVER    DestroyDriver;\\r\\n    LPDDHAL_CREATESURFACE    CreateSurface;\\r\\n    LPDDHAL_SETCOLORKEY      SetColorKey;\\r\\n    LPDDHAL_SETMODE      SetMode;\\r\\n    LPDDHAL_WAITFORVERTICALBLANK WaitForVerticalBlank;\\r\\n    LPDDHAL_CANCREATESURFACE     CanCreateSurface;\\r\\n    LPDDHAL_CREATEPALETTE    CreatePalette;\\r\\n    LPDDHAL_GETSCANLINE      GetScanLine;\\r\\n    \/\/ *** New fields for DX2 *** \/\/\\r\\n    LPDDHAL_SETEXCLUSIVEMODE     SetExclusiveMode;\\r\\n    LPDDHAL_FLIPTOGDISURFACE     FlipToGDISurface;\\r\\n} DDHAL_DDCALLBACKS;"},"_DDHAL_DDCOLORCONTROLCALLBACKS":{"comment":"","exp":"","file":"ddrawi.h","line":967,"type":"Struct","value":"typedef struct _DDHAL_DDCOLORCONTROLCALLBACKS\\r\\n{\\r\\n    DWORD               dwSize;\\r\\n    DWORD               dwFlags;\\r\\n    LPDDHALCOLORCB_COLORCONTROL         ColorControl;\\r\\n} DDHAL_DDCOLORCONTROLCALLBACKS;"},"_DDHAL_DDEXEBUFCALLBACKS":{"comment":"","exp":"","file":"ddrawi.h","line":882,"type":"Struct","value":"typedef struct _DDHAL_DDEXEBUFCALLBACKS\\r\\n{\\r\\n    DWORD               dwSize;\\r\\n    DWORD               dwFlags;\\r\\n    LPDDHALEXEBUFCB_CANCREATEEXEBUF CanCreateExecuteBuffer;\\r\\n    LPDDHALEXEBUFCB_CREATEEXEBUF    CreateExecuteBuffer;\\r\\n    LPDDHALEXEBUFCB_DESTROYEXEBUF   DestroyExecuteBuffer;\\r\\n    LPDDHALEXEBUFCB_LOCKEXEBUF      LockExecuteBuffer;\\r\\n    LPDDHALEXEBUFCB_UNLOCKEXEBUF    UnlockExecuteBuffer;\\r\\n} DDHAL_DDEXEBUFCALLBACKS;"},"_DDHAL_DDKERNELCALLBACKS":{"comment":"","exp":"","file":"ddrawi.h","line":987,"type":"Struct","value":"typedef struct _DDHAL_DDKERNELCALLBACKS\\r\\n{\\r\\n    DWORD                               dwSize;\\r\\n    DWORD                               dwFlags;\\r\\n    LPDDHALKERNELCB_SYNCSURFACE     SyncSurfaceData;\\r\\n    LPDDHALKERNELCB_SYNCVIDEOPORT   SyncVideoPortData;\\r\\n} DDHAL_DDKERNELCALLBACKS, *LPDDHAL_DDKERNELCALLBACKS;"},"_DDHAL_DDMISCELLANEOUS2CALLBACKS":{"comment":"","exp":"","file":"ddrawi.h","line":848,"type":"Struct","value":"typedef struct _DDHAL_DDMISCELLANEOUS2CALLBACKS {\\r\\n    DWORD                               dwSize;\\r\\n    DWORD                               dwFlags;\\r\\n    LPVOID                              Reserved;\\r\\n    LPDDHAL_CREATESURFACEEX             CreateSurfaceEx;\\r\\n    LPDDHAL_GETDRIVERSTATE              GetDriverState;\\r\\n    LPDDHAL_DESTROYDDLOCAL              DestroyDDLocal;\\r\\n} DDHAL_DDMISCELLANEOUS2CALLBACKS, *LPDDHAL_DDMISCELLANEOUS2CALLBACKS;"},"_DDHAL_DDMISCELLANEOUSCALLBACKS":{"comment":"","exp":"","file":"ddrawi.h","line":819,"type":"Struct","value":"typedef struct _DDHAL_DDMISCELLANEOUSCALLBACKS {\\r\\n    DWORD                               dwSize;\\r\\n    DWORD                               dwFlags;\\r\\n    LPDDHAL_GETAVAILDRIVERMEMORY        GetAvailDriverMemory;\\r\\n    LPDDHAL_UPDATENONLOCALHEAP          UpdateNonLocalHeap;\\r\\n    LPDDHAL_GETHEAPALIGNMENT            GetHeapAlignment;\\r\\n    \/*\\r\\n     * The GetSysmemBltStatus callback uses the same prototype as GetBltStatus.\\r\\n     * It is legal to point both pointers to the same driver routine.\\r\\n     *\/\\r\\n    LPDDHALSURFCB_GETBLTSTATUS          GetSysmemBltStatus;\\r\\n} DDHAL_DDMISCELLANEOUSCALLBACKS, *LPDDHAL_DDMISCELLANEOUSCALLBACKS;"},"_DDHAL_DDMOTIONCOMPCALLBACKS":{"comment":"","exp":"","file":"ddrawi.h","line":1016,"type":"Struct","value":"typedef struct _DDHAL_DDMOTIONCOMPCALLBACKS\\r\\n{\\r\\n    DWORD                           dwSize;\\r\\n    DWORD                           dwFlags;\\r\\n    LPDDHALMOCOMPCB_GETGUIDS        GetMoCompGuids;\\r\\n    LPDDHALMOCOMPCB_GETFORMATS      GetMoCompFormats;\\r\\n    LPDDHALMOCOMPCB_CREATE          CreateMoComp;\\r\\n    LPDDHALMOCOMPCB_GETCOMPBUFFINFO GetMoCompBuffInfo;\\r\\n    LPDDHALMOCOMPCB_GETINTERNALINFO GetInternalMoCompInfo;\\r\\n    LPDDHALMOCOMPCB_BEGINFRAME      BeginMoCompFrame;\\r\\n    LPDDHALMOCOMPCB_ENDFRAME        EndMoCompFrame;\\r\\n    LPDDHALMOCOMPCB_RENDER          RenderMoComp;\\r\\n    LPDDHALMOCOMPCB_QUERYSTATUS     QueryMoCompStatus;\\r\\n    LPDDHALMOCOMPCB_DESTROY         DestroyMoComp;\\r\\n} DDHAL_DDMOTIONCOMPCALLBACKS;"},"_DDHAL_DDPALETTECALLBACKS":{"comment":"","exp":"","file":"ddrawi.h","line":739,"type":"Struct","value":"typedef struct _DDHAL_DDPALETTECALLBACKS\\r\\n{\\r\\n    DWORD           dwSize;\\r\\n    DWORD           dwFlags;\\r\\n    LPDDHALPALCB_DESTROYPALETTE DestroyPalette;\\r\\n    LPDDHALPALCB_SETENTRIES SetEntries;\\r\\n} DDHAL_DDPALETTECALLBACKS;"},"_DDHAL_DDSURFACECALLBACKS":{"comment":"","exp":"","file":"ddrawi.h","line":771,"type":"Struct","value":"typedef struct _DDHAL_DDSURFACECALLBACKS\\r\\n{\\r\\n    DWORD               dwSize;\\r\\n    DWORD               dwFlags;\\r\\n    LPDDHALSURFCB_DESTROYSURFACE    DestroySurface;\\r\\n    LPDDHALSURFCB_FLIP          Flip;\\r\\n    LPDDHALSURFCB_SETCLIPLIST       SetClipList;\\r\\n    LPDDHALSURFCB_LOCK          Lock;\\r\\n    LPDDHALSURFCB_UNLOCK        Unlock;\\r\\n    LPDDHALSURFCB_BLT           Blt;\\r\\n    LPDDHALSURFCB_SETCOLORKEY       SetColorKey;\\r\\n    LPDDHALSURFCB_ADDATTACHEDSURFACE    AddAttachedSurface;\\r\\n    LPDDHALSURFCB_GETBLTSTATUS      GetBltStatus;\\r\\n    LPDDHALSURFCB_GETFLIPSTATUS     GetFlipStatus;\\r\\n    LPDDHALSURFCB_UPDATEOVERLAY     UpdateOverlay;\\r\\n    LPDDHALSURFCB_SETOVERLAYPOSITION    SetOverlayPosition;\\r\\n    LPVOID              reserved4;\\r\\n    LPDDHALSURFCB_SETPALETTE        SetPalette;\\r\\n} DDHAL_DDSURFACECALLBACKS;"},"_DDHAL_DDVIDEOPORTCALLBACKS":{"comment":"","exp":"","file":"ddrawi.h","line":921,"type":"Struct","value":"typedef struct _DDHAL_DDVIDEOPORTCALLBACKS\\r\\n{\\r\\n    DWORD               dwSize;\\r\\n    DWORD               dwFlags;\\r\\n    LPDDHALVPORTCB_CANCREATEVIDEOPORT   CanCreateVideoPort;\\r\\n    LPDDHALVPORTCB_CREATEVIDEOPORT      CreateVideoPort;\\r\\n    LPDDHALVPORTCB_FLIP                 FlipVideoPort;\\r\\n    LPDDHALVPORTCB_GETBANDWIDTH         GetVideoPortBandwidth;\\r\\n    LPDDHALVPORTCB_GETINPUTFORMATS      GetVideoPortInputFormats;\\r\\n    LPDDHALVPORTCB_GETOUTPUTFORMATS     GetVideoPortOutputFormats;\\r\\n    LPVOID              lpReserved1;\\r\\n    LPDDHALVPORTCB_GETFIELD             GetVideoPortField;\\r\\n    LPDDHALVPORTCB_GETLINE              GetVideoPortLine;\\r\\n    LPDDHALVPORTCB_GETVPORTCONNECT      GetVideoPortConnectInfo;\\r\\n    LPDDHALVPORTCB_DESTROYVPORT         DestroyVideoPort;\\r\\n    LPDDHALVPORTCB_GETFLIPSTATUS        GetVideoPortFlipStatus;\\r\\n    LPDDHALVPORTCB_UPDATE               UpdateVideoPort;\\r\\n    LPDDHALVPORTCB_WAITFORSYNC          WaitForVideoPortSync;\\r\\n    LPDDHALVPORTCB_GETSIGNALSTATUS      GetVideoSignalStatus;\\r\\n    LPDDHALVPORTCB_COLORCONTROL         ColorControl;\\r\\n} DDHAL_DDVIDEOPORTCALLBACKS;"},"_DDHAL_DESTROYDDLOCALDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2752,"type":"Struct","value":"typedef struct _DDHAL_DESTROYDDLOCALDATA\\r\\n{\\r\\n    DWORD dwFlags;\\r\\n    LPDDRAWI_DIRECTDRAW_LCL pDDLcl;\\r\\n    HRESULT  ddRVal;\\r\\n} DDHAL_DESTROYDDLOCALDATA;"},"_DDHAL_DESTROYDRIVERDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2340,"type":"Struct","value":"typedef struct _DDHAL_DESTROYDRIVERDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;   \/\/ driver struct\\r\\n    HRESULT                     ddRVal; \/\/ return value\\r\\n    LPDDHAL_DESTROYDRIVER       DestroyDriver;  \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_DESTROYDRIVERDATA;"},"_DDHAL_DESTROYMOCOMPDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2970,"type":"Struct","value":"typedef struct _DDHAL_DESTROYMOCOMPDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;\\r\\n    LPDDRAWI_DDMOTIONCOMP_LCL   lpMoComp;\\r\\n    HRESULT                     ddRVal;\\r\\n    LPDDHALMOCOMPCB_DESTROY     DestroyMoComp;\\r\\n} DDHAL_DESTROYMOCOMPDATA;"},"_DDHAL_DESTROYPALETTEDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2253,"type":"Struct","value":"typedef struct _DDHAL_DESTROYPALETTEDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       \/\/ driver struct\\r\\n    LPDDRAWI_DDRAWPALETTE_GBL   lpDDPalette;    \/\/ palette struct\\r\\n    HRESULT                     ddRVal;     \/\/ return value\\r\\n    LPDDHALPALCB_DESTROYPALETTE DestroyPalette; \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_DESTROYPALETTEDATA;"},"_DDHAL_DESTROYSURFACEDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2176,"type":"Struct","value":"typedef struct _DDHAL_DESTROYSURFACEDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       \/\/ driver struct\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    \/\/ surface struct\\r\\n    HRESULT                     ddRVal;     \/\/ return value\\r\\n    LPDDHALSURFCB_DESTROYSURFACE DestroySurface;\/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_DESTROYSURFACEDATA;"},"_DDHAL_DESTROYVPORTDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2534,"type":"Struct","value":"typedef struct _DDHAL_DESTROYVPORTDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           \/\/ driver struct\\r\\n    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        \/\/ Video port object\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    LPDDHALVPORTCB_DESTROYVPORT DestroyVideoPort;   \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_DESTROYVPORTDATA;"},"_DDHAL_DRVSETCOLORKEYDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2363,"type":"Struct","value":"typedef struct _DDHAL_DRVSETCOLORKEYDATA\\r\\n{\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    \/\/ surface struct\\r\\n    DWORD                       dwFlags;    \/\/ flags\\r\\n    DDCOLORKEY                  ckNew;      \/\/ new color key\\r\\n    HRESULT                     ddRVal;     \/\/ return value\\r\\n    LPDDHAL_SETCOLORKEY         SetColorKey;    \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_DRVSETCOLORKEYDATA;"},"_DDHAL_ENDMOCOMPFRAMEDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2914,"type":"Struct","value":"typedef struct _DDHAL_ENDMOCOMPFRAMEDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;\\r\\n    LPDDRAWI_DDMOTIONCOMP_LCL   lpMoComp;\\r\\n    LPVOID                      lpInputData;\\r\\n    DWORD                       dwInputDataSize;\\r\\n    HRESULT                     ddRVal;\\r\\n    LPDDHALMOCOMPCB_ENDFRAME    EndMoCompFrame;\\r\\n} DDHAL_ENDMOCOMPFRAMEDATA;"},"_DDHAL_FLIPDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2161,"type":"Struct","value":"typedef struct _DDHAL_FLIPDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       \/\/ driver struct\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpSurfCurr; \/\/ current surface\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpSurfTarg; \/\/ target surface (to flip to)\\r\\n    DWORD                       dwFlags;    \/\/ flags\\r\\n    HRESULT                     ddRVal;     \/\/ return value\\r\\n    LPDDHALSURFCB_FLIP          Flip;       \/\/ PRIVATE: ptr to callback\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpSurfCurrLeft; \/\/ current surface\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpSurfTargLeft; \/\/ target surface (to flip to)\\r\\n} DDHAL_FLIPDATA;"},"_DDHAL_FLIPTOGDISURFACEDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2398,"type":"Struct","value":"typedef struct _DDHAL_FLIPTOGDISURFACEDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;         \/\/ driver struct\\r\\n    DWORD                       dwToGDI;          \/\/ TRUE if flipping to the GDI surface, FALSE if flipping away\\r\\n    DWORD                       dwReserved;       \/\/ reserved for future use\\r\\n    HRESULT            ddRVal;       \/\/ return value\\r\\n    LPDDHAL_FLIPTOGDISURFACE    FlipToGDISurface; \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_FLIPTOGDISURFACEDATA;"},"_DDHAL_FLIPVPORTDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2439,"type":"Struct","value":"typedef struct _DDHAL_FLIPVPORTDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           \/\/ driver struct\\r\\n    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        \/\/ Video port object\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpSurfCurr;     \/\/ current surface\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpSurfTarg;     \/\/ target surface\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    LPDDHALVPORTCB_FLIP         FlipVideoPort;  \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_FLIPVPORTDATA;"},"_DDHAL_GETAVAILDRIVERMEMORYDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2673,"type":"Struct","value":"typedef struct _DDHAL_GETAVAILDRIVERMEMORYDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL lpDD;        \/\/ driver struct\\r\\n    DDSCAPS                 DDSCaps;     \/\/ caps for type of surface memory\\r\\n    DWORD                   dwTotal;     \/\/ total memory for this kind of surface\\r\\n    DWORD                   dwFree;      \/\/ free memory for this kind of surface\\r\\n    HRESULT                 ddRVal;      \/\/ return value\\r\\n    LPDDHAL_GETAVAILDRIVERMEMORY   GetAvailDriverMemory; \/\/ PRIVATE: ptr to callback\\r\\n    DDSCAPSEX               ddsCapsEx;       \/\/ Added in V6. Driver should check DDVERSION info\\r\\n                                                 \/\/ to see if this field is present.\\r\\n} DDHAL_GETAVAILDRIVERMEMORYDATA;"},"_DDHAL_GETBLTSTATUSDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2223,"type":"Struct","value":"typedef struct _DDHAL_GETBLTSTATUSDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       \/\/ driver struct\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    \/\/ surface struct\\r\\n    DWORD                       dwFlags;    \/\/ flags\\r\\n    HRESULT                     ddRVal;     \/\/ return value\\r\\n    LPDDHALSURFCB_GETBLTSTATUS  GetBltStatus;   \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_GETBLTSTATUSDATA;"},"_DDHAL_GETDRIVERINFODATA":{"comment":"","exp":"","file":"ddrawi.h","line":2644,"type":"Struct","value":"typedef struct _DDHAL_GETDRIVERINFODATA {\\r\\n    \/\/ Input fields filled in by DirectDraw\\r\\n    DWORD       dwSize;         \/\/ Size of this structure\\r\\n    DWORD       dwFlags;        \/\/ Flags\\r\\n    GUID        guidInfo;       \/\/ GUID that DirectX is querying for\\r\\n    DWORD       dwExpectedSize; \/\/ Size of callbacks structure expected by DirectDraw.\\r\\n    LPVOID      lpvData;        \/\/ Buffer that will receive the requested data\\r\\n    \/\/ Output fields filled in by driver\\r\\n    DWORD       dwActualSize;   \/\/ Size of callbacks structure expected by driver\\r\\n    HRESULT     ddRVal;         \/\/ Return value from driver\\r\\n    \/\/ Input field: Context information for driver\\r\\n    \/\/ On Win95, this is the dwReserved3 field of the DIRECTDRAW_GBL\\r\\n    \/\/ On NT, this is the hDD field of DIRECTDRAW_GBL\\r\\n    ULONG_PTR   dwContext;  \/\/ Context Information\\r\\n} DDHAL_GETDRIVERINFODATA;"},"_DDHAL_GETDRIVERSTATEDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2737,"type":"Struct","value":"typedef struct _DDHAL_GETDRIVERSTATEDATA {\\r\\n    DWORD                       dwFlags;        \/\/ Flags to indicate the data\\r\\n                                                \/\/ required\\r\\n    union\\r\\n    {\\r\\n        \/\/ LPDDRAWI_DIRECTDRAW_GBL     lpDD;           \/\/ driver struct\\r\\n        ULONG_PTR               dwhContext;     \/\/ d3d context\\r\\n    };\\r\\n    LPDWORD                     lpdwStates;     \/\/ ptr to the state data\\r\\n                                                \/\/ to be filled in by the\\r\\n                                                \/\/ driver\\r\\n    DWORD                       dwLength;\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n} DDHAL_GETDRIVERSTATEDATA;"},"_DDHAL_GETFLIPSTATUSDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2235,"type":"Struct","value":"typedef struct _DDHAL_GETFLIPSTATUSDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       \/\/ driver struct\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    \/\/ surface struct\\r\\n    DWORD                       dwFlags;    \/\/ flags\\r\\n    HRESULT                     ddRVal;     \/\/ return value\\r\\n    LPDDHALSURFCB_GETFLIPSTATUS GetFlipStatus;  \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_GETFLIPSTATUSDATA;"},"_DDHAL_GETHEAPALIGNMENTDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2702,"type":"Struct","value":"typedef struct _DDHAL_GETHEAPALIGNMENTDATA\\r\\n{\\r\\n    ULONG_PTR                  dwInstance;         \/\/ driver context as returned from 32-bit driver init routine\\r\\n    DWORD                      dwHeap;             \/\/ heap index passed by DirectDraw\\r\\n    HRESULT                    ddRVal;             \/\/ return value\\r\\n    LPDDHAL_GETHEAPALIGNMENT   GetHeapAlignment;   \/\/ PRIVATE: ptr to callback.\\r\\n    HEAPALIGNMENT              Alignment;          \/\/ Filled in by driver. Defined in dmemmgr.h\\r\\n} DDHAL_GETHEAPALIGNMENTDATA;"},"_DDHAL_GETINTERNALMOCOMPDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2883,"type":"Struct","value":"typedef struct _DDHAL_GETINTERNALMOCOMPDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;\\r\\n    LPGUID                      lpGuid;\\r\\n    DWORD                       dwWidth;            \/\/ [in]   width of uncompressed data\\r\\n    DWORD                       dwHeight;           \/\/ [in]   height of uncompressed data\\r\\n    DDPIXELFORMAT               ddPixelFormat;      \/\/ [in]   pixel-format of uncompressed data\\r\\n    DWORD                       dwScratchMemAlloc;  \/\/ [out]  amount of scratch memory will the hal allocate for its private use\\r\\n    HRESULT                     ddRVal;             \/\/ [out]\\r\\n    LPDDHALMOCOMPCB_GETINTERNALINFO  GetInternalMoCompInfo;\\r\\n} DDHAL_GETINTERNALMOCOMPDATA;"},"_DDHAL_GETMOCOMPCOMPBUFFDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2867,"type":"Struct","value":"typedef struct _DDHAL_GETMOCOMPCOMPBUFFDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;\\r\\n    LPGUID                      lpGuid;\\r\\n    DWORD                       dwWidth;            \/\/ [in]   width of uncompressed data\\r\\n    DWORD                       dwHeight;           \/\/ [in]   height of uncompressed data\\r\\n    DDPIXELFORMAT               ddPixelFormat;      \/\/ [in]   pixel-format of uncompressed data\\r\\n    DWORD                       dwNumTypesCompBuffs;\/\/ [in\/out] number of memory types required for comp buffers\\r\\n    LPDDMCCOMPBUFFERINFO        lpCompBuffInfo;     \/\/ [in]   driver supplied info regarding comp buffers (allocated by client)\\r\\n    HRESULT                     ddRVal;             \/\/ [out]\\r\\n    LPDDHALMOCOMPCB_GETCOMPBUFFINFO  GetMoCompBuffInfo;\\r\\n} DDHAL_GETMOCOMPCOMPBUFFDATA;"},"_DDHAL_GETMOCOMPFORMATSDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2826,"type":"Struct","value":"typedef struct _DDHAL_GETMOCOMPFORMATSDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL lpDD;\\r\\n    LPGUID              lpGuid;\\r\\n    DWORD               dwNumFormats;\\r\\n    LPDDPIXELFORMAT     lpFormats;\\r\\n    HRESULT             ddRVal;\\r\\n    LPDDHALMOCOMPCB_GETFORMATS   GetMoCompFormats;\\r\\n} DDHAL_GETMOCOMPFORMATSDATA;"},"_DDHAL_GETMOCOMPGUIDSDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2814,"type":"Struct","value":"typedef struct _DDHAL_GETMOCOMPGUIDSDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL lpDD;\\r\\n    DWORD               dwNumGuids;\\r\\n    LPGUID              lpGuids;\\r\\n    HRESULT             ddRVal;\\r\\n    LPDDHALMOCOMPCB_GETGUIDS GetMoCompGuids;\\r\\n} DDHAL_GETMOCOMPGUIDSDATA;"},"_DDHAL_GETSCANLINEDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2375,"type":"Struct","value":"typedef struct _DDHAL_GETSCANLINEDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       \/\/ driver struct\\r\\n    DWORD                       dwScanLine; \/\/ returned scan line\\r\\n    HRESULT                     ddRVal;     \/\/ return value\\r\\n    LPDDHAL_GETSCANLINE         GetScanLine;    \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_GETSCANLINEDATA;"},"_DDHAL_GETVPORTBANDWIDTHDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2452,"type":"Struct","value":"typedef struct _DDHAL_GETVPORTBANDWIDTHDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           \/\/ driver struct\\r\\n    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        \/\/ Video port object\\r\\n    LPDDPIXELFORMAT             lpddpfFormat;       \/\/ Format for bandwidth\\r\\n    DWORD                       dwWidth;\\r\\n    DWORD                       dwHeight;\\r\\n    DWORD                       dwFlags;        \/\/ Prescale factor for bandwidth\\r\\n    LPDDVIDEOPORTBANDWIDTH      lpBandwidth;        \/\/ Returned bandwidth parameters\\r\\n    HRESULT                     ddRVal;             \/\/ return value\\r\\n    LPDDHALVPORTCB_GETBANDWIDTH GetVideoPortBandwidth;  \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_GETVPORTBANDWIDTHDATA;"},"_DDHAL_GETVPORTCONNECTDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2521,"type":"Struct","value":"typedef struct _DDHAL_GETVPORTCONNECTDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           \/\/ driver struct\\r\\n    DWORD                       dwPortId;       \/\/ ID of desired video port\\r\\n    LPDDVIDEOPORTCONNECT        lpConnect;      \/\/ Array of DDVIDEOPORTCONNECT structures\\r\\n    DWORD                       dwNumEntries;       \/\/ # of structures in array\\r\\n    HRESULT                     ddRVal;             \/\/ return value\\r\\n    LPDDHALVPORTCB_GETVPORTCONNECT GetVideoPortConnectInfo; \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_GETVPORTCONNECTDATA;"},"_DDHAL_GETVPORTFIELDDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2497,"type":"Struct","value":"typedef struct _DDHAL_GETVPORTFIELDDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           \/\/ driver struct\\r\\n    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        \/\/ Video port object\\r\\n    BOOL                        bField;         \/\/ TRUE if even\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    LPDDHALVPORTCB_GETFIELD     GetVideoPortField;  \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_GETVPORTFIELDDATA;"},"_DDHAL_GETVPORTFLIPSTATUSDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2545,"type":"Struct","value":"typedef struct _DDHAL_GETVPORTFLIPSTATUSDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           \/\/ driver struct\\r\\n    FLATPTR                     fpSurface;      \/\/ surface struct\\r\\n    HRESULT                     ddRVal;             \/\/ return value\\r\\n    LPDDHALVPORTCB_GETFLIPSTATUS GetVideoPortFlipStatus; \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_GETVPORTFLIPSTATUSDATA;"},"_DDHAL_GETVPORTINPUTFORMATDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2468,"type":"Struct","value":"typedef struct _DDHAL_GETVPORTINPUTFORMATDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           \/\/ driver struct\\r\\n    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        \/\/ Video port object\\r\\n    DWORD                       dwFlags;        \/\/ VBI, regular, or both\\r\\n    LPDDPIXELFORMAT             lpddpfFormat;       \/\/ Array of formats\\r\\n    DWORD                       dwNumFormats;       \/\/ # of formats in array\\r\\n    HRESULT                     ddRVal;             \/\/ return value\\r\\n    LPDDHALVPORTCB_GETINPUTFORMATS GetVideoPortInputFormats; \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_GETVPORTINPUTFORMATDATA;"},"_DDHAL_GETVPORTLINEDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2509,"type":"Struct","value":"typedef struct _DDHAL_GETVPORTLINEDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           \/\/ driver struct\\r\\n    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        \/\/ Video port object\\r\\n    DWORD                       dwLine;         \/\/ Current line counter\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    LPDDHALVPORTCB_GETLINE      GetVideoPortLine;   \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_GETVPORTLINEDATA;"},"_DDHAL_GETVPORTOUTPUTFORMATDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2482,"type":"Struct","value":"typedef struct _DDHAL_GETVPORTOUTPUTFORMATDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           \/\/ driver struct\\r\\n    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        \/\/ Video port object\\r\\n    DWORD                       dwFlags;        \/\/ VBI, regular, or both\\r\\n    LPDDPIXELFORMAT             lpddpfInputFormat;  \/\/ Input format\\r\\n    LPDDPIXELFORMAT             lpddpfOutputFormats;    \/\/ Array of output formats\\r\\n    DWORD                       dwNumFormats;       \/\/ # of formats in array\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    LPDDHALVPORTCB_GETOUTPUTFORMATS GetVideoPortOutputFormats; \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_GETVPORTOUTPUTFORMATDATA;"},"_DDHAL_GETVPORTSIGNALDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2591,"type":"Struct","value":"typedef struct _DDHAL_GETVPORTSIGNALDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           \/\/ driver struct\\r\\n    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        \/\/ Video port object\\r\\n    DWORD                       dwStatus;       \/\/ Video signal status\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    LPDDHALVPORTCB_GETSIGNALSTATUS GetVideoSignalStatus;\/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_GETVPORTSIGNALDATA;"},"_DDHAL_LOCKDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2093,"type":"Struct","value":"typedef struct _DDHAL_LOCKDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       \/\/ driver struct\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    \/\/ surface struct\\r\\n    DWORD                       bHasRect;   \/\/ rArea is valid\\r\\n    RECTL                       rArea;      \/\/ area being locked\\r\\n    LPVOID                      lpSurfData; \/\/ pointer to screen memory (return value)\\r\\n    HRESULT                     ddRVal;     \/\/ return value\\r\\n    LPDDHALSURFCB_LOCK          Lock;           \/\/ PRIVATE: ptr to callback\\r\\n    DWORD                       dwFlags;        \/\/ DDLOCK flags\\r\\n} DDHAL_LOCKDATA;"},"_DDHAL_QUERYMOCOMPSTATUSDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2955,"type":"Struct","value":"typedef struct _DDHAL_QUERYMOCOMPSTATUSDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;\\r\\n    LPDDRAWI_DDMOTIONCOMP_LCL   lpMoComp;\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpSurface;      \/\/ [in]  Surface being queried\\r\\n    DWORD                       dwFlags;        \/\/ [in]  DDMCQUERY_XXX falgs\\r\\n    HRESULT                     ddRVal;         \/\/ [out]\\r\\n    LPDDHALMOCOMPCB_QUERYSTATUS QueryMoCompStatus;\\r\\n} DDHAL_QUERYMOCOMPSTATUSDATA;"},"_DDHAL_RENDERMOCOMPDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2937,"type":"Struct","value":"typedef struct _DDHAL_RENDERMOCOMPDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;\\r\\n    LPDDRAWI_DDMOTIONCOMP_LCL   lpMoComp;\\r\\n    DWORD                       dwNumBuffers;   \/\/ [in]  Number of entries in the lpMacroBlockInfo array\\r\\n    LPDDMCBUFFERINFO            lpBufferInfo;   \/\/ [in]  Surfaces containing macro block info\\r\\n    DWORD                       dwFunction;     \/\/ [in]  Function\\r\\n    LPVOID                      lpInputData;\\r\\n    DWORD                       dwInputDataSize;\\r\\n    LPVOID                      lpOutputData;\\r\\n    DWORD                       dwOutputDataSize;\\r\\n    HRESULT                     ddRVal;         \/\/ [out]\\r\\n    LPDDHALMOCOMPCB_RENDER      RenderMoComp;\\r\\n} DDHAL_RENDERMOCOMPDATA;"},"_DDHAL_SETCLIPLISTDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2187,"type":"Struct","value":"typedef struct _DDHAL_SETCLIPLISTDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       \/\/ driver struct\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    \/\/ surface struct\\r\\n    HRESULT                     ddRVal;     \/\/ return value\\r\\n    LPDDHALSURFCB_SETCLIPLIST   SetClipList;    \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_SETCLIPLISTDATA;"},"_DDHAL_SETCOLORKEYDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2210,"type":"Struct","value":"typedef struct _DDHAL_SETCOLORKEYDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       \/\/ driver struct\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    \/\/ surface struct\\r\\n    DWORD                       dwFlags;    \/\/ flags\\r\\n    DDCOLORKEY                  ckNew;      \/\/ new color key\\r\\n    HRESULT                     ddRVal;     \/\/ return value\\r\\n    LPDDHALSURFCB_SETCOLORKEY   SetColorKey;    \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_SETCOLORKEYDATA;"},"_DDHAL_SETENTRIESDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2264,"type":"Struct","value":"typedef struct _DDHAL_SETENTRIESDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       \/\/ driver struct\\r\\n    LPDDRAWI_DDRAWPALETTE_GBL   lpDDPalette;    \/\/ palette struct\\r\\n    DWORD                       dwBase;     \/\/ base palette index\\r\\n    DWORD                       dwNumEntries;   \/\/ number of palette entries\\r\\n    LPPALETTEENTRY              lpEntries;  \/\/ color table\\r\\n    HRESULT                     ddRVal;     \/\/ return value\\r\\n    LPDDHALPALCB_SETENTRIES     SetEntries; \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_SETENTRIESDATA;"},"_DDHAL_SETEXCLUSIVEMODEDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2386,"type":"Struct","value":"typedef struct _DDHAL_SETEXCLUSIVEMODEDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;             \/\/ driver struct\\r\\n    DWORD                       dwEnterExcl;      \/\/ TRUE if entering exclusive mode, FALSE is leaving\\r\\n    DWORD                       dwReserved;       \/\/ reserved for future use\\r\\n    HRESULT                     ddRVal;           \/\/ return value\\r\\n    LPDDHAL_SETEXCLUSIVEMODE    SetExclusiveMode; \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_SETEXCLUSIVEMODEDATA;"},"_DDHAL_SETMODEDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2350,"type":"Struct","value":"typedef struct _DDHAL_SETMODEDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       \/\/ driver struct\\r\\n    DWORD                       dwModeIndex;    \/\/ new mode\\r\\n    HRESULT                     ddRVal;     \/\/ return value\\r\\n    LPDDHAL_SETMODE             SetMode;    \/\/ PRIVATE: ptr to callback\\r\\n    BOOL                        inexcl;         \/\/ in exclusive mode\\r\\n    BOOL                        useRefreshRate; \/\/ use the refresh rate data in the mode info\\r\\n} DDHAL_SETMODEDATA;"},"_DDHAL_SETOVERLAYPOSITIONDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2135,"type":"Struct","value":"typedef struct _DDHAL_SETOVERLAYPOSITIONDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       \/\/ driver struct\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSrcSurface; \/\/ src surface\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpDDDestSurface;\/\/ dest surface\\r\\n    LONG                        lXPos;      \/\/ x position\\r\\n    LONG                        lYPos;      \/\/ y position\\r\\n    HRESULT                     ddRVal;     \/\/ return value\\r\\n    LPDDHALSURFCB_SETOVERLAYPOSITION SetOverlayPosition; \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_SETOVERLAYPOSITIONDATA;"},"_DDHAL_SETPALETTEDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2148,"type":"Struct","value":"typedef struct _DDHAL_SETPALETTEDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       \/\/ driver struct\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    \/\/ surface struct\\r\\n    LPDDRAWI_DDRAWPALETTE_GBL   lpDDPalette;    \/\/ palette to set to surface\\r\\n    HRESULT                     ddRVal;     \/\/ return value\\r\\n    LPDDHALSURFCB_SETPALETTE    SetPalette; \/\/ PRIVATE: ptr to callback\\r\\n    BOOL                        Attach;         \/\/ attach this palette?\\r\\n} DDHAL_SETPALETTEDATA;"},"_DDHAL_SYNCSURFACEDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2768,"type":"Struct","value":"typedef struct _DDHAL_SYNCSURFACEDATA\\r\\n{\\r\\n    DWORD                       dwSize;         \/\/ Size of this structure\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;   \/\/ driver struct\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    \/\/ Surface to sync with\\r\\n    DWORD                       dwSurfaceOffset;    \/\/ Offset in frame buffer of surface\\r\\n    ULONG_PTR                   fpLockPtr;      \/\/ Surface lock ptr\\r\\n    LONG                        lPitch;         \/\/ Surface pitch\\r\\n    DWORD                       dwOverlayOffset;    \/\/ Added to dwSurfaceOffset for origin, clipping, etc.\\r\\n    DWORD                       dwOverlaySrcWidth;  \/\/ Src width of overlay\\r\\n    DWORD                       dwOverlaySrcHeight; \/\/ Src height of overlay\\r\\n    DWORD                       dwOverlayDestWidth; \/\/ Dest width of overlay\\r\\n    DWORD                       dwOverlayDestHeight;    \/\/ Dest height of overlay\\r\\n    ULONG_PTR                           dwDriverReserved1;  \/\/ Reserved for the HAL\\r\\n    ULONG_PTR                           dwDriverReserved2;  \/\/ Reserved for the HAL\\r\\n    ULONG_PTR                           dwDriverReserved3;  \/\/ Reserved for the HAL\\r\\n    HRESULT                     ddRVal;\\r\\n} DDHAL_SYNCSURFACEDATA;"},"_DDHAL_SYNCVIDEOPORTDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2790,"type":"Struct","value":"typedef struct _DDHAL_SYNCVIDEOPORTDATA\\r\\n{\\r\\n    DWORD                       dwSize;         \/\/ Size of this structure\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;       \/\/ driver struct\\r\\n    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;    \/\/ Video port object\\r\\n    DWORD                       dwOriginOffset;     \/\/ Start address relative to surface\\r\\n    DWORD                       dwHeight;       \/\/ Height of total video region (per field)\\r\\n    DWORD                       dwVBIHeight;        \/\/ Height of VBI region (per field)\\r\\n    ULONG_PTR                   dwDriverReserved1;  \/\/ Reserved for the HAL\\r\\n    ULONG_PTR                   dwDriverReserved2;  \/\/ Reserved for the HAL\\r\\n    ULONG_PTR                   dwDriverReserved3;  \/\/ Reserved for the HAL\\r\\n    HRESULT                     ddRVal;\\r\\n} DDHAL_SYNCVIDEOPORTDATA;"},"_DDHAL_UNLOCKDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2108,"type":"Struct","value":"typedef struct _DDHAL_UNLOCKDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       \/\/ driver struct\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSurface;    \/\/ surface struct\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    LPDDHALSURFCB_UNLOCK        Unlock;     \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_UNLOCKDATA;"},"_DDHAL_UPDATENONLOCALHEAPDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2688,"type":"Struct","value":"typedef struct _DDHAL_UPDATENONLOCALHEAPDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL    lpDD;               \/\/ driver struct\\r\\n    DWORD                      dwHeap;             \/\/ heap index\\r\\n    FLATPTR                    fpGARTLin;          \/\/ linear GART address of start of heap\\r\\n    FLATPTR                    fpGARTDev;          \/\/ high physical GART address of start of heap\\r\\n    ULONG_PTR                  ulPolicyMaxBytes;   \/\/ maximum amount of AGP memory to use\\r\\n    HRESULT                    ddRVal;             \/\/ return value\\r\\n    LPDDHAL_UPDATENONLOCALHEAP UpdateNonLocalHeap; \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_UPDATENONLOCALHEAPDATA;"},"_DDHAL_UPDATEOVERLAYDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2119,"type":"Struct","value":"typedef struct _DDHAL_UPDATEOVERLAYDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       \/\/ driver struct\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpDDDestSurface;\/\/ dest surface\\r\\n    RECTL                       rDest;      \/\/ dest rect\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpDDSrcSurface; \/\/ src surface\\r\\n    RECTL                       rSrc;       \/\/ src rect\\r\\n    DWORD                       dwFlags;    \/\/ flags\\r\\n    DDOVERLAYFX                 overlayFX;  \/\/ overlay FX\\r\\n    HRESULT                     ddRVal;     \/\/ return value\\r\\n    LPDDHALSURFCB_UPDATEOVERLAY UpdateOverlay;  \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_UPDATEOVERLAYDATA;"},"_DDHAL_UPDATEVPORTDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2556,"type":"Struct","value":"typedef struct _DDHAL_UPDATEVPORTDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           \/\/ driver struct\\r\\n    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        \/\/ Video port object\\r\\n    LPDDRAWI_DDRAWSURFACE_INT   *lplpDDSurface;     \/\/ surface struct\\r\\n    LPDDRAWI_DDRAWSURFACE_INT   *lplpDDVBISurface;  \/\/ VBI surface structure\\r\\n    LPDDVIDEOPORTINFO           lpVideoInfo;        \/\/ Video information\\r\\n    DWORD                       dwFlags;        \/\/ DDRAWI_VPORTSTART, DDRAWI_VPORTSTOP, DDRAWI_VPORTUPDATE\\r\\n    DWORD                       dwNumAutoflip;      \/\/ # of autoflip surfaces. If > 1, lpDDSurface and lpDDVBISurface are arrays.\\r\\n    DWORD                       dwNumVBIAutoflip;   \/\/ # of autoflip surfaces. If > 1, lpDDSurface and lpDDVBISurface are arrays.\\r\\n    HRESULT                     ddRVal;             \/\/ return value\\r\\n    LPDDHALVPORTCB_UPDATE       UpdateVideoPort;    \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_UPDATEVPORTDATA;"},"_DDHAL_VPORTCOLORDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2603,"type":"Struct","value":"typedef struct _DDHAL_VPORTCOLORDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           \/\/ driver struct\\r\\n    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        \/\/ Video port object\\r\\n    DWORD                       dwFlags;        \/\/ Video signal status\\r\\n    LPDDCOLORCONTROL            lpColorData;\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    LPDDHALVPORTCB_COLORCONTROL ColorControl;       \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_VPORTCOLORDATA;"},"_DDHAL_WAITFORVERTICALBLANKDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2327,"type":"Struct","value":"typedef struct _DDHAL_WAITFORVERTICALBLANKDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpDD;       \/\/ driver struct\\r\\n    DWORD                       dwFlags;    \/\/ flags\\r\\n    DWORD                       bIsInVB;    \/\/ is in vertical blank\\r\\n    ULONG_PTR                   hEvent;     \/\/ event\\r\\n    HRESULT                     ddRVal;     \/\/ return value\\r\\n    LPDDHAL_WAITFORVERTICALBLANK    WaitForVerticalBlank; \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_WAITFORVERTICALBLANKDATA;"},"_DDHAL_WAITFORVPORTSYNCDATA":{"comment":"","exp":"","file":"ddrawi.h","line":2577,"type":"Struct","value":"typedef struct _DDHAL_WAITFORVPORTSYNCDATA\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;           \/\/ driver struct\\r\\n    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        \/\/ Video port object\\r\\n    DWORD                       dwFlags;        \/\/ DDVPEVENT_XXXX\\r\\n    DWORD                       dwLine;\\r\\n    DWORD                       dwTimeOut;              \/\/ Max time to wait before returning\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    LPDDHALVPORTCB_WAITFORSYNC  WaitForVideoPortSync;   \/\/ PRIVATE: ptr to callback\\r\\n} DDHAL_WAITFORVPORTSYNCDATA;"},"_DDKERNELCAPS":{"comment":"","exp":"","file":"ddkernel.h","line":113,"type":"Struct","value":"typedef struct _DDKERNELCAPS\\r\\n{\\r\\n    DWORD dwSize;\\t\\t\\t\/\/ size of the DDKERNELCAPS structure\\r\\n    DWORD dwCaps;                       \/\/ Contains the DDKERNELCAPS_XXX flags\\r\\n    DWORD dwIRQCaps;                    \/\/ Contains the DDIRQ_XXX flags\\r\\n} DDKERNELCAPS, FAR *LPDDKERNELCAPS;"},"_DDLOCKIN":{"comment":"","exp":"","file":"ddkmapi.h","line":251,"type":"Struct","value":"typedef struct _DDLOCKIN\\r\\n    {\\r\\n\\tHANDLE\\thDirectDraw;\\r\\n\\tHANDLE\\thSurface;\\r\\n    } DDLOCKIN, FAR *LPDDLOCKIN;"},"_DDLOCKININFO":{"comment":"","exp":"","file":"dxmini.h","line":215,"type":"Struct","value":"typedef struct _DDLOCKININFO {\\r\\n    LPDDSURFACEDATA     lpSurfaceData;\\r\\n} DDLOCKININFO, *PDDLOCKININFO;"},"_DDLOCKOUT":{"comment":"","exp":"","file":"ddkmapi.h","line":257,"type":"Struct","value":"typedef struct _DDLOCKOUT\\r\\n    {\\r\\n\\tDWORD\\tddRVal;\\r\\n\\tDWORD\\tdwSurfHeight;\\r\\n\\tDWORD\\tdwSurfWidth;\\r\\n\\tLONG\\tlSurfPitch;\\r\\n\\tPVOID\\tlpSurface;\\r\\n\\tDWORD\\tSurfaceCaps;\\r\\n\\tDWORD\\tdwFormatFlags;\\r\\n\\tDWORD\\tdwFormatFourCC;\\r\\n\\tDWORD\\tdwFormatBitCount;\\r\\n\\tunion\\r\\n\\t{\\r\\n\\t    DWORD\\tdwRBitMask;\\r\\n\\t    DWORD\\tdwYBitMask;\\r\\n    \\t};\\r\\n    \\tunion\\r\\n    \\t{\\r\\n\\t    DWORD\\tdwGBitMask;\\r\\n\\t    DWORD\\tdwUBitMask;\\r\\n\\t};\\r\\n\\tunion\\r\\n\\t{\\r\\n\\t    DWORD\\tdwBBitMask;\\r\\n\\t    DWORD\\tdwVBitMask;\\r\\n\\t};\\r\\n    } DDLOCKOUT, FAR *LPDDLOCKOUT;"},"_DDLOCKOUTINFO":{"comment":"","exp":"","file":"dxmini.h","line":220,"type":"Struct","value":"typedef struct _DDLOCKOUTINFO {\\r\\n    ULONG_PTR            dwSurfacePtr;\\r\\n} DDLOCKOUTINFO, *PDDLOCKOUTINFO;"},"_DDMCBUFFERINFO":{"comment":"","exp":"","file":"ddrawi.h","line":2927,"type":"Struct","value":"typedef struct _DDMCBUFFERINFO\\r\\n{\\r\\n    DWORD                       dwSize;         \/\/ [in]    size of the struct\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpCompSurface;  \/\/ [in]    pointer to buffer containing compressed data\\r\\n    DWORD                       dwDataOffset;   \/\/ [in]    offset of relevant data from the beginning of buffer\\r\\n    DWORD                       dwDataSize;     \/\/ [in]    size of relevant data\\r\\n    LPVOID                      lpPrivate;      \/\/ Reserved for DirectDraw;\\r\\n} DDMCBUFFERINFO, *LPDDMCBUFFERINFO;"},"_DDMCCOMPBUFFERINFO":{"comment":"","exp":"","file":"ddrawi.h","line":2856,"type":"Struct","value":"typedef struct _DDMCCOMPBUFFERINFO\\r\\n{\\r\\n    DWORD                       dwSize;             \/\/ [in]   size of the struct\\r\\n    DWORD                       dwNumCompBuffers;   \/\/ [out]  number of buffers required for compressed data\\r\\n    DWORD                       dwWidthToCreate;    \/\/ [out]    Width of surface to create\\r\\n    DWORD                       dwHeightToCreate;   \/\/ [out]    Height of surface to create\\r\\n    DWORD                       dwBytesToAllocate;  \/\/ [out]    Total number of bytes used by each surface\\r\\n    DDSCAPS2                    ddCompCaps;         \/\/ [out]    caps to create surfaces to store compressed data\\r\\n    DDPIXELFORMAT               ddPixelFormat;      \/\/ [out]  format to create surfaces to store compressed data\\r\\n} DDMCCOMPBUFFERINFO, *LPDDMCCOMPBUFFERINFO;"},"_DDMOCOMPBUFFERINFO":{"comment":"","exp":"","file":"ddrawint.h","line":1908,"type":"Struct","value":"typedef struct _DDMOCOMPBUFFERINFO\\r\\n{\\r\\n    DWORD                     dwSize;         \/\/ [in]    size of the struct\\r\\n    PDD_SURFACE_LOCAL         lpCompSurface;  \/\/ [in]    pointer to buffer containing compressed data\\r\\n    DWORD                     dwDataOffset;   \/\/ [in]    offset of relevant data from the beginning of buffer\\r\\n    DWORD                     dwDataSize;     \/\/ [in]    size of relevant data\\r\\n    LPVOID                    lpPrivate;      \/\/ Reserved by DirectDraw\\r\\n} DDMOCOMPBUFFERINFO, *LPDDMOCOMPBUFFERINFO;"},"_DDMONITORINFO":{"comment":"","exp":"","file":"ddrawi.h","line":246,"type":"Struct","value":"typedef struct _DDMONITORINFO\\r\\n{\\r\\n    WORD    Manufacturer;       \/\/ Montor manufacturer\\r\\n    WORD    Product;            \/\/ Monitor product ID\\r\\n    DWORD   SerialNumber;       \/\/ Monitor serial number\\r\\n    GUID    DeviceIdentifier;   \/\/ From DDDEVICEIDENTIFIER, describes card\/driver\\r\\n    int     Mode640x480;        \/\/ Highest refresh rate support, 0 if none, -1 if untested\\r\\n    int     Mode800x600;\\r\\n    int     Mode1024x768;\\r\\n    int     Mode1280x1024;\\r\\n    int     Mode1600x1200;\\r\\n    int     ModeReserved1;\\r\\n    int     ModeReserved2;\\r\\n    int     ModeReserved3;\\r\\n} DDMONITORINFO, FAR *LPDDMONITORINFO;"},"_DDMORESURFACECAPS":{"comment":"","exp":"","file":"ddrawi.h","line":1086,"type":"Struct","value":"typedef struct _DDMORESURFACECAPS\\r\\n{\\r\\n    DWORD       dwSize;             \/\/ size of DDMORESURFACECAPS structure\\r\\n    DDSCAPSEX   ddsCapsMore;\\r\\n    \/*\\r\\n     * The DDMORESURFACECAPS struct is of variable size. The following list may be\\r\\n     * filled in by DX6-aware drivers (see DDVERSIONINFO) to restrict their\\r\\n     * video memory heaps (those which are exposed to DirectDraw) to\\r\\n     * certain sets of DDSCAPS_ bits. Thse entries are exactly analogous to\\r\\n     * the ddsCaps and ddsCapsAlt members of the VIDMEM structures listed in\\r\\n     * the VIDMEMINFO.pvmList member of DDHALINFO.vmiData. There should be\\r\\n     * exactly DDHALINFO.vmiData.dwNumHeaps copies of tagExtendedHeapRestrictions\\r\\n     * in this struct. The size of this struct is thus:\\r\\n     *  DDMORESURFACECAPS.dwSize = sizeof(DDMORESURFACECAPS) +\\r\\n     *          (DDHALINFO.vmiData.dwNumHeaps-1) * sizeof(DDSCAPSEX)*2;\\r\\n     * Note the -1 accounts for the fact that DDMORESURFACECAPS is declared to have 1\\r\\n     * tagExtendedHeapRestrictions member.\\r\\n     *\/\\r\\n    struct tagExtendedHeapRestrictions\\r\\n    {\\r\\n        DDSCAPSEX   ddsCapsEx;\\r\\n        DDSCAPSEX   ddsCapsExAlt;\\r\\n    } ddsExtendedHeapRestrictions[1];\\r\\n} DDMORESURFACECAPS, FAR * LPDDMORESURFACECAPS;"},"_DDNONLOCALVIDMEMCAPS":{"comment":"","exp":"","file":"ddrawi.h","line":1070,"type":"Struct","value":"typedef struct _DDNONLOCALVIDMEMCAPS\\r\\n{\\r\\n    DWORD   dwSize;\\r\\n    DWORD   dwNLVBCaps;       \/\/ driver specific capabilities for non-local->local vidmem blts\\r\\n    DWORD   dwNLVBCaps2;          \/\/ more driver specific capabilities non-local->local vidmem blts\\r\\n    DWORD   dwNLVBCKeyCaps;       \/\/ driver color key capabilities for non-local->local vidmem blts\\r\\n    DWORD   dwNLVBFXCaps;         \/\/ driver FX capabilities for non-local->local blts\\r\\n    DWORD   dwNLVBRops[DD_ROP_SPACE]; \/\/ ROPS supported for non-local->local blts\\r\\n} DDNONLOCALVIDMEMCAPS;"},"_DDNTCORECAPS":{"comment":"","exp":"","file":"ddrawint.h","line":848,"type":"Struct","value":"typedef struct _DDNTCORECAPS\\r\\n{\\r\\n    DWORD       dwSize;                 \/\/ size of the DDDRIVERCAPS structure\\r\\n    DWORD       dwCaps;                 \/\/ driver specific capabilities\\r\\n    DWORD       dwCaps2;                \/\/ more driver specific capabilites\\r\\n    DWORD       dwCKeyCaps;             \/\/ color key capabilities of the surface\\r\\n    DWORD       dwFXCaps;               \/\/ driver specific stretching and effects capabilites\\r\\n    DWORD       dwFXAlphaCaps;          \/\/ alpha driver specific capabilities\\r\\n    DWORD       dwPalCaps;              \/\/ palette capabilities\\r\\n    DWORD       dwSVCaps;               \/\/ stereo vision capabilities\\r\\n    DWORD       dwAlphaBltConstBitDepths;       \/\/ DDBD_2,4,8\\r\\n    DWORD       dwAlphaBltPixelBitDepths;       \/\/ DDBD_1,2,4,8\\r\\n    DWORD       dwAlphaBltSurfaceBitDepths;     \/\/ DDBD_1,2,4,8\\r\\n    DWORD       dwAlphaOverlayConstBitDepths;   \/\/ DDBD_2,4,8\\r\\n    DWORD       dwAlphaOverlayPixelBitDepths;   \/\/ DDBD_1,2,4,8\\r\\n    DWORD       dwAlphaOverlaySurfaceBitDepths; \/\/ DDBD_1,2,4,8\\r\\n    DWORD       dwZBufferBitDepths;             \/\/ DDBD_8,16,24,32\\r\\n    DWORD       dwVidMemTotal;          \/\/ total amount of video memory\\r\\n    DWORD       dwVidMemFree;           \/\/ amount of free video memory\\r\\n    DWORD       dwMaxVisibleOverlays;   \/\/ maximum number of visible overlays\\r\\n    DWORD       dwCurrVisibleOverlays;  \/\/ current number of visible overlays\\r\\n    DWORD       dwNumFourCCCodes;       \/\/ number of four cc codes\\r\\n    DWORD       dwAlignBoundarySrc;     \/\/ source rectangle alignment\\r\\n    DWORD       dwAlignSizeSrc;         \/\/ source rectangle byte size\\r\\n    DWORD       dwAlignBoundaryDest;    \/\/ dest rectangle alignment\\r\\n    DWORD       dwAlignSizeDest;        \/\/ dest rectangle byte size\\r\\n    DWORD       dwAlignStrideAlign;     \/\/ stride alignment\\r\\n    DWORD       dwRops[DD_ROP_SPACE];   \/\/ ROPS supported\\r\\n    DDSCAPS     ddsCaps;                \/\/ DDSCAPS structure has all the general capabilities\\r\\n    DWORD       dwMinOverlayStretch;    \/\/ minimum overlay stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3\\r\\n    DWORD       dwMaxOverlayStretch;    \/\/ maximum overlay stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3\\r\\n    DWORD       dwMinLiveVideoStretch;  \/\/ minimum live video stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3\\r\\n    DWORD       dwMaxLiveVideoStretch;  \/\/ maximum live video stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3\\r\\n    DWORD       dwMinHwCodecStretch;    \/\/ minimum hardware codec stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3\\r\\n    DWORD       dwMaxHwCodecStretch;    \/\/ maximum hardware codec stretch factor multiplied by 1000, eg 1000 == 1.0, 1300 == 1.3\\r\\n    DWORD       dwReserved1;            \/\/ reserved\\r\\n    DWORD       dwReserved2;            \/\/ reserved\\r\\n    DWORD       dwReserved3;            \/\/ reserved\\r\\n    DWORD       dwSVBCaps;              \/\/ driver specific capabilities for System->Vmem blts\\r\\n    DWORD       dwSVBCKeyCaps;          \/\/ driver color key capabilities for System->Vmem blts\\r\\n    DWORD       dwSVBFXCaps;            \/\/ driver FX capabilities for System->Vmem blts\\r\\n    DWORD       dwSVBRops[DD_ROP_SPACE];\/\/ ROPS supported for System->Vmem blts\\r\\n    DWORD       dwVSBCaps;              \/\/ driver specific capabilities for Vmem->System blts\\r\\n    DWORD       dwVSBCKeyCaps;          \/\/ driver color key capabilities for Vmem->System blts\\r\\n    DWORD       dwVSBFXCaps;            \/\/ driver FX capabilities for Vmem->System blts\\r\\n    DWORD       dwVSBRops[DD_ROP_SPACE];\/\/ ROPS supported for Vmem->System blts\\r\\n    DWORD       dwSSBCaps;              \/\/ driver specific capabilities for System->System blts\\r\\n    DWORD       dwSSBCKeyCaps;          \/\/ driver color key capabilities for System->System blts\\r\\n    DWORD       dwSSBFXCaps;            \/\/ driver FX capabilities for System->System blts\\r\\n    DWORD       dwSSBRops[DD_ROP_SPACE];\/\/ ROPS supported for System->System blts\\r\\n    DWORD       dwMaxVideoPorts;        \/\/ maximum number of usable video ports\\r\\n    DWORD       dwCurrVideoPorts;       \/\/ current number of video ports used\\r\\n    DWORD       dwSVBCaps2;             \/\/ more driver specific capabilities for System->Vmem blts\\r\\n} DDNTCORECAPS, *PDDNTCORECAPS;"},"_DDOPENDIRECTDRAWIN":{"comment":"","exp":"","file":"ddkmapi.h","line":84,"type":"Struct","value":"typedef struct _DDOPENDIRECTDRAWIN\\r\\n    {\\r\\n        ULONG_PTR            dwDirectDrawHandle;\\r\\n        LPDD_NOTIFYCALLBACK pfnDirectDrawClose;\\r\\n        PVOID               pContext;\\r\\n    } DDOPENDIRECTDRAWIN, FAR *LPDDOPENDIRECTDRAWIN;"},"_DDOPENDIRECTDRAWOUT":{"comment":"","exp":"","file":"ddkmapi.h","line":91,"type":"Struct","value":"typedef struct _DDOPENDIRECTDRAWOUT\\r\\n    {\\r\\n        DWORD   ddRVal;\\r\\n        HANDLE  hDirectDraw;\\r\\n    } DDOPENDIRECTDRAWOUT, FAR *LPDDOPENDIRECTDRAWOUT;"},"_DDOPENSURFACEIN":{"comment":"","exp":"","file":"ddkmapi.h","line":105,"type":"Struct","value":"typedef struct _DDOPENSURFACEIN\\r\\n    {\\r\\n\\tHANDLE\\t            hDirectDraw;\\r\\n        ULONG_PTR            dwSurfaceHandle;\\r\\n        LPDD_NOTIFYCALLBACK pfnSurfaceClose;\\r\\n        PVOID               pContext;\\r\\n    } DDOPENSURFACEIN, FAR *LPDDOPENSURFACEIN;"},"_DDOPENSURFACEOUT":{"comment":"","exp":"","file":"ddkmapi.h","line":113,"type":"Struct","value":"typedef struct _DDOPENSURFACEOUT\\r\\n    {\\r\\n        DWORD   ddRVal;\\r\\n        HANDLE  hSurface;\\r\\n    } DDOPENSURFACEOUT, FAR *LPDDOPENSURFACEOUT;"},"_DDOPENVIDEOPORTIN":{"comment":"","exp":"","file":"ddkmapi.h","line":127,"type":"Struct","value":"typedef struct _DDOPENVIDEOPORTIN\\r\\n    {\\r\\n\\tHANDLE\\t\\t    hDirectDraw;\\r\\n        ULONG               dwVideoPortHandle;\\r\\n        LPDD_NOTIFYCALLBACK pfnVideoPortClose;\\r\\n        PVOID               pContext;\\r\\n    } DDOPENVIDEOPORTIN, FAR *LPDDOPENVIDEOPORTIN;"},"_DDOPENVIDEOPORTOUT":{"comment":"","exp":"","file":"ddkmapi.h","line":135,"type":"Struct","value":"typedef struct _DDOPENVIDEOPORTOUT\\r\\n    {\\r\\n        DWORD   ddRVal;\\r\\n        HANDLE  hVideoPort;\\r\\n    } DDOPENVIDEOPORTOUT, FAR *LPDDOPENVIDEOPORTOUT;"},"_DDOPENVPCAPTUREDEVICEIN":{"comment":"","exp":"","file":"ddkmapi.h","line":403,"type":"Struct","value":"typedef struct _DDOPENVPCAPTUREDEVICEIN\\r\\n    {\\r\\n\\tHANDLE  hDirectDraw;\\r\\n\\tHANDLE  hVideoPort;\\r\\n\\tDWORD   dwStartLine;\\r\\n\\tDWORD   dwEndLine;\\r\\n\\tDWORD   dwCaptureEveryNFields;\\r\\n\\tLPDD_NOTIFYCALLBACK pfnCaptureClose;\\r\\n\\tPVOID   pContext;\\r\\n\\tDWORD\\tdwFlags;\\r\\n    } DDOPENVPCAPTUREDEVICEIN, FAR * LPDDOPENVPCAPTUREDEVICEIN;"},"_DDOPENVPCAPTUREDEVICEOUT":{"comment":"","exp":"","file":"ddkmapi.h","line":415,"type":"Struct","value":"typedef struct _DDOPENVPCAPTUREDEVICEOUT\\r\\n    {\\r\\n\\tDWORD\\tddRVal;\\r\\n\\tHANDLE\\thCapture;\\r\\n    } DDOPENVPCAPTUREDEVICEOUT, FAR * LPDDOPENVPCAPTUREDEVICEOUT;"},"_DDRAWI_DDMOTIONCOMP_INT":{"comment":"","exp":"","file":"ddrawi.h","line":1973,"type":"Struct","value":"typedef struct _DDRAWI_DDMOTIONCOMP_INT\\r\\n{\\r\\n    LPVOID                      lpVtbl;\\r\\n    LPDDRAWI_DDMOTIONCOMP_LCL   lpLcl;\\r\\n    LPDDRAWI_DDMOTIONCOMP_INT   lpLink;\\r\\n    DWORD                       dwIntRefCnt;\\r\\n} DDRAWI_DDMOTIONCOMP_INT;"},"_DDRAWI_DDMOTIONCOMP_LCL":{"comment":"","exp":"","file":"ddrawi.h","line":1981,"type":"Struct","value":"typedef struct _DDRAWI_DDMOTIONCOMP_LCL\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL lpDD;\\r\\n    GUID                    guid;\\r\\n    DWORD                   dwUncompWidth;\\r\\n    DWORD                   dwUncompHeight;\\r\\n    DDPIXELFORMAT           ddUncompPixelFormat;\\r\\n    DWORD                   dwInternalFlags;\\r\\n    DWORD                   dwRefCnt;\\r\\n    DWORD                   dwProcessId;\\r\\n    HANDLE                  hMoComp;\\r\\n    DWORD                   dwDriverReserved1;\\r\\n    DWORD                   dwDriverReserved2;\\r\\n    DWORD                   dwDriverReserved3;\\r\\n    LPVOID                  lpDriverReserved1;\\r\\n    LPVOID                  lpDriverReserved2;\\r\\n    LPVOID                  lpDriverReserved3;\\r\\n} DDRAWI_DDMOTIONCOMP_LCL;"},"_DDRAWI_DDRAWCLIPPER_GBL":{"comment":"","exp":"","file":"ddrawi.h","line":1227,"type":"Struct","value":"typedef struct _DDRAWI_DDRAWCLIPPER_GBL\\r\\n{\\r\\n    DWORD                   dwRefCnt;   \/\/ reference count\\r\\n    DWORD                   dwFlags;    \/\/ flags\\r\\n    LPDDRAWI_DIRECTDRAW_GBL lpDD;       \/\/ PRIVATE: DIRECTDRAW object\\r\\n    DWORD                   dwProcessId;    \/\/ owning process\\r\\n    ULONG_PTR               dwReserved1;    \/\/ reserved for use by display driver\\r\\n    ULONG_PTR               hWnd;       \/\/ window\\r\\n    LPRGNDATA               lpStaticClipList; \/\/ clip list set by app\\r\\n} DDRAWI_DDRAWCLIPPER_GBL;"},"_DDRAWI_DDRAWCLIPPER_INT":{"comment":"","exp":"","file":"ddrawi.h","line":1216,"type":"Struct","value":"typedef struct _DDRAWI_DDRAWCLIPPER_INT\\r\\n{\\r\\n    LPVOID                          lpVtbl;     \/\/ pointer to array of interface methods\\r\\n    LPDDRAWI_DDRAWCLIPPER_LCL       lpLcl;      \/\/ pointer to interface data\\r\\n    LPDDRAWI_DDRAWCLIPPER_INT       lpLink;     \/\/ link to next interface\\r\\n    DWORD                           dwIntRefCnt;    \/\/ interface reference count\\r\\n} DDRAWI_DDRAWCLIPPER_INT;"},"_DDRAWI_DDRAWCLIPPER_LCL":{"comment":"","exp":"","file":"ddrawi.h","line":1244,"type":"Struct","value":"typedef struct _DDRAWI_DDRAWCLIPPER_LCL\\r\\n{\\r\\n    DWORD                       lpClipMore; \/\/ pointer to additional local data\\r\\n    LPDDRAWI_DDRAWCLIPPER_GBL   lpGbl;      \/\/ pointer to data\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD_lcl;   \/\/ pointer to owning local DD object\\r\\n    DWORD                       dwLocalRefCnt;  \/\/ local ref cnt\\r\\n    IUnknown                    FAR *pUnkOuter; \/\/ outer IUnknown\\r\\n    LPDDRAWI_DIRECTDRAW_INT     lpDD_int;   \/\/ pointer to owning DD object interface\\r\\n    ULONG_PTR                   dwReserved1;    \/\/ reserved for use by display driver\\r\\n    IUnknown *                  pAddrefedThisOwner; \/\/This is the ddraw object that created this\\r\\n                                                    \/\/clipper, if nonzero. Must Release it when clipper\\r\\n                                                    \/\/is released.\\r\\n} DDRAWI_DDRAWCLIPPER_LCL;"},"_DDRAWI_DDRAWPALETTE_GBL":{"comment":"","exp":"","file":"ddrawi.h","line":1142,"type":"Struct","value":"typedef struct _DDRAWI_DDRAWPALETTE_GBL\\r\\n{\\r\\n    DWORD                       dwRefCnt;   \/\/ reference count\\r\\n    DWORD                       dwFlags;    \/\/ flags\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD_lcl;   \/\/ PRIVATE: DIRECTDRAW object\\r\\n    DWORD                       dwProcessId;    \/\/ owning process\\r\\n    LPPALETTEENTRY              lpColorTable;   \/\/ array of palette entries\\r\\n    union\\r\\n    {\\r\\n        ULONG_PTR               dwReserved1;    \/\/ reserved for use by display driver which created this object\\r\\n        HPALETTE                hHELGDIPalette;\\r\\n    };\\r\\n    \/*\\r\\n     * Fields added in version 5.0. Check if the ddraw version >= 5 (passed during\\r\\n     * driver initialization) to see if these fields will be present.\\r\\n     *\/\\r\\n    DWORD                       dwDriverReserved; \/\/ For use by HAL, regardless of who created object\\r\\n    DWORD                       dwContentsStamp;  \/\/ Incremented when palette changes.\\r\\n    \/*\\r\\n     * Fields added in version 6\\r\\n     *\/\\r\\n    DWORD                       dwSaveStamp;  \/\/ Incremented when palette changes.\\r\\n    \/*\\r\\n     * And in version 7\\r\\n     *\/\\r\\n    DWORD                       dwHandle;       \/\/Handle used in drawprim2 palette notification\\r\\n} DDRAWI_DDRAWPALETTE_GBL;"},"_DDRAWI_DDRAWPALETTE_INT":{"comment":"","exp":"","file":"ddrawi.h","line":1131,"type":"Struct","value":"typedef struct _DDRAWI_DDRAWPALETTE_INT\\r\\n{\\r\\n    LPVOID                      lpVtbl;     \/\/ pointer to array of interface methods\\r\\n    LPDDRAWI_DDRAWPALETTE_LCL   lpLcl;      \/\/ pointer to interface data\\r\\n    LPDDRAWI_DDRAWPALETTE_INT   lpLink;     \/\/ link to next interface\\r\\n    DWORD                       dwIntRefCnt;    \/\/ interface reference count\\r\\n} DDRAWI_DDRAWPALETTE_INT;"},"_DDRAWI_DDRAWPALETTE_LCL":{"comment":"","exp":"","file":"ddrawi.h","line":1178,"type":"Struct","value":"typedef struct _DDRAWI_DDRAWPALETTE_LCL\\r\\n{\\r\\n    DWORD                       lpPalMore;  \/\/ pointer to additional local data\\r\\n    LPDDRAWI_DDRAWPALETTE_GBL   lpGbl;      \/\/ pointer to data\\r\\n    ULONG_PTR                   dwUnused0;  \/\/ not currently used.\\r\\n    DWORD                       dwLocalRefCnt;  \/\/ local ref cnt\\r\\n    IUnknown                    FAR *pUnkOuter; \/\/ outer IUnknown\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD_lcl;   \/\/ pointer to owning local driver object\\r\\n    ULONG_PTR                   dwReserved1;    \/\/ reserved for use by display driver\\r\\n    \/*\\r\\n     * Added for DX6\\r\\n     *\/\\r\\n    ULONG_PTR                   dwDDRAWReserved1;\\r\\n    ULONG_PTR                   dwDDRAWReserved2;\\r\\n    ULONG_PTR                   dwDDRAWReserved3;\\r\\n} DDRAWI_DDRAWPALETTE_LCL;"},"_DDRAWI_DDRAWSURFACE_GBL":{"comment":"","exp":"","file":"ddrawi.h","line":1340,"type":"Struct","value":"typedef struct _DDRAWI_DDRAWSURFACE_GBL\\r\\n{\\r\\n    DWORD               dwRefCnt;   \/\/ reference count\\r\\n    DWORD               dwGlobalFlags;  \/\/ global flags\\r\\n    union\\r\\n    {\\r\\n        LPACCESSRECTLIST lpRectList; \/\/ list of accesses\\r\\n        DWORD           dwBlockSizeY;   \/\/ block size that display driver requested (return)\\r\\n        LONG            lSlicePitch;    \/\/ slice pitch for volume textures\\r\\n    };\\r\\n    union\\r\\n    {\\r\\n        LPVMEMHEAP      lpVidMemHeap;   \/\/ heap vidmem was alloc'ed from\\r\\n        DWORD           dwBlockSizeX;   \/\/ block size that display driver requested (return)\\r\\n    };\\r\\n    union\\r\\n    {\\r\\n        LPDDRAWI_DIRECTDRAW_GBL lpDD;       \/\/ internal DIRECTDRAW object\\r\\n        LPVOID          lpDDHandle;     \/\/ handle to internal DIRECTDRAW object\\r\\n                        \/\/ for use by display driver\\r\\n                        \/\/ when calling fns in DDRAW16.DLL\\r\\n    };\\r\\n    FLATPTR             fpVidMem;   \/\/ pointer to video memory\\r\\n    union\\r\\n    {\\r\\n        LONG            lPitch;     \/\/ pitch of surface\\r\\n        DWORD           dwLinearSize;   \/\/ linear size of non-rectangular surface\\r\\n    };\\r\\n    WORD                wHeight;    \/\/ height of surface\\r\\n    WORD                wWidth;     \/\/ width of surface\\r\\n    DWORD               dwUsageCount;   \/\/ number of access to this surface\\r\\n    ULONG_PTR           dwReserved1;    \/\/ reserved for use by display driver\\r\\n    \/\/\\r\\n    \/\/ NOTE: this part of the structure is ONLY allocated if the pixel\\r\\n    \/\/       format differs from that of the primary display\\r\\n    \/\/\\r\\n    DDPIXELFORMAT       ddpfSurface;    \/\/ pixel format of surface\\r\\n} DDRAWI_DDRAWSURFACE_GBL;"},"_DDRAWI_DDRAWSURFACE_GBL_MORE":{"comment":"","exp":"","file":"ddrawi.h","line":1404,"type":"Struct","value":"typedef struct _DDRAWI_DDRAWSURFACE_GBL_MORE\\r\\n{\\r\\n    DWORD           dwSize;\\r\\n    union\\r\\n    {\\r\\n        DWORD       dwPhysicalPageTable;        \/\/ Physical address of page table (array of physical addresses\/one per 4K page)\\r\\n        FLATPTR     fpPhysicalVidMem;               \/\/ Physical address of surface (non-local video memory only)\\r\\n    };\\r\\n    LPDWORD         pPageTable;         \/\/ Linear address of page table\\r\\n    DWORD           cPages;             \/\/ Number of Pages\\r\\n    ULONG_PTR       dwSavedDCContext;               \/\/ PRIVATE: For use by DDSurface::GetDC\\r\\n    FLATPTR         fpAliasedVidMem;                \/\/ PRIVATE: Alias for original fpVidMem\\r\\n    ULONG_PTR       dwDriverReserved;               \/\/ Reserved for driver use (both system and video memory surfaces)\\r\\n    ULONG_PTR       dwHELReserved;          \/\/ PRIVATE: For HEL use only\\r\\n    DWORD           cPageUnlocks;           \/\/ Incremented whenever a surface is PageUnlocked\\r\\n    ULONG_PTR       hKernelSurface;         \/\/ Kernel handle for this surface\\r\\n    DWORD           dwKernelRefCnt;         \/\/ Ref count for kernel handle\\r\\n    LPDDCOLORCONTROL lpColorInfo;       \/\/ PRIVATE: Initial color control settings\\r\\n    FLATPTR         fpNTAlias;                      \/\/ PRIVATE: Used internally by NT DirectDraw\\r\\n    DWORD           dwContentsStamp;                \/\/ Changes when surface data may have changed. 0 means no information\\r\\n    LPVOID          lpvUnswappedDriverReserved;     \/\/ Reserved for use by display driver. Is not swapped when Flip is called on this surface\\r\\n    LPVOID          lpDDRAWReserved2;\\r\\n    DWORD           dwDDRAWReserved1;\\r\\n    DWORD           dwDDRAWReserved2;\\r\\n    FLATPTR         fpAliasOfVidMem;    \/\/ PRIVATE: The original VidMem pointer of which fpAliasedVidMem is an alias of\\r\\n                                        \/\/ This is used to compare with a given fpVidMem to see if we can use the cached fpAliasedVidMem or\\r\\n                                        \/\/ if we need to call GetAliasedVidMem.\\r\\n} DDRAWI_DDRAWSURFACE_GBL_MORE;"},"_DDRAWI_DDRAWSURFACE_INT":{"comment":"","exp":"","file":"ddrawi.h","line":1327,"type":"Struct","value":"typedef struct _DDRAWI_DDRAWSURFACE_INT\\r\\n{\\r\\n    LPVOID                      lpVtbl;     \/\/ pointer to array of interface methods\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   lpLcl;      \/\/ pointer to interface data\\r\\n    LPDDRAWI_DDRAWSURFACE_INT   lpLink;     \/\/ link to next interface\\r\\n    DWORD                       dwIntRefCnt;    \/\/ interface reference count\\r\\n} DDRAWI_DDRAWSURFACE_INT;"},"_DDRAWI_DDRAWSURFACE_LCL":{"comment":"","exp":"","file":"ddrawi.h","line":1487,"type":"Struct","value":"struct _DDRAWI_DDRAWSURFACE_LCL\\r\\n{\\r\\n    LPDDRAWI_DDRAWSURFACE_MORE      lpSurfMore; \/\/ pointer to additional local data\\r\\n    LPDDRAWI_DDRAWSURFACE_GBL       lpGbl;      \/\/ pointer to surface shared data\\r\\n    ULONG_PTR                        hDDSurface;     \/\/ NT Kernel-mode handle was dwUnused0\\r\\n    LPATTACHLIST                    lpAttachList;   \/\/ link to surfaces we attached to\\r\\n    LPATTACHLIST                    lpAttachListFrom;\/\/ link to surfaces that attached to this one\\r\\n    DWORD                           dwLocalRefCnt;  \/\/ object refcnt\\r\\n    DWORD                           dwProcessId;    \/\/ owning process\\r\\n    DWORD                           dwFlags;    \/\/ flags\\r\\n    DDSCAPS                         ddsCaps;    \/\/ capabilities of surface\\r\\n    union\\r\\n    {\\r\\n        LPDDRAWI_DDRAWPALETTE_INT   lpDDPalette;    \/\/ associated palette\\r\\n        LPDDRAWI_DDRAWPALETTE_INT   lp16DDPalette;  \/\/ 16-bit ptr to associated palette\\r\\n    };\\r\\n    union\\r\\n    {\\r\\n        LPDDRAWI_DDRAWCLIPPER_LCL   lpDDClipper;    \/\/ associated clipper\\r\\n        LPDDRAWI_DDRAWCLIPPER_INT   lp16DDClipper;  \/\/ 16-bit ptr to associated clipper\\r\\n    };\\r\\n    DWORD                           dwModeCreatedIn;\\r\\n    DWORD                           dwBackBufferCount; \/\/ number of back buffers created\\r\\n    DDCOLORKEY                      ddckCKDestBlt;  \/\/ color key for destination blt use\\r\\n    DDCOLORKEY                      ddckCKSrcBlt;   \/\/ color key for source blt use\\r\\n\/\/    IUnknown              FAR *pUnkOuter; \/\/ outer IUnknown\\r\\n    ULONG_PTR                       hDC;        \/\/ owned dc\\r\\n    ULONG_PTR                       dwReserved1;    \/\/ reserved for use by display driver\\r\\n    \/*\\r\\n     * NOTE: this part of the structure is ONLY allocated if the surface\\r\\n     *       can be used for overlays.  ddckCKSrcOverlay MUST NOT BE MOVED\\r\\n     *       from the start of this area.\\r\\n     *\/\\r\\n    DDCOLORKEY                      ddckCKSrcOverlay;\/\/ color key for source overlay use\\r\\n    DDCOLORKEY                      ddckCKDestOverlay;\/\/ color key for destination overlay use\\r\\n    LPDDRAWI_DDRAWSURFACE_INT       lpSurfaceOverlaying; \/\/ surface we are overlaying\\r\\n    DBLNODE                         dbnOverlayNode;\\r\\n    \/*\\r\\n     * overlay rectangle, used by DDHEL\\r\\n     *\/\\r\\n    RECT                            rcOverlaySrc;\\r\\n    RECT                            rcOverlayDest;\\r\\n    \/*\\r\\n     * the below values are kept here for ddhel. they're set by UpdateOverlay,\\r\\n     * they're used whenever the overlays are redrawn.\\r\\n     *\/\\r\\n    DWORD                           dwClrXparent;   \/\/ the *actual* color key (override, colorkey, or CLR_INVALID)\\r\\n    DWORD                           dwAlpha;    \/\/ the per surface alpha\\r\\n    \/*\\r\\n     * overlay position\\r\\n     *\/\\r\\n    LONG                            lOverlayX;  \/\/ current x position\\r\\n    LONG                            lOverlayY;  \/\/ current y position\\r\\n};"},"_DDRAWI_DDRAWSURFACE_MORE":{"comment":"","exp":"","file":"ddrawi.h","line":1439,"type":"Struct","value":"typedef struct _DDRAWI_DDRAWSURFACE_MORE\\r\\n{\\r\\n    DWORD                       dwSize;\\r\\n    IUNKNOWN_LIST               FAR *lpIUnknowns;   \/\/ IUnknowns aggregated by this surface\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD_lcl;       \/\/ Pointer to the DirectDraw local object\\r\\n    DWORD                       dwPageLockCount;    \/\/ count of pagelocks\\r\\n    DWORD                       dwBytesAllocated;   \/\/ size of sys mem allocated\\r\\n    LPDDRAWI_DIRECTDRAW_INT     lpDD_int;       \/\/ Pointer to the DirectDraw interface\\r\\n    DWORD                       dwMipMapCount;      \/\/ Number of mip-map levels in the chain\\r\\n    LPDDRAWI_DDRAWCLIPPER_INT   lpDDIClipper;       \/\/ Interface to attached clipper object\\r\\n    \/\/------- Fields added in Version 5.0 -------\\r\\n    LPHEAPALIASINFO             lpHeapAliasInfo;    \/\/ PRIVATE: Aliased heaps being referenced by this lock\\r\\n    DWORD                       dwOverlayFlags;     \/\/ Current overlay flags\\r\\n    VOID                        *rgjunc;        \/\/ Blitter function table for new blitter\\r\\n    LPDDRAWI_DDVIDEOPORT_LCL    lpVideoPort;        \/\/ Video port currently writting data to this surface\\r\\n    LPDDOVERLAYFX               lpddOverlayFX;      \/\/ current overlay fx\\r\\n    DDSCAPSEX                   ddsCapsEx;\\r\\n    DWORD                       dwTextureStage;     \/\/ stage in multitexture cascade\\r\\n    LPVOID                      lpDDRAWReserved;\\r\\n    LPVOID                      lpDDRAWReserved2;\\r\\n    LPVOID                      lpDDrawReserved3;\\r\\n    DWORD                       dwDDrawReserved4;\\r\\n    LPVOID                      lpDDrawReserved5;\\r\\n   LPDWORD                      lpGammaRamp;\\r\\n   LPDWORD                      lpOriginalGammaRamp;\\r\\n   LPVOID                       lpDDrawReserved6;\\r\\n#ifndef WIN95\\r\\n   DISPLAYMODEINFO              dmiDDrawReserved7;\\r\\n#endif\\r\\n   DWORD                        dwSurfaceHandle;    \/\/ cookie for use with CreateSurfaceEx DDI\\r\\n   DWORD                        qwDDrawReserved8[2];\\r\\n   LPVOID                       lpDDrawReserved9;\\r\\n    DWORD                       cSurfaces;                  \/\/PRIVATE\\r\\n    LPDDSURFACEDESC2            pCreatedDDSurfaceDesc2;     \/\/PRIVATE\\r\\n    LPDDRAWI_DDRAWSURFACE_LCL   *slist;                     \/\/PRIVATE\\r\\n    DWORD                       dwFVF;              \/\/ saved FVF flags for exe bufs\\r\\n   LPVOID                       lpVB;                       \/\/PRIVATE\\r\\n} DDRAWI_DDRAWSURFACE_MORE;"},"_DDRAWI_DDVIDEOPORT_INT":{"comment":"","exp":"","file":"ddrawi.h","line":1927,"type":"Struct","value":"typedef struct _DDRAWI_DDVIDEOPORT_INT\\r\\n{\\r\\n    LPVOID                      lpVtbl;     \/\/ pointer to array of interface methods\\r\\n    LPDDRAWI_DDVIDEOPORT_LCL    lpLcl;      \/\/ pointer to interface data\\r\\n    LPDDRAWI_DDVIDEOPORT_INT    lpLink;     \/\/ link to next interface\\r\\n    DWORD                       dwIntRefCnt;    \/\/ interface reference count\\r\\n    DWORD                       dwFlags;    \/\/ Private\\r\\n} DDRAWI_DDVIDEOPORT_INT;"},"_DDRAWI_DDVIDEOPORT_LCL":{"comment":"","exp":"","file":"ddrawi.h","line":1936,"type":"Struct","value":"typedef struct _DDRAWI_DDVIDEOPORT_LCL\\r\\n{\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpDD;       \/\/ pointer to DIRECTDRAW_LCL\\r\\n    DDVIDEOPORTDESC             ddvpDesc;   \/\/ description used at create time\\r\\n    DDVIDEOPORTINFO             ddvpInfo;   \/\/ most recent video port info\\r\\n    LPDDRAWI_DDRAWSURFACE_INT   lpSurface;  \/\/ surface receiving the data\\r\\n    LPDDRAWI_DDRAWSURFACE_INT   lpVBISurface;   \/\/ surface receiving the VBI data\\r\\n    LPDDRAWI_DDRAWSURFACE_INT   *lpFlipInts;    \/\/ PRIVATE: surfaces currently being autoflipped\\r\\n    DWORD                       dwNumAutoflip;  \/\/ Number of current autoflip surfaces\\r\\n    DWORD                       dwProcessID;    \/\/ ID of process owning this video port\\r\\n    DWORD                       dwStateFlags;\\r\\n    DWORD                       dwFlags;\\r\\n    DWORD                       dwRefCnt;\\r\\n    FLATPTR                     fpLastFlip;     \/\/ Location from which we last flipped\\r\\n    ULONG_PTR                   dwReserved1;    \/\/ Reserved for display driver\\r\\n    ULONG_PTR                   dwReserved2;    \/\/ Reserved for display driver\\r\\n    HANDLE                      hDDVideoPort;   \/\/ NT Kernel-mode handle\\r\\n    DWORD                       dwNumVBIAutoflip;\/\/Number of VBI surfaces currently being autoflipped\\r\\n    LPDDVIDEOPORTDESC           lpVBIDesc;  \/\/ PRIVATE\\r\\n    LPDDVIDEOPORTDESC           lpVideoDesc;    \/\/ PRIVATE\\r\\n    LPDDVIDEOPORTINFO           lpVBIInfo;  \/\/ PRIVATE\\r\\n    LPDDVIDEOPORTINFO           lpVideoInfo;    \/\/ PRIVATE\\r\\n    DWORD                       dwVBIProcessID; \/\/ ID of process owning this video port\\r\\n    LPDDRAWI_DDVIDEOPORT_INT    lpVPNotify;\\r\\n} DDRAWI_DDVIDEOPORT_LCL;"},"_DDRAWI_DIRECTDRAW_GBL":{"comment":"","exp":"","file":"ddrawi.h","line":1754,"type":"Struct","value":"typedef struct _DDRAWI_DIRECTDRAW_GBL\\r\\n{\\r\\n\/*  0*\/ DWORD                   dwRefCnt;    \/\/ reference count\\r\\n\/*  4*\/ DWORD                   dwFlags;     \/\/ flags\\r\\n\/*  8*\/ FLATPTR                 fpPrimaryOrig;   \/\/ primary surf vid mem. ptr\\r\\n\/*  c*\/ DDCORECAPS              ddCaps;      \/\/ driver caps\\r\\n\/*148*\/ DWORD                   dwInternal1;     \/\/ Private to ddraw.dll\\r\\n\/*16c*\/ DWORD                   dwUnused1[9];    \/\/ not currently used\\r\\n\/*170*\/ LPDDHAL_CALLBACKS       lpDDCBtmp;   \/\/ HAL callbacks\\r\\n\/*174*\/ LPDDRAWI_DDRAWSURFACE_INT   dsList;      \/\/ PRIVATE: list of all surfaces\\r\\n\/*178*\/ LPDDRAWI_DDRAWPALETTE_INT   palList;     \/\/ PRIVATE: list of all palettes\\r\\n\/*17c*\/ LPDDRAWI_DDRAWCLIPPER_INT   clipperList;     \/\/ PRIVATE: list of all clippers\\r\\n\/*180*\/ LPDDRAWI_DIRECTDRAW_GBL     lp16DD;      \/\/ PRIVATE: 16-bit ptr to this struct\\r\\n\/*184*\/ DWORD                   dwMaxOverlays;   \/\/ maximum number of overlays\\r\\n\/*188*\/ DWORD                   dwCurrOverlays;  \/\/ current number of visible overlays\\r\\n\/*18c*\/ DWORD                   dwMonitorFrequency; \/\/ monitor frequency in current mode\\r\\n\/*190*\/ DDCORECAPS              ddHELCaps;   \/\/ HEL capabilities\\r\\n\/*2cc*\/ DWORD                   dwUnused2[50];   \/\/ not currently used\\r\\n\/*394*\/ DDCOLORKEY              ddckCKDestOverlay; \/\/ color key for destination overlay use\\r\\n\/*39c*\/ DDCOLORKEY              ddckCKSrcOverlay; \/\/ color key for source overlay use\\r\\n\/*3a4*\/ VIDMEMINFO              vmiData;     \/\/ info about vid memory\\r\\n\/*3f4*\/ LPVOID                  lpDriverHandle;  \/\/ handle for use by display driver\\r\\n\/*   *\/                          \/\/ to call fns in DDRAW16.DLL\\r\\n\/*3f8*\/ LPDDRAWI_DIRECTDRAW_LCL         lpExclusiveOwner;   \/\/ PRIVATE: exclusive local object\\r\\n\/*3fc*\/ DWORD                   dwModeIndex;     \/\/ current mode index\\r\\n\/*400*\/ DWORD                   dwModeIndexOrig; \/\/ original mode index\\r\\n\/*404*\/ DWORD                   dwNumFourCC;     \/\/ number of fourcc codes supported\\r\\n\/*408*\/ DWORD                   FAR *lpdwFourCC; \/\/ PRIVATE: fourcc codes supported\\r\\n\/*40c*\/ DWORD                   dwNumModes;  \/\/ number of modes supported\\r\\n\/*410*\/ LPDDHALMODEINFO         lpModeInfo;  \/\/ PRIVATE: mode information\\r\\n\/*424*\/ PROCESS_LIST            plProcessList;   \/\/ PRIVATE: list of processes using driver\\r\\n\/*428*\/ DWORD                   dwSurfaceLockCount; \/\/ total number of outstanding locks\\r\\n\/*42c*\/ DWORD                   dwAliasedLockCnt; \/\/ PRIVATE: number of outstanding aliased locks\\r\\n\/*430*\/ ULONG_PTR                dwReserved3;     \/\/ reserved for use by display driver\\r\\n\/*434*\/ ULONG_PTR                hDD;             \/\/ PRIVATE: NT Kernel-mode handle (was dwFree3).\\r\\n\/*438*\/ char                    cObsolete[12];   \/\/ Obsolete field, do not use\\r\\n\/*444*\/ DWORD                   dwReserved1;     \/\/ reserved for use by display driver\\r\\n\/*448*\/ DWORD                   dwReserved2;     \/\/ reserved for use by display driver\\r\\n\/*44c*\/ DBLNODE                 dbnOverlayRoot;  \/\/ The root node of the doubly-\\r\\n\/*   *\/                                                  \/\/ linked list of overlay z orders.\\r\\n\/*45c*\/ volatile LPWORD         lpwPDeviceFlags; \/\/ driver physical device flags\\r\\n\/*460*\/ DWORD                   dwPDevice;       \/\/ driver physical device (16:16 pointer)\\r\\n\/*464*\/ DWORD                   dwWin16LockCnt;  \/\/ count on win16 holds\\r\\n\/*468*\/ DWORD                   dwUnused3;       \/\/ was lpWin16LockOwner\\r\\n\/*46c*\/ DWORD                   hInstance;       \/\/ instance handle of driver\\r\\n\/*470*\/ DWORD                   dwEvent16;       \/\/ 16-bit event\\r\\n\/*474*\/ DWORD                   dwSaveNumModes;  \/\/ saved number of modes supported\\r\\n\/*   *\/ \/\/------- Fields added in Version 2.0 -------\\r\\n\/*478*\/ ULONG_PTR                lpD3DGlobalDriverData;  \/\/ Global D3D Data\\r\\n\/*47c*\/ ULONG_PTR                lpD3DHALCallbacks;  \/\/ D3D HAL Callbacks\\r\\n\/*480*\/ DDCORECAPS              ddBothCaps;      \/\/ logical AND of driver and HEL caps\\r\\n\/*   *\/ \/\/------- Fields added in Version 5.0 -------\\r\\n\/*5bc*\/ LPDDVIDEOPORTCAPS       lpDDVideoPortCaps;\/\/ Info returned by the HAL (an array if more than one video port)\\r\\n\/*5c0*\/ LPDDRAWI_DDVIDEOPORT_INT    dvpList;     \/\/ PRIVATE: list of all video ports\\r\\n\/*5c4*\/ ULONG_PTR                lpD3DHALCallbacks2;     \/\/ Post-DX3 D3D HAL callbacks\\r\\n\/*5c8*\/ RECT                    rectDevice;  \/\/ rectangle (in desktop coord) for device\\r\\n\/*5d8*\/ DWORD                   cMonitors;   \/\/ number of monitors in the system\\r\\n\/*5dc*\/ LPVOID                  gpbmiSrc;    \/\/ PRIVATE: used by HEL\\r\\n\/*5e0*\/ LPVOID                  gpbmiDest;   \/\/ PRIVATE: used by HEL\\r\\n\/*5e4*\/ LPHEAPALIASINFO         phaiHeapAliases; \/\/ PRIVATE: video memory heap aliases\\r\\n\/*5e8*\/ ULONG_PTR               hKernelHandle;\\r\\n\/*5ec*\/ ULONG_PTR               pfnNotifyProc;   \/\/ Notification proc registered w\/ VDD\\r\\n\/*5f0*\/ LPDDKERNELCAPS          lpDDKernelCaps;  \/\/ Capabilies of kernel mode interface\\r\\n\/*5f4*\/ LPDDNONLOCALVIDMEMCAPS  lpddNLVCaps;     \/\/ hardware non-local to local vidmem caps\\r\\n\/*5f8*\/ LPDDNONLOCALVIDMEMCAPS  lpddNLVHELCaps;  \/\/ emulation layer non-local to local vidmem caps\\r\\n\/*5fc*\/ LPDDNONLOCALVIDMEMCAPS  lpddNLVBothCaps; \/\/ logical AND of hardware and emulation non-local to local vidmem caps\\r\\n\/*600*\/ ULONG_PTR                lpD3DExtendedCaps; \/\/ extended caps for D3D\\r\\n\/*   *\/ \/\/--------Fields added in Version 5.0A\\r\\n\/*604*\/ DWORD                   dwDOSBoxEvent;      \/\/ Event set when returning from a DOS box\\r\\n\/*608*\/ RECT                    rectDesktop;        \/\/ Desktop coordinates\\r\\n\/*618*\/ char                    cDriverName[MAX_DRIVER_NAME]; \/\/ Display name\\r\\n\/*   *\/ \/\/------- Fields added in Version 6.0 -------\\r\\n\/*638*\/ ULONG_PTR                lpD3DHALCallbacks3;     \/\/ DX6 D3D callbacks\\r\\n\/*63c*\/ DWORD                   dwNumZPixelFormats;     \/\/ Number of z-buffer+stencil pixel formats\\r\\n\/*640*\/ LPDDPIXELFORMAT         lpZPixelFormats;        \/\/ Pointer to array of z-buffer pixel formats\\r\\n\/*644*\/ LPDDRAWI_DDMOTIONCOMP_INT mcList;               \/\/ PRIVATE: list of all motion comp objects\\r\\n\/*648*\/ DWORD                   hDDVxd;                 \/\/ handle to ddraw.vxd\\r\\n\/*64c*\/ DDSCAPSEX               ddsCapsMore;            \/\/ as queried via GUID_DDMoreSurfaceCaps\\r\\n} DDRAWI_DIRECTDRAW_GBL;"},"_DDRAWI_DIRECTDRAW_INT":{"comment":"","exp":"","file":"ddrawi.h","line":1651,"type":"Struct","value":"typedef struct _DDRAWI_DIRECTDRAW_INT\\r\\n{\\r\\n    LPVOID                      lpVtbl;     \/\/ pointer to array of interface methods\\r\\n    LPDDRAWI_DIRECTDRAW_LCL     lpLcl;      \/\/ pointer to interface data\\r\\n    LPDDRAWI_DIRECTDRAW_INT     lpLink;     \/\/ link to next interface\\r\\n    DWORD                       dwIntRefCnt;    \/\/ interface reference count\\r\\n} DDRAWI_DIRECTDRAW_INT;"},"_DDRAWI_DIRECTDRAW_LCL":{"comment":"","exp":"","file":"ddrawi.h","line":1835,"type":"Struct","value":"typedef struct _DDRAWI_DIRECTDRAW_LCL\\r\\n{\\r\\n    DWORD                       lpDDMore;           \/\/ pointer to additional local data\\r\\n    LPDDRAWI_DIRECTDRAW_GBL     lpGbl;              \/\/ pointer to data\\r\\n    DWORD                       dwUnused0;          \/\/ not currently used\\r\\n    DWORD                       dwLocalFlags;       \/\/ local flags (DDRAWILCL_)\\r\\n    DWORD                       dwLocalRefCnt;      \/\/ local ref cnt\\r\\n    DWORD                       dwProcessId;        \/\/ owning process id\\r\\n    IUnknown                    FAR *pUnkOuter;     \/\/ outer IUnknown\\r\\n    DWORD                       dwObsolete1;\\r\\n    ULONG_PTR                   hWnd;\\r\\n    ULONG_PTR                   hDC;\\r\\n    DWORD                       dwErrorMode;\\r\\n    LPDDRAWI_DDRAWSURFACE_INT   lpPrimary;\\r\\n    LPDDRAWI_DDRAWSURFACE_INT   lpCB;\\r\\n    DWORD                       dwPreferredMode;\\r\\n    \/\/------- Fields added in Version 2.0 -------\\r\\n    HINSTANCE                   hD3DInstance;       \/\/ Handle of Direct3D's DLL.\\r\\n    IUnknown                    FAR *pD3DIUnknown;  \/\/ Direct3D's aggregated IUnknown.\\r\\n    LPDDHAL_CALLBACKS           lpDDCB;             \/\/ HAL callbacks\\r\\n    ULONG_PTR                   hDDVxd;             \/\/ handle to ddraw.vxd\\r\\n    \/\/------- Fields added in Version 5.0 -------\\r\\n    DWORD                       dwAppHackFlags;     \/\/ app compatibilty flags\\r\\n    \/\/------- Fields added in Version 5.A -------\\r\\n    ULONG_PTR                   hFocusWnd;          \/\/ Focus window set via SetCoopLevel\\r\\n    DWORD                       dwHotTracking;      \/\/ Reactive menu etc setting cached while fullscreen\\r\\n    DWORD                       dwIMEState;         \/\/ IME toolbar setting cached while fullscreen\\r\\n    \/\/------- Fields added in Version 6.0 -------\\r\\n    ULONG_PTR                   hWndPopup;\\r\\n    ULONG_PTR                   hDD;                \/\/ PRIVATE: NT Kernel-mode handle\\r\\n    ULONG_PTR                   hGammaCalibrator;   \/\/ Private\\r\\n    LPDDGAMMACALIBRATORPROC     lpGammaCalibrator;  \/\/ Private\\r\\n} DDRAWI_DIRECTDRAW_LCL;"},"_DDREGISTERCALLBACK":{"comment":"","exp":"","file":"ddkmapi.h","line":357,"type":"Struct","value":"typedef struct _DDREGISTERCALLBACK\\r\\n    {\\r\\n\\tHANDLE \\t            hDirectDraw;\\r\\n\\tULONG\\t            dwEvents;\\r\\n\\tLPDD_NOTIFYCALLBACK pfnCallback;\\r\\n\\tULONG_PTR            dwParam1;\\r\\n\\tULONG_PTR            dwParam2;\\r\\n\\tPVOID\\t            pContext;\\r\\n    } DDREGISTERCALLBACK, FAR *LPDDREGISTERCALLBACK;"},"_DDSETFIELDNUM":{"comment":"","exp":"","file":"ddkmapi.h","line":184,"type":"Struct","value":"typedef struct _DDSETFIELDNUM\\r\\n    {\\r\\n\\tHANDLE\\thDirectDraw;\\r\\n\\tHANDLE\\thVideoPort;\\r\\n\\tDWORD\\tdwFieldNum;\\r\\n    } DDSETFIELDNUM, FAR *LPDDSETFIELDNUM;"},"_DDSETSKIPFIELD":{"comment":"","exp":"","file":"ddkmapi.h","line":199,"type":"Struct","value":"typedef struct _DDSETSKIPFIELD\\r\\n    {\\r\\n\\tHANDLE\\thDirectDraw;\\r\\n\\tHANDLE\\thVideoPort;\\r\\n\\tDWORD\\tdwStartField;\\r\\n    } DDSETSKIPFIELD, FAR *LPDDSETSKIPFIELD;"},"_DDSETSTATEININFO":{"comment":"","exp":"","file":"dxmini.h","line":202,"type":"Struct","value":"typedef struct _DDSETSTATEININFO {\\r\\n    LPDDSURFACEDATA     lpSurfaceData;\\r\\n    LPDDVIDEOPORTDATA   lpVideoPortData;\\r\\n} DDSETSTATEININFO, *PDDSETSTATEININFO;"},"_DDSETSTATEOUTINFO":{"comment":"","exp":"","file":"dxmini.h","line":208,"type":"Struct","value":"typedef struct _DDSETSTATEOUTINFO {\\r\\n    BOOL                bSoftwareAutoflip;\\r\\n    DWORD               dwSurfaceIndex;\\r\\n    DWORD               dwVBISurfaceIndex;\\r\\n} DDSETSTATEOUTINFO, *PDDSETSTATEOUTINFO;"},"_DDSETSURFACETATE":{"comment":"","exp":"","file":"ddkmapi.h","line":235,"type":"Struct","value":"typedef struct _DDSETSURFACETATE\\r\\n    {\\r\\n\\tHANDLE\\thDirectDraw;\\r\\n\\tHANDLE\\thSurface;\\r\\n\\tDWORD\\tdwState;\\r\\n\\tDWORD\\tdwStartField;\\r\\n    } DDSETSURFACESTATE, FAR *LPDDSETSURFACESTATE;"},"_DDSKIPNEXTFIELDINFO":{"comment":"","exp":"","file":"dxmini.h","line":188,"type":"Struct","value":"typedef struct _DDSKIPNEXTFIELDINFO {\\r\\n    LPDDVIDEOPORTDATA   lpVideoPortData;\\r\\n    DWORD               dwSkipFlags;\\r\\n} DDSKIPNEXTFIELDINFO, *PDDSKIPNEXTFIELDINFO;"},"_DDSTEREOMODE":{"comment":"","exp":"","file":"ddrawi.h","line":1112,"type":"Struct","value":"typedef struct _DDSTEREOMODE\\r\\n{\\r\\n    DWORD       dwSize;             \/\/ size of DDSTEREOMODECAPS structure\\r\\n    DWORD       dwHeight;\\r\\n    DWORD       dwWidth;\\r\\n    DWORD       dwBpp;\\r\\n    DWORD       dwRefreshRate;\\r\\n    BOOL        bSupported;         \/\/ driver supports this video mode...\\r\\n} DDSTEREOMODE, FAR * LPDDSTEREOMODE;"},"_DDSURFACEDATA":{"comment":"","exp":"","file":"dxmini.h","line":95,"type":"Struct","value":"typedef struct _DDSURFACEDATA {\\r\\n    DWORD       ddsCaps;                \/\/ Ring 3 creation caps\\r\\n    DWORD       dwSurfaceOffset;        \/\/ Offset in frame buffer of surface\\r\\n    ULONG_PTR    fpLockPtr;              \/\/ Surface lock ptr\\r\\n    DWORD       dwWidth;                \/\/ Surface width\\r\\n    DWORD       dwHeight;               \/\/ Surface height\\r\\n    LONG        lPitch;                 \/\/ Surface pitch\\r\\n    DWORD       dwOverlayFlags;         \/\/ DDOVER_XX flags\\r\\n    DWORD       dwOverlayOffset;        \/\/ Offset in frame buffer of overlay\\r\\n    DWORD       dwOverlaySrcWidth;\\t\/\/ Src width of overlay\\r\\n    DWORD       dwOverlaySrcHeight;\\t\/\/ Src height of overlay\\r\\n    DWORD       dwOverlayDestWidth;\\t\/\/ Dest width of overlay\\r\\n    DWORD       dwOverlayDestHeight;\\t\/\/ Dest height of overlay\\r\\n    DWORD\\tdwVideoPortId;\\t\\t\/\/ ID of video port (-1 if not connected to a video port)\\r\\n    DWORD       dwFormatFlags;\\r\\n    DWORD       dwFormatFourCC;\\r\\n    DWORD       dwFormatBitCount;\\r\\n    DWORD       dwRBitMask;\\r\\n    DWORD       dwGBitMask;\\r\\n    DWORD       dwBBitMask;\\r\\n    ULONG       dwDriverReserved1;      \/\/ Reserved for the HAL\/Miniport\\r\\n    ULONG       dwDriverReserved2;      \/\/ Reserved for the HAL\/Miniport\\r\\n    ULONG       dwDriverReserved3;      \/\/ Reserved for the HAL\/Miniport\\r\\n    ULONG       dwDriverReserved4;      \/\/ Reserved for the HAL\/Miniport\\r\\n} DDSURFACEDATA, *LPDDSURFACEDATA;"},"_DDTRANSFERININFO":{"comment":"","exp":"","file":"dxmini.h","line":275,"type":"Struct","value":"typedef struct _DDTRANSFERININFO {\\r\\n    LPDDSURFACEDATA\\tlpSurfaceData;\\r\\n    DWORD\\t\\tdwStartLine;\\r\\n    DWORD \\t\\tdwEndLine;\\r\\n    ULONG_PTR   dwTransferID;\\r\\n    DWORD \\t\\tdwTransferFlags;\\r\\n    PMDL  \\t\\tlpDestMDL;\\r\\n} DDTRANSFERININFO, *PDDTRANSFERININFO;"},"_DDTRANSFEROUTINFO":{"comment":"","exp":"","file":"dxmini.h","line":291,"type":"Struct","value":"typedef struct _DDTRANSFEROUTINFO {\\r\\n    DWORD dwBufferPolarity;\\r\\n} DDTRANSFEROUTINFO, *PDDTRANSFEROUTINFO;"},"_DDVIDEOPORTBANDWIDTH":{"comment":"","exp":"","file":"dvp.h","line":373,"type":"Struct","value":"typedef struct _DDVIDEOPORTBANDWIDTH\\r\\n{\\r\\n    DWORD dwSize;\\t\\t\\t\/\/ Size of the structure\\r\\n    DWORD dwCaps;\\r\\n    DWORD dwOverlay;           \\t\\t\/\/ Zoom factor at which overlay is supported\\r\\n    DWORD dwColorkey;\\t\\t\\t\/\/ Zoom factor at which overlay w\/ colorkey is supported\\r\\n    DWORD dwYInterpolate;\\t\\t\/\/ Zoom factor at which overlay w\/ Y interpolation is supported\\r\\n    DWORD dwYInterpAndColorkey;\\t\\t\/\/ Zoom factor at which ovelray w\/ Y interpolation and colorkeying is supported\\r\\n    ULONG_PTR dwReserved1;\\t\\t\/\/ Reserved for future use - set to zero\\r\\n    ULONG_PTR dwReserved2;\\t\\t\/\/ Reserved for future use - set to zero\\r\\n} DDVIDEOPORTBANDWIDTH;"},"_DDVIDEOPORTCAPS":{"comment":"","exp":"","file":"dvp.h","line":262,"type":"Struct","value":"typedef struct _DDVIDEOPORTCAPS\\r\\n{\\r\\n    DWORD dwSize;\\t\\t\\t\/\/ size of the DDVIDEOPORTCAPS structure\\r\\n    DWORD dwFlags;\\t\\t\\t\/\/ indicates which fields contain data\\r\\n    DWORD dwMaxWidth;\\t\\t\\t\/\/ max width of the video port field\\r\\n    DWORD dwMaxVBIWidth;\\t\\t\/\/ max width of the VBI data\\r\\n    DWORD dwMaxHeight; \\t\\t\\t\/\/ max height of the video port field\\r\\n    DWORD dwVideoPortID;\\t\\t\/\/ Video port ID (0 - (dwMaxVideoPorts -1))\\r\\n    DWORD dwCaps;\\t\\t\\t\/\/ Video port capabilities\\r\\n    DWORD dwFX;\\t\\t\\t\\t\/\/ More video port capabilities\\r\\n    DWORD dwNumAutoFlipSurfaces;\\t\/\/ Max number of autoflippable surfaces allowed\\r\\n    DWORD dwAlignVideoPortBoundary;\\t\/\/ Byte restriction of placement within the surface\\r\\n    DWORD dwAlignVideoPortPrescaleWidth;\/\/ Byte restriction of width after prescaling\\r\\n    DWORD dwAlignVideoPortCropBoundary;\\t\/\/ Byte restriction of left cropping\\r\\n    DWORD dwAlignVideoPortCropWidth;\\t\/\/ Byte restriction of cropping width\\r\\n    DWORD dwPreshrinkXStep;\\t\\t\/\/ Width can be shrunk in steps of 1\/x\\r\\n    DWORD dwPreshrinkYStep;\\t\\t\/\/ Height can be shrunk in steps of 1\/x\\r\\n    DWORD dwNumVBIAutoFlipSurfaces;\\t\/\/ Max number of VBI autoflippable surfaces allowed\\r\\n    DWORD dwNumPreferredAutoflip;\\t\/\/ Optimal number of autoflippable surfaces for hardware\\r\\n    WORD  wNumFilterTapsX;              \/\/ Number of taps the prescaler uses in the X direction (0 - no prescale, 1 - replication, etc.)\\r\\n    WORD  wNumFilterTapsY;              \/\/ Number of taps the prescaler uses in the Y direction (0 - no prescale, 1 - replication, etc.)\\r\\n} DDVIDEOPORTCAPS;"},"_DDVIDEOPORTCONNECT":{"comment":"","exp":"","file":"dvp.h","line":249,"type":"Struct","value":"typedef struct _DDVIDEOPORTCONNECT\\r\\n{\\r\\n    DWORD dwSize;           \/\/ size of the DDVIDEOPORTCONNECT structure\\r\\n    DWORD dwPortWidth;      \/\/ Width of the video port\\r\\n    GUID  guidTypeID;       \/\/ Description of video port connection\\r\\n    DWORD dwFlags;          \/\/ Connection flags\\r\\n    ULONG_PTR dwReserved1;      \/\/ Reserved, set to zero.\\r\\n} DDVIDEOPORTCONNECT;"},"_DDVIDEOPORTDESC":{"comment":"","exp":"","file":"dvp.h","line":333,"type":"Struct","value":"typedef struct _DDVIDEOPORTDESC\\r\\n{\\r\\n    DWORD dwSize;\\t\\t\\t\/\/ size of the DDVIDEOPORTDESC structure\\r\\n    DWORD dwFieldWidth;\\t\\t\\t\/\/ width of the video port field\\r\\n    DWORD dwVBIWidth;\\t\\t\\t\/\/ width of the VBI data\\r\\n    DWORD dwFieldHeight;\\t\\t\/\/ height of the video port field\\r\\n    DWORD dwMicrosecondsPerField;\\t\/\/ Microseconds per video field\\r\\n    DWORD dwMaxPixelsPerSecond;\\t\\t\/\/ Maximum pixel rate per second\\r\\n    DWORD dwVideoPortID;\\t\\t\/\/ Video port ID (0 - (dwMaxVideoPorts -1))\\r\\n    DWORD dwReserved1;\\t\\t\\t\/\/ Reserved for future use - set to zero (struct padding)\\r\\n    DDVIDEOPORTCONNECT VideoPortType; \\t\/\/ Description of video port connection\\r\\n    ULONG_PTR dwReserved2;\\t\\t\/\/ Reserved for future use - set to zero\\r\\n    ULONG_PTR dwReserved3;\\t\\t\/\/ Reserved for future use - set to zero\\r\\n} DDVIDEOPORTDESC;"},"_DDVIDEOPORTINFO":{"comment":"","exp":"","file":"dvp.h","line":352,"type":"Struct","value":"typedef struct _DDVIDEOPORTINFO\\r\\n{\\r\\n    DWORD dwSize;\\t\\t\\t\/\/ Size of the structure\\r\\n    DWORD dwOriginX;\\t\\t\\t\/\/ Placement of the video data within the surface.\\r\\n    DWORD dwOriginY;\\t\\t\\t\/\/ Placement of the video data within the surface.\\r\\n    DWORD dwVPFlags;\\t\\t\\t\/\/ Video port options\\r\\n    RECT rCrop;\\t\\t\\t\\t\/\/ Cropping rectangle (optional).\\r\\n    DWORD dwPrescaleWidth;\\t\\t\/\/ Determines pre-scaling\/zooming in the X direction (optional).\\r\\n    DWORD dwPrescaleHeight;\\t\\t\/\/ Determines pre-scaling\/zooming in the Y direction (optional).\\r\\n    LPDDPIXELFORMAT lpddpfInputFormat;\\t\/\/ Video format written to the video port\\r\\n    LPDDPIXELFORMAT lpddpfVBIInputFormat; \/\/ Input format of the VBI data\\r\\n    LPDDPIXELFORMAT lpddpfVBIOutputFormat;\/\/ Output format of the data\\r\\n    DWORD dwVBIHeight;\\t\\t\\t\/\/ Specifies the number of lines of data within the vertical blanking interval.\\r\\n    ULONG_PTR dwReserved1;\\t\\t\/\/ Reserved for future use - set to zero\\r\\n    ULONG_PTR dwReserved2;\\t\\t\/\/ Reserved for future use - set to zero\\r\\n} DDVIDEOPORTINFO;"},"_DDVIDEOPORTNOTIFY":{"comment":"","exp":"","file":"dvp.h","line":403,"type":"Struct","value":"typedef struct _DDVIDEOPORTNOTIFY\\r\\n{\\r\\n    LARGE_INTEGER ApproximateTimeStamp;\\t\/\/ Timestamp in the event notification\\r\\n    LONG lField;                        \/\/ 0 if even, 1 if odd, -1 if unknown\\r\\n    UINT dwSurfaceIndex;                \/\/ Index in the surface chain of the surface that received the sample\\r\\n    LONG lDone;                         \/\/ Call InterlockedIncrement on this when done with sample\\r\\n} DDVIDEOPORTNOTIFY;"},"_DDVIDEOPORTSTATUS":{"comment":"","exp":"","file":"dvp.h","line":389,"type":"Struct","value":"typedef struct _DDVIDEOPORTSTATUS\\r\\n{\\r\\n    DWORD dwSize;\\t\\t\\t\/\/ Size of the structure\\r\\n    BOOL  bInUse;\\t\\t\\t\/\/ TRUE if video port is currently being used\\r\\n    DWORD dwFlags;           \\t\\t\/\/ Currently not used\\r\\n    DWORD dwReserved1;\\t\\t\\t\/\/ Reserved for future use\\r\\n    DDVIDEOPORTCONNECT VideoPortType;\\t\/\/ Information about the connection\\r\\n    ULONG_PTR dwReserved2;\\t\\t\/\/ Reserved for future use\\r\\n    ULONG_PTR dwReserved3;\\t\\t\/\/ Reserved for future use\\r\\n} DDVIDEOPORTSTATUS;"},"_DD_ADDATTACHEDSURFACEDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1260,"type":"Struct","value":"typedef struct _DD_ADDATTACHEDSURFACEDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n    PDD_SURFACE_LOCAL           lpDDSurface;    \/\/ surface struct\\r\\n    PDD_SURFACE_LOCAL           lpSurfAttached; \/\/ surface to attach\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    VOID*                       AddAttachedSurface; \/\/ Unused: Win95 compatibility\\r\\n} DD_ADDATTACHEDSURFACEDATA;"},"_DD_ATTACHLIST":{"comment":"","exp":"","file":"ddrawint.h","line":720,"type":"Struct","value":"typedef struct _DD_ATTACHLIST\\r\\n{\\r\\n    PDD_ATTACHLIST              lpLink;         \/\/ link to next attached surface\\r\\n    PDD_SURFACE_LOCAL           lpAttached;     \/\/ attached surface local object\\r\\n} DD_ATTACHLIST;"},"_DD_BEGINMOCOMPFRAMEDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1881,"type":"Struct","value":"typedef struct _DD_BEGINMOCOMPFRAMEDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL      lpDD;\\r\\n    PDD_MOTIONCOMP_LOCAL      lpMoComp;\\r\\n    PDD_SURFACE_LOCAL         lpDestSurface;        \/\/ [in]  destination buffer in which to decoding this frame\\r\\n    DWORD                     dwInputDataSize;      \/\/ [in]  size of other misc input data to begin frame\\r\\n    LPVOID                    lpInputData;          \/\/ [in]  pointer to misc input data\\r\\n    DWORD                     dwOutputDataSize;     \/\/ [in]  size of other misc output data to begin frame\\r\\n    LPVOID                    lpOutputData;         \/\/ [in]  pointer to output misc data (allocated by client)\\r\\n    HRESULT                   ddRVal;               \/\/ [out]\\r\\n} DD_BEGINMOCOMPFRAMEDATA;"},"_DD_BLTDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1126,"type":"Struct","value":"typedef struct _DD_BLTDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n    PDD_SURFACE_LOCAL           lpDDDestSurface;\/\/ dest surface\\r\\n    RECTL                       rDest;          \/\/ dest rect\\r\\n    PDD_SURFACE_LOCAL           lpDDSrcSurface; \/\/ src surface\\r\\n    RECTL                       rSrc;           \/\/ src rect\\r\\n    DWORD                       dwFlags;        \/\/ blt flags\\r\\n    DWORD                       dwROPFlags;     \/\/ ROP flags (valid for ROPS only)\\r\\n    DDBLTFX                     bltFX;          \/\/ blt FX\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    VOID*                       Blt;            \/\/ Unused: Win95 compatibility\\r\\n    BOOL                        IsClipped;      \/\/ clipped blt?\\r\\n    RECTL                       rOrigDest;      \/\/ unclipped dest rect\\r\\n                                                \/\/ (only valid if IsClipped)\\r\\n    RECTL                       rOrigSrc;       \/\/ unclipped src rect\\r\\n                                                \/\/ (only valid if IsClipped)\\r\\n    DWORD                       dwRectCnt;      \/\/ count of dest rects\\r\\n                                                \/\/ (only valid if IsClipped)\\r\\n    LPRECT                      prDestRects;    \/\/ array of dest rects\\r\\n                                                \/\/ (only valid if IsClipped)\\r\\n    DWORD                       dwAFlags;       \/\/ DDABLT_ flags (for AlphaBlt DDI)\\r\\n    DDARGB                      ddargbScaleFactors;  \/\/ ARGB scaling factors (AlphaBlt)\\r\\n} DD_BLTDATA;"},"_DD_CANCREATESURFACEDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1361,"type":"Struct","value":"typedef struct _DD_CANCREATESURFACEDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;                   \/\/ driver struct\\r\\n    PDD_SURFACEDESC             lpDDSurfaceDesc;        \/\/ description of surface being created\\r\\n    DWORD                       bIsDifferentPixelFormat;\/\/ pixel format differs from primary surface\\r\\n    HRESULT                     ddRVal;                 \/\/ return value\\r\\n    VOID*                       CanCreateSurface;       \/\/ Unused: Win95 compatibility\\r\\n} DD_CANCREATESURFACEDATA;"},"_DD_CANCREATEVPORTDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1445,"type":"Struct","value":"typedef struct _DD_CANCREATEVPORTDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL        lpDD;               \/\/ driver struct\\r\\n    LPDDVIDEOPORTDESC           lpDDVideoPortDesc;\\r\\n    HRESULT                     ddRVal;             \/\/ return value\\r\\n    VOID*                       CanCreateVideoPort; \/\/ Unused: Win95 compatibility\\r\\n} DD_CANCREATEVPORTDATA;"},"_DD_CLIPPER_GLOBAL":{"comment":"","exp":"","file":"ddrawint.h","line":709,"type":"Struct","value":"typedef struct _DD_CLIPPER_GLOBAL\\r\\n{\\r\\n    ULONG_PTR                   dwReserved1;    \/\/ reserved for use by display driver\\r\\n} DD_CLIPPER_GLOBAL;"},"_DD_CLIPPER_LOCAL":{"comment":"","exp":"","file":"ddrawint.h","line":714,"type":"Struct","value":"typedef struct _DD_CLIPPER_LOCAL\\r\\n{\\r\\n    ULONG_PTR                   dwReserved1;    \/\/ reserved for use by display driver\\r\\n} DD_CLIPPER_LOCAL;"},"_DD_COLORCONTROLCALLBACKS":{"comment":"","exp":"","file":"ddrawint.h","line":585,"type":"Struct","value":"typedef struct _DD_COLORCONTROLCALLBACKS\\r\\n{\\r\\n    DWORD                               dwSize;\\r\\n    DWORD                               dwFlags;\\r\\n    PDD_COLORCB_COLORCONTROL            ColorControl;\\r\\n} DD_COLORCONTROLCALLBACKS;"},"_DD_COLORCONTROLDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1655,"type":"Struct","value":"typedef struct _DD_COLORCONTROLDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n    PDD_SURFACE_LOCAL           lpDDSurface;    \/\/ surface\\r\\n    LPDDCOLORCONTROL            lpColorData;    \/\/ color control information\\r\\n    DWORD                       dwFlags;        \/\/ DDRAWI_GETCOLOR\/DDRAWI_SETCOLOR\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    VOID*                       ColorControl;   \/\/ Unused: Win95 compatibility\\r\\n} DD_COLORCONTROLDATA;"},"_DD_CREATEMOCOMPDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1825,"type":"Struct","value":"typedef struct _DD_CREATEMOCOMPDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL      lpDD;\\r\\n    PDD_MOTIONCOMP_LOCAL      lpMoComp;\\r\\n    GUID*                     lpGuid;\\r\\n    DWORD                     dwUncompWidth;\\r\\n    DWORD                     dwUncompHeight;\\r\\n    DDPIXELFORMAT             ddUncompPixelFormat;\\r\\n    LPVOID                    lpData;\\r\\n    DWORD                     dwDataSize;\\r\\n    HRESULT                   ddRVal;\\r\\n} DD_CREATEMOCOMPDATA;"},"_DD_CREATEPALETTEDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1373,"type":"Struct","value":"typedef struct _DD_CREATEPALETTEDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n    PDD_PALETTE_GLOBAL          lpDDPalette;    \/\/ ddraw palette struct\\r\\n    LPPALETTEENTRY              lpColorTable;   \/\/ colors to go in palette\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    VOID*                       CreatePalette;  \/\/ Unused: Win95 compatibility\\r\\n    BOOL                        is_excl;        \/\/ process has exclusive mode\\r\\n} DD_CREATEPALETTEDATA;"},"_DD_CREATESURFACEDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1348,"type":"Struct","value":"typedef struct _DD_CREATESURFACEDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n    PDD_SURFACEDESC             lpDDSurfaceDesc;\/\/ description of surface being created\\r\\n    PDD_SURFACE_LOCAL           *lplpSList;     \/\/ list of created surface objects\\r\\n    DWORD                       dwSCnt;         \/\/ number of surfaces in SList\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    VOID*                       CreateSurface;  \/\/ Unused: Win95 compatibility\\r\\n} DD_CREATESURFACEDATA;"},"_DD_CREATESURFACEEXDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1962,"type":"Struct","value":"typedef struct _DD_CREATESURFACEEXDATA\\r\\n{\\r\\n    DWORD                       dwFlags;\\r\\n    PDD_DIRECTDRAW_LOCAL        lpDDLcl;        \/\/ driver struct\\r\\n    PDD_SURFACE_LOCAL           lpDDSLcl;       \/\/ created surface\\r\\n                                                \/\/ objects\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n} DD_CREATESURFACEEXDATA;"},"_DD_CREATEVPORTDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1456,"type":"Struct","value":"typedef struct _DD_CREATEVPORTDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL        lpDD;              \/\/ driver struct\\r\\n    LPDDVIDEOPORTDESC           lpDDVideoPortDesc;\\r\\n    PDD_VIDEOPORT_LOCAL         lpVideoPort;       \/\/ Video port created\\r\\n    HRESULT                     ddRVal;            \/\/ return value\\r\\n    VOID*                       CreateVideoPort;   \/\/ Unused: Win95 compatibility\\r\\n} DD_CREATEVPORTDATA;"},"_DD_D3DBUFCALLBACKS":{"comment":"","exp":"","file":"ddrawint.h","line":906,"type":"Struct","value":"typedef struct _DD_D3DBUFCALLBACKS\\r\\n{\\r\\n    DWORD dwSize;\\r\\n    DWORD dwFlags;\\r\\n    PDD_CANCREATESURFACE        CanCreateD3DBuffer;\\r\\n    PDD_CREATESURFACE           CreateD3DBuffer;\\r\\n    PDD_SURFCB_DESTROYSURFACE   DestroyD3DBuffer;\\r\\n    PDD_SURFCB_LOCK             LockD3DBuffer;\\r\\n    PDD_SURFCB_UNLOCK           UnlockD3DBuffer;\\r\\n} DD_D3DBUFCALLBACKS, *PDD_D3DBUFCALLBACKS;"},"_DD_DESTROYDDLOCALDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1989,"type":"Struct","value":"typedef struct _DD_DESTROYDDLOCALDATA\\r\\n{\\r\\n    DWORD dwFlags;\\r\\n    PDD_DIRECTDRAW_LOCAL pDDLcl;\\r\\n    HRESULT  ddRVal;\\r\\n} DD_DESTROYDDLOCALDATA;"},"_DD_DESTROYMOCOMPDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1948,"type":"Struct","value":"typedef struct _DD_DESTROYMOCOMPDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL      lpDD;\\r\\n    PDD_MOTIONCOMP_LOCAL      lpMoComp;\\r\\n    HRESULT                   ddRVal;\\r\\n} DD_DESTROYMOCOMPDATA;"},"_DD_DESTROYPALETTEDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1315,"type":"Struct","value":"typedef struct _DD_DESTROYPALETTEDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n    PDD_PALETTE_GLOBAL          lpDDPalette;    \/\/ palette struct\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    VOID*                       DestroyPalette; \/\/ Unused: Win95 compatibility\\r\\n} DD_DESTROYPALETTEDATA;"},"_DD_DESTROYSURFACEDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1238,"type":"Struct","value":"typedef struct _DD_DESTROYSURFACEDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n    PDD_SURFACE_LOCAL           lpDDSurface;    \/\/ surface struct\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    VOID*                       DestroySurface;\/\/ Unused: Win95 compatibility\\r\\n} DD_DESTROYSURFACEDATA;"},"_DD_DESTROYVPORTDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1563,"type":"Struct","value":"typedef struct _DD_DESTROYVPORTDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL        lpDD;             \/\/ driver struct\\r\\n    PDD_VIDEOPORT_LOCAL         lpVideoPort;      \/\/ Video port object\\r\\n    HRESULT                     ddRVal;           \/\/ return value\\r\\n    VOID*                       DestroyVideoPort; \/\/ Unused: Win95 compatibility\\r\\n} DD_DESTROYVPORTDATA;"},"_DD_DIRECTDRAW_GLOBAL":{"comment":"","exp":"","file":"ddrawint.h","line":967,"type":"Struct","value":"typedef struct _DD_DIRECTDRAW_GLOBAL\\r\\n{\\r\\n    VOID*                       dhpdev;         \/\/ driver's private PDEV pointer\\r\\n    ULONG_PTR                   dwReserved1;    \/\/ reserved for use by display driver\\r\\n    ULONG_PTR                   dwReserved2;    \/\/ reserved for use by display driver\\r\\n    LPDDVIDEOPORTCAPS           lpDDVideoPortCaps;\/\/ Info returned by the HAL (an array if more than one video port)\\r\\n} DD_DIRECTDRAW_GLOBAL;"},"_DD_DIRECTDRAW_LOCAL":{"comment":"","exp":"","file":"ddrawint.h","line":975,"type":"Struct","value":"typedef struct _DD_DIRECTDRAW_LOCAL\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpGbl;            \/\/ pointer to data\\r\\n} DD_DIRECTDRAW_LOCAL;"},"_DD_DRVSETCOLORKEYDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1404,"type":"Struct","value":"typedef struct _DD_DRVSETCOLORKEYDATA\\r\\n{\\r\\n    PDD_SURFACE_LOCAL           lpDDSurface;    \/\/ surface struct\\r\\n    DWORD                       dwFlags;        \/\/ flags\\r\\n    DDCOLORKEY                  ckNew;          \/\/ new color key\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    VOID*                       SetColorKey;    \/\/ Unused: Win95 compatibility\\r\\n} DD_DRVSETCOLORKEYDATA;"},"_DD_ENDMOCOMPFRAMEDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1896,"type":"Struct","value":"typedef struct _DD_ENDMOCOMPFRAMEDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL      lpDD;\\r\\n    PDD_MOTIONCOMP_LOCAL      lpMoComp;\\r\\n    LPVOID                    lpInputData;\\r\\n    DWORD                     dwInputDataSize;\\r\\n    HRESULT                   ddRVal;\\r\\n} DD_ENDMOCOMPFRAMEDATA;"},"_DD_FLIPDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1223,"type":"Struct","value":"typedef struct _DD_FLIPDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n    PDD_SURFACE_LOCAL           lpSurfCurr;     \/\/ current surface\\r\\n    PDD_SURFACE_LOCAL           lpSurfTarg;     \/\/ target surface (to flip to)\\r\\n    DWORD                       dwFlags;        \/\/ flags\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    VOID*                       Flip;           \/\/ Unused: Win95 compatibility\\r\\n    PDD_SURFACE_LOCAL           lpSurfCurrLeft;     \/\/ left target surface (to flip to)\\r\\n    PDD_SURFACE_LOCAL           lpSurfTargLeft;     \/\/ left target surface (to flip to)\\r\\n} DD_FLIPDATA;"},"_DD_FLIPTOGDISURFACEDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1744,"type":"Struct","value":"typedef struct _DD_FLIPTOGDISURFACEDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n    DWORD                       dwToGDI;        \/\/ TRUE if flipping to the GDI surface, FALSE if flipping away\\r\\n    DWORD                       dwReserved;     \/\/ reserved for future use\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    VOID*                       FlipToGDISurface; \/\/ Unused: Win95 compatibility\\r\\n} DD_FLIPTOGDISURFACEDATA;"},"_DD_FLIPVPORTDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1468,"type":"Struct","value":"typedef struct _DD_FLIPVPORTDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL        lpDD;          \/\/ driver struct\\r\\n    PDD_VIDEOPORT_LOCAL         lpVideoPort;   \/\/ Video port object\\r\\n    PDD_SURFACE_LOCAL           lpSurfCurr;    \/\/ current surface\\r\\n    PDD_SURFACE_LOCAL           lpSurfTarg;    \/\/ target surface\\r\\n    HRESULT                     ddRVal;        \/\/ return value\\r\\n    VOID*                       FlipVideoPort; \/\/ Unused: Win95 compatibility\\r\\n} DD_FLIPVPORTDATA;"},"_DD_FREEDRIVERMEMORYDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1721,"type":"Struct","value":"typedef struct _DD_FREEDRIVERMEMORYDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;            \/\/ driver struct\\r\\n    PDD_SURFACE_LOCAL           lpDDSurface;     \/\/ surface object trying to be created\\r\\n    HRESULT                     ddRVal;          \/\/ return value\\r\\n    VOID*                       FreeDriverMemory;\/\/ Unused: Win95 compatibility\\r\\n} DD_FREEDRIVERMEMORYDATA;"},"_DD_GETAVAILDRIVERMEMORYDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1701,"type":"Struct","value":"typedef struct _DD_GETAVAILDRIVERMEMORYDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;            \/\/ driver struct\\r\\n    DDSCAPS                     DDSCaps;         \/\/ caps for type of surface memory\\r\\n    DWORD                       dwTotal;         \/\/ total memory for this kind of surface\\r\\n    DWORD                       dwFree;          \/\/ free memory for this kind of surface\\r\\n    HRESULT                     ddRVal;          \/\/ return value\\r\\n    VOID*                       GetAvailDriverMemory; \/\/ Unused: Win95 compatibility\\r\\n} DD_GETAVAILDRIVERMEMORYDATA;"},"_DD_GETBLTSTATUSDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1285,"type":"Struct","value":"typedef struct _DD_GETBLTSTATUSDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n    PDD_SURFACE_LOCAL           lpDDSurface;    \/\/ surface struct\\r\\n    DWORD                       dwFlags;        \/\/ flags\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    VOID*                       GetBltStatus;   \/\/ Unused: Win95 compatibility\\r\\n} DD_GETBLTSTATUSDATA;"},"_DD_GETDRIVERINFODATA":{"comment":"","exp":"","file":"ddrawint.h","line":1674,"type":"Struct","value":"typedef struct _DD_GETDRIVERINFODATA {\\r\\n    \/\/ Input fields filled in by DirectDraw\\r\\n    VOID*                       dhpdev;         \/\/ Driver context\\r\\n    DWORD                       dwSize;         \/\/ Size of this structure\\r\\n    DWORD                       dwFlags;        \/\/ Flags\\r\\n    GUID                        guidInfo;       \/\/ GUID that DirectX is querying for\\r\\n    DWORD                       dwExpectedSize; \/\/ Size of callbacks structure expected by DirectDraw.\\r\\n    PVOID                       lpvData;        \/\/ Buffer that will receive the requested data\\r\\n    \/\/ Output fields filled in by driver\\r\\n    DWORD                       dwActualSize;   \/\/ Size of callbacks structure expected by driver\\r\\n    HRESULT                     ddRVal;         \/\/ Return value from driver\\r\\n} DD_GETDRIVERINFODATA;"},"_DD_GETDRIVERSTATEDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1973,"type":"Struct","value":"typedef struct _DD_GETDRIVERSTATEDATA\\r\\n{\\r\\n    DWORD                       dwFlags;        \/\/ Flags to indicate the data\\r\\n                                                \/\/ required\\r\\n    union\\r\\n    {\\r\\n        PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n        DWORD_PTR                   dwhContext;     \/\/ d3d context\\r\\n    };\\r\\n    LPDWORD                     lpdwStates;     \/\/ ptr to the state data\\r\\n                                                \/\/ to be filled in by the\\r\\n                                                \/\/ driver\\r\\n    DWORD                       dwLength;\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n} DD_GETDRIVERSTATEDATA;"},"_DD_GETFLIPSTATUSDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1297,"type":"Struct","value":"typedef struct _DD_GETFLIPSTATUSDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n    PDD_SURFACE_LOCAL           lpDDSurface;    \/\/ surface struct\\r\\n    DWORD                       dwFlags;        \/\/ flags\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    VOID*                       GetFlipStatus;  \/\/ Unused: Win95 compatibility\\r\\n} DD_GETFLIPSTATUSDATA;"},"_DD_GETHEAPALIGNMENTDATA":{"comment":"","exp":"","file":"dmemmgr.h","line":87,"type":"Struct","value":"typedef struct _DD_GETHEAPALIGNMENTDATA\\r\\n{\\r\\n    ULONG_PTR                  dwInstance;         \/\/ driver context\\r\\n    DWORD                      dwHeap;             \/\/ heap index passed by DirectDraw\\r\\n    HRESULT                    ddRVal;             \/\/ return value\\r\\n    VOID*                      GetHeapAlignment;   \/\/ Unused: Win95 compatibility\\r\\n    HEAPALIGNMENT              Alignment;          \/\/ Filled in by driver.\\r\\n} DD_GETHEAPALIGNMENTDATA;"},"_DD_GETINTERNALMOCOMPDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1867,"type":"Struct","value":"typedef struct _DD_GETINTERNALMOCOMPDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL      lpDD;\\r\\n    GUID*                     lpGuid;\\r\\n    DWORD                     dwWidth;            \/\/ [in]   width of uncompressed data\\r\\n    DWORD                     dwHeight;           \/\/ [in]   height of uncompressed data\\r\\n    DDPIXELFORMAT             ddPixelFormat;      \/\/ [in]   pixel-format of uncompressed data\\r\\n    DWORD                     dwScratchMemAlloc;  \/\/ [out]  amount of scratch memory will the hal allocate for its private use\\r\\n    HRESULT                   ddRVal;             \/\/ [out]\\r\\n} DD_GETINTERNALMOCOMPDATA;"},"_DD_GETMOCOMPCOMPBUFFDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1852,"type":"Struct","value":"typedef struct _DD_GETMOCOMPCOMPBUFFDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL      lpDD;\\r\\n    GUID*                     lpGuid;\\r\\n    DWORD                     dwWidth;            \/\/ [in]   width of uncompressed data\\r\\n    DWORD                     dwHeight;           \/\/ [in]   height of uncompressed data\\r\\n    DDPIXELFORMAT             ddPixelFormat;      \/\/ [in]   pixel-format of uncompressed data\\r\\n    DWORD                     dwNumTypesCompBuffs;\/\/ [in\/out] number of memory types required for comp buffers\\r\\n    LPDDCOMPBUFFERINFO        lpCompBuffInfo;     \/\/ [in]   driver supplied info regarding comp buffers (allocated by client)\\r\\n    HRESULT                   ddRVal;             \/\/ [out]\\r\\n} DD_GETMOCOMPCOMPBUFFDATA;"},"_DD_GETMOCOMPFORMATSDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1813,"type":"Struct","value":"typedef struct _DD_GETMOCOMPFORMATSDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL      lpDD;\\r\\n    GUID*                     lpGuid;\\r\\n    DWORD                     dwNumFormats;\\r\\n    LPDDPIXELFORMAT           lpFormats;\\r\\n    HRESULT                   ddRVal;\\r\\n} DD_GETMOCOMPFORMATSDATA;"},"_DD_GETMOCOMPGUIDSDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1802,"type":"Struct","value":"typedef struct _DD_GETMOCOMPGUIDSDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL      lpDD;\\r\\n    DWORD                     dwNumGuids;\\r\\n    GUID*                     lpGuids;\\r\\n    HRESULT                   ddRVal;\\r\\n} DD_GETMOCOMPGUIDSDATA;"},"_DD_GETSCANLINEDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1416,"type":"Struct","value":"typedef struct _DD_GETSCANLINEDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n    DWORD                       dwScanLine;     \/\/ returned scan line\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    VOID*                       GetScanLine;    \/\/ Unused: Win95 compatibility\\r\\n} DD_GETSCANLINEDATA;"},"_DD_GETVPORTBANDWIDTHDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1481,"type":"Struct","value":"typedef struct _DD_GETVPORTBANDWIDTHDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL        lpDD;                  \/\/ driver struct\\r\\n    PDD_VIDEOPORT_LOCAL         lpVideoPort;           \/\/ Video port object\\r\\n    LPDDPIXELFORMAT             lpddpfFormat;          \/\/ Format for bandwidth\\r\\n    DWORD                       dwWidth;\\r\\n    DWORD                       dwHeight;\\r\\n    DWORD                       dwFlags;               \/\/ Prescale factor for bandwidth\\r\\n    LPDDVIDEOPORTBANDWIDTH      lpBandwidth;           \/\/ Returned bandwidth parameters\\r\\n    HRESULT                     ddRVal;                \/\/ return value\\r\\n    VOID*                       GetVideoPortBandwidth; \/\/ Unused: Win95 compatibility\\r\\n} DD_GETVPORTBANDWIDTHDATA;"},"_DD_GETVPORTCONNECTDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1550,"type":"Struct","value":"typedef struct _DD_GETVPORTCONNECTDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL        lpDD;                    \/\/ driver struct\\r\\n    DWORD                       dwPortId;                \/\/ ID of desired video port\\r\\n    LPDDVIDEOPORTCONNECT        lpConnect;               \/\/ Array of DDVIDEOPORTCONNECT structures\\r\\n    DWORD                       dwNumEntries;            \/\/ # of structures in array\\r\\n    HRESULT                     ddRVal;                  \/\/ return value\\r\\n    VOID*                       GetVideoPortConnectInfo; \/\/ Unused: Win95 compatibility\\r\\n} DD_GETVPORTCONNECTDATA;"},"_DD_GETVPORTFIELDDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1526,"type":"Struct","value":"typedef struct _DD_GETVPORTFIELDDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL        lpDD;              \/\/ driver struct\\r\\n    PDD_VIDEOPORT_LOCAL         lpVideoPort;       \/\/ Video port object\\r\\n    BOOL                        bField;            \/\/ TRUE if even\\r\\n    HRESULT                     ddRVal;            \/\/ return value\\r\\n    VOID*                       GetVideoPortField; \/\/ Unused: Win95 compatibility\\r\\n} DD_GETVPORTFIELDDATA;"},"_DD_GETVPORTFLIPSTATUSDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1574,"type":"Struct","value":"typedef struct _DD_GETVPORTFLIPSTATUSDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL        lpDD;                   \/\/ driver struct\\r\\n    FLATPTR                     fpSurface;              \/\/ surface struct\\r\\n    HRESULT                     ddRVal;                 \/\/ return value\\r\\n    VOID*                       GetVideoPortFlipStatus; \/\/ Unused: Win95 compatibility\\r\\n} DD_GETVPORTFLIPSTATUSDATA;"},"_DD_GETVPORTINPUTFORMATDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1497,"type":"Struct","value":"typedef struct _DD_GETVPORTINPUTFORMATDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL        lpDD;                     \/\/ driver struct\\r\\n    PDD_VIDEOPORT_LOCAL         lpVideoPort;              \/\/ Video port object\\r\\n    DWORD                       dwFlags;                  \/\/ VBI, regular, or both\\r\\n    LPDDPIXELFORMAT             lpddpfFormat;             \/\/ Array of formats\\r\\n    DWORD                       dwNumFormats;             \/\/ # of formats in array\\r\\n    HRESULT                     ddRVal;                   \/\/ return value\\r\\n    VOID*                       GetVideoPortInputFormats; \/\/ Unused: Win95 compatibility\\r\\n} DD_GETVPORTINPUTFORMATDATA;"},"_DD_GETVPORTLINEDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1538,"type":"Struct","value":"typedef struct _DD_GETVPORTLINEDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL        lpDD;             \/\/ driver struct\\r\\n    PDD_VIDEOPORT_LOCAL         lpVideoPort;      \/\/ Video port object\\r\\n    DWORD                       dwLine;           \/\/ Current line counter\\r\\n    HRESULT                     ddRVal;           \/\/ return value\\r\\n    VOID*                       GetVideoPortLine; \/\/ Unused: Win95 compatibility\\r\\n} DD_GETVPORTLINEDATA;"},"_DD_GETVPORTOUTPUTFORMATDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1511,"type":"Struct","value":"typedef struct _DD_GETVPORTOUTPUTFORMATDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL        lpDD;                     \/\/ driver struct\\r\\n    PDD_VIDEOPORT_LOCAL         lpVideoPort;              \/\/ Video port object\\r\\n    DWORD                       dwFlags;                  \/\/ VBI, regular, or both\\r\\n    LPDDPIXELFORMAT             lpddpfInputFormat;        \/\/ Input format\\r\\n    LPDDPIXELFORMAT             lpddpfOutputFormats;      \/\/ Array of output formats\\r\\n    DWORD                       dwNumFormats;             \/\/ # of formats in array\\r\\n    HRESULT                     ddRVal;                   \/\/ return value\\r\\n    VOID*                       GetVideoPortInputFormats; \/\/ Unused: Win95 compatibility\\r\\n} DD_GETVPORTOUTPUTFORMATDATA;"},"_DD_GETVPORTSIGNALDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1621,"type":"Struct","value":"typedef struct _DD_GETVPORTSIGNALDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL        lpDD;                 \/\/ driver struct\\r\\n    PDD_VIDEOPORT_LOCAL         lpVideoPort;          \/\/ Video port object\\r\\n    DWORD                       dwStatus;             \/\/ Video signal status\\r\\n    HRESULT                     ddRVal;               \/\/ return value\\r\\n    VOID*                       GetVideoSignalStatus; \/\/ Unused: Win95 compatibility\\r\\n} DD_GETVPORTSIGNALDATA;"},"_DD_HALINFO":{"comment":"","exp":"","file":"ddrawint.h","line":946,"type":"Struct","value":"typedef struct _DD_HALINFO\\r\\n{\\r\\n    DWORD                       dwSize;\\r\\n    VIDEOMEMORYINFO             vmiData;                \/\/ video memory info\\r\\n    DDNTCORECAPS                ddCaps;                 \/\/ hw specific caps\\r\\n    PDD_GETDRIVERINFO           GetDriverInfo;          \/\/ callback for querying driver data\\r\\n    DWORD                       dwFlags;                \/\/ create flags\\r\\n    LPVOID                      lpD3DGlobalDriverData;  \/\/ D3D global Data\\r\\n    LPVOID                      lpD3DHALCallbacks;      \/\/ D3D callbacks\\r\\n    PDD_D3DBUFCALLBACKS         lpD3DBufCallbacks;      \/\/ Buffer callbacks\\r\\n} DD_HALINFO, *PDD_HALINFO;"},"_DD_HALINFO_V4":{"comment":"","exp":"","file":"ddrawint.h","line":937,"type":"Struct","value":"typedef struct _DD_HALINFO_V4\\r\\n{\\r\\n    DWORD                       dwSize;\\r\\n    VIDEOMEMORYINFO             vmiData;                \/\/ video memory info\\r\\n    DDNTCORECAPS                ddCaps;                 \/\/ hw specific caps\\r\\n    PDD_GETDRIVERINFO           GetDriverInfo;          \/\/ callback for querying driver data\\r\\n    DWORD                       dwFlags;                \/\/ create flags\\r\\n} DD_HALINFO_V4, *PDD_HALINFO_V4;"},"_DD_LOCKDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1154,"type":"Struct","value":"typedef struct _DD_LOCKDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n    PDD_SURFACE_LOCAL           lpDDSurface;    \/\/ surface struct\\r\\n    DWORD                       bHasRect;       \/\/ rArea is valid\\r\\n    RECTL                       rArea;          \/\/ area being locked\\r\\n    LPVOID                      lpSurfData;     \/\/ pointer to screen memory (return value)\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    VOID*                       Lock;           \/\/ Unused: Win95 compatibility\\r\\n    DWORD                       dwFlags;        \/\/ DDLOCK flags\\r\\n    FLATPTR                     fpProcess;      \/\/ process start address\\r\\n} DD_LOCKDATA;"},"_DD_MAPMEMORYDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1427,"type":"Struct","value":"typedef struct _DD_MAPMEMORYDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n    BOOL                        bMap;           \/\/ TRUE if map; FALSe if un-map\\r\\n    HANDLE                      hProcess;       \/\/ process handle\\r\\n    FLATPTR                     fpProcess;      \/\/ returned address in process' address space\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n} DD_MAPMEMORYDATA;"},"_DD_MISCELLANEOUS2CALLBACKS":{"comment":"","exp":"","file":"ddrawint.h","line":409,"type":"Struct","value":"typedef struct _DD_MISCELLANEOUS2CALLBACKS {\\r\\n    DWORD                               dwSize;\\r\\n    DWORD                               dwFlags;\\r\\n    PDD_ALPHABLT                        AlphaBlt;\\r\\n    PDD_CREATESURFACEEX                 CreateSurfaceEx;\\r\\n    PDD_GETDRIVERSTATE                  GetDriverState;\\r\\n    PDD_DESTROYDDLOCAL                  DestroyDDLocal;\\r\\n} DD_MISCELLANEOUS2CALLBACKS, *PDD_MISCELLANEOUS2CALLBACKS;"},"_DD_MISCELLANEOUSCALLBACKS":{"comment":"","exp":"","file":"ddrawint.h","line":392,"type":"Struct","value":"typedef struct _DD_MISCELLANEOUSCALLBACKS {\\r\\n    DWORD                               dwSize;\\r\\n    DWORD                               dwFlags;\\r\\n    PDD_GETAVAILDRIVERMEMORY            GetAvailDriverMemory;\\r\\n} DD_MISCELLANEOUSCALLBACKS, *PDD_MISCELLANEOUSCALLBACKS;"},"_DD_MORECAPS":{"comment":"","exp":"","file":"ddrawint.h","line":820,"type":"Struct","value":"typedef struct _DD_MORECAPS\\r\\n{\\r\\n    DWORD   dwSize; \\t\\t    \/\/ size of DDMORECAPS structure\\r\\n    DWORD   dwAlphaCaps;\\t    \/\/ driver-specific alpha caps for overlays & Vmem->Vmem blts\\r\\n    DWORD   dwSVBAlphaCaps;\\t    \/\/ driver-specific alpha capabilities for System->Vmem blts\\r\\n    DWORD   dwVSBAlphaCaps;\\t    \/\/ driver-specific alpha capabilities for Vmem->System blts\\r\\n    DWORD   dwSSBAlphaCaps;\\t    \/\/ driver-specific alpha capabilities for System->System blts\\r\\n    DWORD   dwFilterCaps;           \/\/ driver-specific filter caps for overlays & Vmem->Vmem blts\\r\\n    DWORD   dwSVBFilterCaps;        \/\/ driver-specific filter capabilities for System->Vmem blts\\r\\n    DWORD   dwVSBFilterCaps;        \/\/ driver-specific filter capabilities for Vmem->System blts\\r\\n    DWORD   dwSSBFilterCaps;        \/\/ driver-specific filter capabilities for System->System blts\\r\\n} DD_MORECAPS;"},"_DD_MORESURFACECAPS":{"comment":"","exp":"","file":"ddrawint.h","line":1018,"type":"Struct","value":"typedef struct _DD_MORESURFACECAPS\\r\\n{\\r\\n    DWORD       dwSize;             \/\/ size of DDMORESURFACECAPS structure\\r\\n    DDSCAPSEX   ddsCapsMore;\\r\\n    \/*\\r\\n     * The DDMORESURFACECAPS struct is of variable size. The following list may be\\r\\n     * filled in by DX6-aware drivers (see DDVERSIONINFO) to restrict their\\r\\n     * video memory heaps (those which are exposed to DirectDraw) to\\r\\n     * certain sets of DDSCAPS_ bits. Thse entries are exactly analogous to\\r\\n     * the ddsCaps and ddsCapsAlt members of the VIDMEM structures listed in\\r\\n     * the VIDMEMINFO.pvmList member of DDHALINFO.vmiData. There should be\\r\\n     * exactly DDHALINFO.vmiData.dwNumHeaps copies of tagExtendedHeapRestrictions\\r\\n     * in this struct. The size of this struct is thus:\\r\\n     *  DDMORESURFACECAPS.dwSize = sizeof(DDMORESURFACECAPS) +\\r\\n     *          (DDHALINFO.vmiData.dwNumHeaps-1) * sizeof(DDSCAPSEX)*2;\\r\\n     * Note the -1 accounts for the fact that DDMORESURFACECAPS is declared to have 1\\r\\n     * tagExtendedHeapRestrictions member.\\r\\n     *\/\\r\\n    struct tagNTExtendedHeapRestrictions\\r\\n    {\\r\\n        DDSCAPSEX   ddsCapsEx;\\r\\n        DDSCAPSEX   ddsCapsExAlt;\\r\\n    } ddsExtendedHeapRestrictions[1];\\r\\n} DD_MORESURFACECAPS;"},"_DD_MOTIONCOMP_LOCAL":{"comment":"","exp":"","file":"ddrawint.h","line":998,"type":"Struct","value":"typedef struct _DD_MOTIONCOMP_LOCAL\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL        lpDD;             \/\/ pointer to DIRECTDRAW_LCL\\r\\n    GUID                            guid;\\r\\n    DWORD                           dwUncompWidth;\\r\\n    DWORD                           dwUncompHeight;\\r\\n    DDPIXELFORMAT                   ddUncompPixelFormat;\\r\\n    DWORD                           dwDriverReserved1;\\r\\n    DWORD                           dwDriverReserved2;\\r\\n    DWORD                           dwDriverReserved3;\\r\\n    LPVOID                          lpDriverReserved1;\\r\\n    LPVOID                          lpDriverReserved2;\\r\\n    LPVOID                          lpDriverReserved3;\\r\\n} DD_MOTIONCOMP_LOCAL;"},"_DD_NONLOCALVIDMEMCAPS":{"comment":"","exp":"","file":"ddrawint.h","line":681,"type":"Struct","value":"typedef struct _DD_NONLOCALVIDMEMCAPS\\r\\n{\\r\\n    DWORD   dwSize;\\r\\n    DWORD   dwNLVBCaps;           \/\/ driver specific capabilities for non-local->local vidmem blts\\r\\n    DWORD   dwNLVBCaps2;          \/\/ more driver specific capabilities non-local->local vidmem blts\\r\\n    DWORD   dwNLVBCKeyCaps;       \/\/ driver color key capabilities for non-local->local vidmem blts\\r\\n    DWORD   dwNLVBFXCaps;         \/\/ driver FX capabilities for non-local->local blts\\r\\n    DWORD   dwNLVBRops[DD_ROP_SPACE]; \/\/ ROPS supported for non-local->local blts\\r\\n} DD_NONLOCALVIDMEMCAPS;"},"_DD_NTCALLBACKS":{"comment":"","exp":"","file":"ddrawint.h","line":434,"type":"Struct","value":"typedef struct _DD_NTCALLBACKS {\\r\\n    DWORD                   dwSize;\\r\\n    DWORD                   dwFlags;\\r\\n    PDD_FREEDRIVERMEMORY    FreeDriverMemory;\\r\\n    PDD_SETEXCLUSIVEMODE    SetExclusiveMode;\\r\\n    PDD_FLIPTOGDISURFACE    FlipToGDISurface;\\r\\n} DD_NTCALLBACKS, *PDD_NTCALLBACKS;"},"_DD_PALETTE_GLOBAL":{"comment":"","exp":"","file":"ddrawint.h","line":695,"type":"Struct","value":"typedef struct _DD_PALETTE_GLOBAL\\r\\n{\\r\\n    ULONG_PTR                   dwReserved1;    \/\/ reserved for use by display driver\\r\\n} DD_PALETTE_GLOBAL;"},"_DD_PALETTE_LOCAL":{"comment":"","exp":"","file":"ddrawint.h","line":700,"type":"Struct","value":"typedef struct _DD_PALETTE_LOCAL\\r\\n{\\r\\n    ULONG                       dwReserved0;    \/\/ reserved for future expansion\\r\\n    ULONG_PTR                   dwReserved1;    \/\/ reserved for use by display driver\\r\\n} DD_PALETTE_LOCAL;"},"_DD_QUERYMOCOMPSTATUSDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1934,"type":"Struct","value":"typedef struct _DD_QUERYMOCOMPSTATUSDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL      lpDD;\\r\\n    PDD_MOTIONCOMP_LOCAL      lpMoComp;\\r\\n    PDD_SURFACE_LOCAL         lpSurface;        \/\/ [in]  Surface being queried\\r\\n    DWORD                     dwFlags;          \/\/ [in]  DDMCQUERY_XXX flags\\r\\n    HRESULT                   ddRVal;            \/\/ [out]\\r\\n} DD_QUERYMOCOMPSTATUSDATA;"},"_DD_RENDERMOCOMPDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1917,"type":"Struct","value":"typedef struct _DD_RENDERMOCOMPDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL      lpDD;\\r\\n    PDD_MOTIONCOMP_LOCAL      lpMoComp;\\r\\n    DWORD                     dwNumBuffers;     \/\/ [in]  Number of entries in the lpMacroBlockInfo array\\r\\n    LPDDMOCOMPBUFFERINFO      lpBufferInfo;     \/\/ [in]  Surfaces containing macro block info\\r\\n    DWORD                     dwFunction;       \/\/ [in]  Function\\r\\n    LPVOID                    lpInputData;\\r\\n    DWORD                     dwInputDataSize;\\r\\n    LPVOID                    lpOutputData;\\r\\n    DWORD                     dwOutputDataSize;\\r\\n    HRESULT                   ddRVal;           \/\/ [out]\\r\\n} DD_RENDERMOCOMPDATA;"},"_DD_SETCLIPLISTDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1249,"type":"Struct","value":"typedef struct _DD_SETCLIPLISTDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n    PDD_SURFACE_LOCAL           lpDDSurface;    \/\/ surface struct\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    VOID*                       SetClipList;    \/\/ Unused: Win95 compatibility\\r\\n} DD_SETCLIPLISTDATA;"},"_DD_SETCOLORKEYDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1272,"type":"Struct","value":"typedef struct _DD_SETCOLORKEYDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n    PDD_SURFACE_LOCAL           lpDDSurface;    \/\/ surface struct\\r\\n    DWORD                       dwFlags;        \/\/ flags\\r\\n    DDCOLORKEY                  ckNew;          \/\/ new color key\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    VOID*                       SetColorKey;    \/\/ Unused: Win95 compatibility\\r\\n} DD_SETCOLORKEYDATA;"},"_DD_SETENTRIESDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1326,"type":"Struct","value":"typedef struct _DD_SETENTRIESDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n    PDD_PALETTE_GLOBAL          lpDDPalette;    \/\/ palette struct\\r\\n    DWORD                       dwBase;         \/\/ base palette index\\r\\n    DWORD                       dwNumEntries;   \/\/ number of palette entries\\r\\n    LPPALETTEENTRY              lpEntries;      \/\/ color table\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    VOID*                       SetEntries;     \/\/ Unused: Win95 compatibility\\r\\n} DD_SETENTRIESDATA;"},"_DD_SETEXCLUSIVEMODEDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1732,"type":"Struct","value":"typedef struct _DD_SETEXCLUSIVEMODEDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n    DWORD                       dwEnterExcl;    \/\/ TRUE if entering exclusive mode, FALSE is leaving\\r\\n    DWORD                       dwReserved;     \/\/ reserved for future use\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    VOID*                       SetExclusiveMode; \/\/ Unused: Win95 compatibility\\r\\n} DD_SETEXCLUSIVEMODEDATA;"},"_DD_SETOVERLAYPOSITIONDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1197,"type":"Struct","value":"typedef struct _DD_SETOVERLAYPOSITIONDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n    PDD_SURFACE_LOCAL           lpDDSrcSurface; \/\/ src surface\\r\\n    PDD_SURFACE_LOCAL           lpDDDestSurface;\/\/ dest surface\\r\\n    LONG                        lXPos;          \/\/ x position\\r\\n    LONG                        lYPos;          \/\/ y position\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    VOID*                       SetOverlayPosition; \/\/ Unused: Win95 compatibility\\r\\n} DD_SETOVERLAYPOSITIONDATA;"},"_DD_SETPALETTEDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1210,"type":"Struct","value":"typedef struct _DD_SETPALETTEDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n    PDD_SURFACE_LOCAL           lpDDSurface;    \/\/ surface struct\\r\\n    PDD_PALETTE_GLOBAL          lpDDPalette;    \/\/ palette to set to surface\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    VOID*                       SetPalette;     \/\/ Unused: Win95 compatibility\\r\\n    BOOL                        Attach;         \/\/ attach this palette?\\r\\n} DD_SETPALETTEDATA;"},"_DD_STEREOMODE":{"comment":"","exp":"","file":"ddrawint.h","line":1045,"type":"Struct","value":"typedef struct _DD_STEREOMODE\\r\\n{\\r\\n    DWORD       dwSize;             \/\/ size of DDSTEREOMODECAPS structure\\r\\n    DWORD       dwHeight;\\r\\n    DWORD       dwWidth;\\r\\n    DWORD       dwBpp;\\r\\n    DWORD       dwRefreshRate;\\r\\n    BOOL        bSupported;\\r\\n} DD_STEREOMODE;"},"_DD_SURFACE_GLOBAL":{"comment":"","exp":"","file":"ddrawint.h","line":739,"type":"Struct","value":"typedef struct _DD_SURFACE_GLOBAL\\r\\n{\\r\\n    union \\r\\n    {\\r\\n        DWORD                   dwBlockSizeY;   \/\/ block size that display driver requested (return)\\r\\n        LONG                    lSlicePitch;    \/\/ slice pitch for volume textures\\r\\n    };\\r\\n    union \\r\\n    {\\r\\n        LPVIDEOMEMORY           lpVidMemHeap;   \/\/ heap vidmem was alloc'ed from\\r\\n        DWORD                   dwBlockSizeX;   \/\/ block size that display driver requested (return)\\r\\n        DWORD                   dwUserMemSize;  \/\/ user-mode memory size that display driver requested (return)\\r\\n    };\\r\\n    FLATPTR                     fpVidMem;       \/\/ pointer to video memory\\r\\n    union\\r\\n    {\\r\\n        LONG                    lPitch;         \/\/ pitch of surface\\r\\n        DWORD                   dwLinearSize;   \/\/ linear size of non-rectangular surface\\r\\n    };\\r\\n    LONG                        yHint;          \/\/ y-coordinate of surface\\r\\n    LONG                        xHint;          \/\/ x-coordinate of surface\\r\\n    DWORD                       wHeight;        \/\/ height of surface\\r\\n    DWORD                       wWidth;         \/\/ width of surface\\r\\n    ULONG_PTR                   dwReserved1;    \/\/ reserved for use by display driver\\r\\n    DDPIXELFORMAT               ddpfSurface;    \/\/ pixel format of surface\\r\\n    FLATPTR                     fpHeapOffset;   \/\/ raw offset in source heap\\r\\n    HANDLE                      hCreatorProcess;\/\/ opaque identifier for creating process\\r\\n} DD_SURFACE_GLOBAL;"},"_DD_SURFACE_INT":{"comment":"","exp":"","file":"ddrawint.h","line":729,"type":"Struct","value":"typedef struct _DD_SURFACE_INT\\r\\n{\\r\\n    PDD_SURFACE_LOCAL           lpLcl;          \/\/ pointer to interface data\\r\\n} DD_SURFACE_INT;"},"_DD_SURFACE_LOCAL":{"comment":"","exp":"","file":"ddrawint.h","line":786,"type":"Struct","value":"typedef struct _DD_SURFACE_LOCAL\\r\\n{\\r\\n    PDD_SURFACE_GLOBAL          lpGbl;            \/\/ pointer to surface shared data\\r\\n    DWORD                       dwFlags;          \/\/ flags\\r\\n    DDSCAPS                     ddsCaps;          \/\/ capabilities of surface\\r\\n    ULONG_PTR                   dwReserved1;      \/\/ reserved for use by display driver\\r\\n    union\\r\\n    {\\r\\n        DDCOLORKEY              ddckCKSrcOverlay; \/\/ color key for source overlay use\\r\\n        DDCOLORKEY              ddckCKSrcBlt;     \/\/ color key for source blt and texture use\\r\\n    };\\r\\n    union\\r\\n    {\\r\\n        DDCOLORKEY              ddckCKDestOverlay;\/\/ color key for destination overlay use\\r\\n        DDCOLORKEY              ddckCKDestBlt;    \/\/ color key for destination blt\\r\\n    };\\r\\n    PDD_SURFACE_MORE            lpSurfMore;       \/\/ pointer to additional local data\\r\\n    PDD_ATTACHLIST              lpAttachList;     \/\/ link to surfaces we attached to\\r\\n    PDD_ATTACHLIST              lpAttachListFrom; \/\/ link to surfaces that attached to us\\r\\n    RECT                        rcOverlaySrc;     \/\/ Overlay source rectangle relative to surface\\r\\n} DD_SURFACE_LOCAL;"},"_DD_SURFACE_MORE":{"comment":"","exp":"","file":"ddrawint.h","line":774,"type":"Struct","value":"typedef struct _DD_SURFACE_MORE\\r\\n{\\r\\n    DWORD                       dwMipMapCount;      \/\/ number of mip-map levels\\r\\n    PDD_VIDEOPORT_LOCAL         lpVideoPort;        \/\/ video port currently writing data to this surface\\r\\n    DWORD                       dwOverlayFlags;     \/\/ current overlay flags\\r\\n    DDSCAPSEX                   ddsCapsEx;          \/\/ more surface capabilities\\r\\n    DWORD                       dwSurfaceHandle;    \/\/ cookie for use with CreateSurfaceEx DDI\\r\\n} DD_SURFACE_MORE, *PDD_SURFACE_MORE;"},"_DD_SYNCSURFACEDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1762,"type":"Struct","value":"typedef struct _DD_SYNCSURFACEDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL   lpDD;        \/\/ driver struct\\r\\n    PDD_SURFACE_LOCAL      lpDDSurface; \/\/ Surface to sync with\\r\\n    DWORD       dwSurfaceOffset;        \/\/ Offset in frame buffer of surface\\r\\n    ULONG_PTR    fpLockPtr;              \/\/ Surface lock ptr\\r\\n    LONG        lPitch;                 \/\/ Surface pitch\\r\\n    DWORD       dwOverlayOffset;        \/\/ Added to dwSurfaceOffset for origin, clipping, etc.\\r\\n    ULONG       dwDriverReserved1;      \/\/ Reserved for the HAL\\r\\n    ULONG       dwDriverReserved2;      \/\/ Reserved for the HAL\\r\\n    ULONG       dwDriverReserved3;      \/\/ Reserved for the HAL\\r\\n    ULONG       dwDriverReserved4;      \/\/ Reserved for the HAL\\r\\n    HRESULT     ddRVal;\\r\\n} DD_SYNCSURFACEDATA;"},"_DD_SYNCVIDEOPORTDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1780,"type":"Struct","value":"typedef struct _DD_SYNCVIDEOPORTDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL    lpDD;       \/\/ driver struct\\r\\n    PDD_VIDEOPORT_LOCAL     lpVideoPort;\/\/ Video port object\\r\\n    DWORD       dwOriginOffset;         \/\/ Start address relative to surface\\r\\n    DWORD       dwHeight;               \/\/ Height of total video region (per field)\\r\\n    DWORD       dwVBIHeight;            \/\/ Height of VBI region (per field)\\r\\n    ULONG       dwDriverReserved1;      \/\/ Reserved for the HAL\\r\\n    ULONG       dwDriverReserved2;      \/\/ Reserved for the HAL\\r\\n    ULONG       dwDriverReserved3;      \/\/ Reserved for the HAL\\r\\n    HRESULT     ddRVal;\\r\\n} DD_SYNCVIDEOPORTDATA;"},"_DD_UNLOCKDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1170,"type":"Struct","value":"typedef struct _DD_UNLOCKDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n    PDD_SURFACE_LOCAL           lpDDSurface;    \/\/ surface struct\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    VOID*                       Unlock;         \/\/ Unused: Win95 compatibility\\r\\n} DD_UNLOCKDATA;"},"_DD_UPDATENONLOCALHEAPDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1058,"type":"Struct","value":"typedef struct _DD_UPDATENONLOCALHEAPDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL      lpDD;                \/\/ driver struct\\r\\n    DWORD                      dwHeap;              \/\/ heap index\\r\\n    FLATPTR                    fpGARTLin;           \/\/ linear GART address of start of heap\\r\\n    FLATPTR                    fpGARTDev;           \/\/ high physical GART address of start of heap\\r\\n    ULONG_PTR                  ulPolicyMaxBytes;    \/\/ maximum amount of AGP memory to use\\r\\n    HRESULT                    ddRVal;              \/\/ return value\\r\\n    VOID*                      UpdateNonLocalHeap;  \/\/ Unused: Win95 compatibility\\r\\n} DD_UPDATENONLOCALHEAPDATA;"},"_DD_UPDATEOVERLAYDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1181,"type":"Struct","value":"typedef struct _DD_UPDATEOVERLAYDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n    PDD_SURFACE_LOCAL           lpDDDestSurface;\/\/ dest surface\\r\\n    RECTL                       rDest;          \/\/ dest rect\\r\\n    PDD_SURFACE_LOCAL           lpDDSrcSurface; \/\/ src surface\\r\\n    RECTL                       rSrc;           \/\/ src rect\\r\\n    DWORD                       dwFlags;        \/\/ flags\\r\\n    DDOVERLAYFX                 overlayFX;      \/\/ overlay FX\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    VOID*                       UpdateOverlay;  \/\/ Unused: Win95 compatibility\\r\\n} DD_UPDATEOVERLAYDATA;"},"_DD_UPDATEVPORTDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1586,"type":"Struct","value":"typedef struct _DD_UPDATEVPORTDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL        lpDD;             \/\/ driver struct\\r\\n    PDD_VIDEOPORT_LOCAL         lpVideoPort;      \/\/ Video port object\\r\\n    PDD_SURFACE_INT            *lplpDDSurface;    \/\/ surface struct\\r\\n    PDD_SURFACE_INT            *lplpDDVBISurface; \/\/ VBI surface structure\\r\\n    PDD_VIDEOPORTINFO           lpVideoInfo;      \/\/ Video information\\r\\n    DWORD                       dwFlags;          \/\/ DDRAWI_VPORTSTART, DDRAWI_VPORTSTOP, DDRAWI_VPORTUPDATE\\r\\n    DWORD                       dwNumAutoflip;    \/\/ # of autoflip surfaces. If > 1, lpDDSurface is an array.\\r\\n    DWORD                       dwNumVBIAutoflip; \/\/ # of autoflip surfaces. If > 1, lpDDVBISurface is an array.\\r\\n    HRESULT                     ddRVal;           \/\/ return value\\r\\n    VOID*                       UpdateVideoPort;  \/\/ Unused: Win95 compatibility\\r\\n} DD_UPDATEVPORTDATA;"},"_DD_VIDEOPORT_LOCAL":{"comment":"","exp":"","file":"ddrawint.h","line":980,"type":"Struct","value":"typedef struct _DD_VIDEOPORT_LOCAL\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL        lpDD;             \/\/ pointer to DIRECTDRAW_LCL\\r\\n    DDVIDEOPORTDESC             ddvpDesc;         \/\/ description used at create time\\r\\n    DDVIDEOPORTINFO             ddvpInfo;         \/\/ most recent video port info\\r\\n    PDD_SURFACE_INT             lpSurface;        \/\/ surface receiving the data\\r\\n    PDD_SURFACE_INT             lpVBISurface;     \/\/ surface receiving the VBI data\\r\\n    DWORD                       dwNumAutoflip;    \/\/ Number of current autoflip surfaces\\r\\n    DWORD                       dwNumVBIAutoflip; \/\/ Number of VBI surfaces currently being autoflipped\\r\\n    ULONG_PTR                   dwReserved1;      \/\/ Reserved for display driver\\r\\n    ULONG_PTR                   dwReserved2;      \/\/ Reserved for display driver\\r\\n    ULONG_PTR                   dwReserved3;      \/\/ Reserved for display driver\\r\\n} DD_VIDEOPORT_LOCAL;"},"_DD_VPORTCOLORDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1633,"type":"Struct","value":"typedef struct _DD_VPORTCOLORDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL        lpDD;         \/\/ driver struct\\r\\n    PDD_VIDEOPORT_LOCAL         lpVideoPort;  \/\/ Video port object\\r\\n    DWORD                       dwFlags;      \/\/ Video signal status\\r\\n    LPDDCOLORCONTROL            lpColorData;\\r\\n    HRESULT                     ddRVal;       \/\/ return value\\r\\n    VOID*                       ColorControl; \/\/ Unused: Win95 compatibility\\r\\n} DD_VPORTCOLORDATA;"},"_DD_WAITFORVERTICALBLANKDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1391,"type":"Struct","value":"typedef struct _DD_WAITFORVERTICALBLANKDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_GLOBAL       lpDD;           \/\/ driver struct\\r\\n    DWORD                       dwFlags;        \/\/ flags\\r\\n    DWORD                       bIsInVB;        \/\/ is in vertical blank\\r\\n    ULONG_PTR                   hEvent;         \/\/ event\\r\\n    HRESULT                     ddRVal;         \/\/ return value\\r\\n    VOID*                       WaitForVerticalBlank; \/\/ Unused: Win95 compatibility\\r\\n} DD_WAITFORVERTICALBLANKDATA;"},"_DD_WAITFORVPORTSYNCDATA":{"comment":"","exp":"","file":"ddrawint.h","line":1607,"type":"Struct","value":"typedef struct _DD_WAITFORVPORTSYNCDATA\\r\\n{\\r\\n    PDD_DIRECTDRAW_LOCAL        lpDD;            \/\/ driver struct\\r\\n    PDD_VIDEOPORT_LOCAL         lpVideoPort;     \/\/ Video port object\\r\\n    DWORD                       dwFlags;         \/\/ DDVPEVENT_XXXX\\r\\n    DWORD                       dwLine;\\r\\n    DWORD                       dwTimeOut;       \/\/ Max time to wait before returning\\r\\n    HRESULT                     ddRVal;          \/\/ return value\\r\\n    VOID*                       UpdateVideoPort; \/\/ Unused: Win95 compatibility\\r\\n} DD_WAITFORVPORTSYNCDATA;"},"_DISPLAYMODEINFO":{"comment":"","exp":"","file":"ddrawi.h","line":1310,"type":"Struct","value":"typedef struct _DISPLAYMODEINFO\\r\\n{\\r\\n    WORD wWidth;\\r\\n    WORD wHeight;\\r\\n    BYTE wBPP;\\r\\n    BYTE wMonitorsAttachedToDesktop;\\r\\n    WORD wRefreshRate;\\r\\n} DISPLAYMODEINFO;"},"_DXAPI_INTERFACE":{"comment":"","exp":"","file":"dxmini.h","line":328,"type":"Struct","value":"typedef struct _DXAPI_INTERFACE {\\r\\n    USHORT                  Size;\\r\\n    USHORT                  Version;\\r\\n    PVOID                   Context;\\r\\n    PVOID                   InterfaceReference;\\r\\n    PVOID                   InterfaceDereference;\\r\\n    PDX_GETIRQINFO          DxGetIrqInfo;\\r\\n    PDX_ENABLEIRQ           DxEnableIrq;\\r\\n    PDX_SKIPNEXTFIELD       DxSkipNextField;\\r\\n    PDX_BOBNEXTFIELD        DxBobNextField;\\r\\n    PDX_SETSTATE            DxSetState;\\r\\n    PDX_LOCK                DxLock;\\r\\n    PDX_FLIPOVERLAY         DxFlipOverlay;\\r\\n    PDX_FLIPVIDEOPORT       DxFlipVideoPort;\\r\\n    PDX_GETPOLARITY         DxGetPolarity;\\r\\n    PDX_GETCURRENTAUTOFLIP  DxGetCurrentAutoflip;\\r\\n    PDX_GETPREVIOUSAUTOFLIP DxGetPreviousAutoflip;\\r\\n    PDX_TRANSFER\\t    DxTransfer;\\r\\n    PDX_GETTRANSFERSTATUS   DxGetTransferStatus;\\r\\n} DXAPI_INTERFACE, *PDXAPI_INTERFACE;"},"_DX_IRQDATA":{"comment":"","exp":"","file":"dxmini.h","line":143,"type":"Struct","value":"typedef struct _DX_IRQDATA {\\r\\n    DWORD       dwIrqFlags;             \/\/ DDIRQ_ flags ORed in by miniport\\r\\n} DX_IRQDATA, *PDX_IRQDATA;"},"_GUID":{"comment":"","exp":"","file":"ddrawi.h","line":41,"type":"Struct","value":"typedef struct _GUID {\\r\\n        ULONG   Data1;\\r\\n        unsigned short Data2;\\r\\n        unsigned short Data3;\\r\\n        unsigned char Data4[8];\\r\\n    } GUID;"},"_HEAPALIAS":{"comment":"","exp":"","file":"ddrawi.h","line":624,"type":"Struct","value":"typedef struct _HEAPALIAS\\r\\n{\\r\\n    FLATPTR  fpVidMem;                     \/\/ start of aliased vid mem\\r\\n    LPVOID   lpAlias;                      \/\/ start of heap alias\\r\\n    DWORD    dwAliasSize;                  \/\/ size of alias allocated\\r\\n} HEAPALIAS;"},"_HEAPALIASINFO":{"comment":"","exp":"","file":"ddrawi.h","line":632,"type":"Struct","value":"typedef struct _HEAPALIASINFO\\r\\n{\\r\\n    DWORD       dwRefCnt;                  \/\/ reference count of these aliases\\r\\n    DWORD       dwFlags;                   \/\/ flags\\r\\n    DWORD       dwNumHeaps;                \/\/ number of aliased heaps\\r\\n    LPHEAPALIAS lpAliases;                 \/\/ array of heaps\\r\\n} HEAPALIASINFO;"},"_HEAPALIGNMENT":{"comment":"","exp":"","file":"dmemmgr.h","line":72,"type":"Struct","value":"typedef struct _HEAPALIGNMENT\\r\\n{\\r\\n    DWORD                dwSize;\\r\\n    DDSCAPS              ddsCaps;       \/* Indicates which alignment fields are valid.*\/\\r\\n    DWORD                dwReserved;\\r\\n    SURFACEALIGNMENT     ExecuteBuffer; \/* Surfaces tagged with DDSCAPS_EXECUTEBUFFER *\/\\r\\n    SURFACEALIGNMENT     Overlay;       \/* Surfaces tagged with DDSCAPS_OVERLAY       *\/\\r\\n    SURFACEALIGNMENT     Texture;       \/* Surfaces tagged with DDSCAPS_TEXTURE       *\/\\r\\n    SURFACEALIGNMENT     ZBuffer;       \/* Surfaces tagged with DDSCAPS_ZBUFFER       *\/\\r\\n    SURFACEALIGNMENT     AlphaBuffer;   \/* Surfaces tagged with DDSCAPS_ALPHA         *\/\\r\\n    SURFACEALIGNMENT     Offscreen;     \/* Surfaces tagged with DDSCAPS_OFFSCREENPLAIN*\/\\r\\n    SURFACEALIGNMENT     FlipTarget;    \/* Surfaces whose bits are potential primaries i.e. back buffers*\/\\r\\n} HEAPALIGNMENT;"},"_IUNKNOWN_LIST":{"comment":"","exp":"","file":"ddrawi.h","line":666,"type":"Struct","value":"typedef struct _IUNKNOWN_LIST\\r\\n{\\r\\n    struct _IUNKNOWN_LIST FAR *lpLink;\\r\\n    GUID                  FAR *lpGuid;\\r\\n    IUnknown              FAR *lpIUnknown;\\r\\n} IUNKNOWN_LIST;"},"_MDL":{"comment":"","exp":"","file":"dxmini.h","line":30,"type":"Struct","value":"typedef struct _MDL {\\r\\n        struct _MDL *MdlNext;\\r\\n        short MdlSize;\\r\\n        short MdlFlags;\\r\\n        struct _EPROCESS *Process;\\r\\n        ULONG *lpMappedSystemVa;\\r\\n        ULONG *lpStartVa;\\r\\n        ULONG ByteCount;\\r\\n        ULONG ByteOffset;\\r\\n    } MDL;"},"_PROCESS_LIST":{"comment":"","exp":"","file":"ddrawi.h","line":233,"type":"Struct","value":"typedef struct _PROCESS_LIST\\r\\n{\\r\\n    struct _PROCESS_LIST    FAR *lpLink;\\r\\n    DWORD           dwProcessId;\\r\\n    DWORD           dwRefCnt;\\r\\n    DWORD           dwAlphaDepth;\\r\\n    DWORD           dwZDepth;\\r\\n} PROCESS_LIST;"},"_SURFACEALIGNMENT":{"comment":"","exp":"","file":"dmemmgr.h","line":46,"type":"Struct","value":"typedef struct _SURFACEALIGNMENT\\r\\n{\\r\\n    union\\r\\n    {\\r\\n        struct\\r\\n        {\\r\\n            DWORD       dwStartAlignment;\\r\\n            DWORD       dwPitchAlignment;\\r\\n            DWORD       dwFlags;\\r\\n            DWORD       dwReserved2;\\r\\n        } Linear;\\r\\n        struct\\r\\n        {\\r\\n            DWORD       dwXAlignment;\\r\\n            DWORD       dwYAlignment;\\r\\n            DWORD       dwFlags;\\r\\n            DWORD       dwReserved2;\\r\\n        } Rectangular;\\r\\n    };\\r\\n} SURFACEALIGNMENT;"},"_VIDEOMEMORY":{"comment":"","exp":"","file":"ddrawint.h","line":281,"type":"Struct","value":"typedef struct _VIDEOMEMORY\\r\\n{\\r\\n    DWORD               dwFlags;        \/\/ flags\\r\\n    FLATPTR             fpStart;        \/\/ start of memory chunk\\r\\n    union\\r\\n    {\\r\\n        FLATPTR         fpEnd;          \/\/ end of memory chunk\\r\\n        DWORD           dwWidth;        \/\/ width of chunk (rectanglar memory)\\r\\n    };\\r\\n    DDSCAPS             ddsCaps;        \/\/ what this memory CANNOT be used for\\r\\n    DDSCAPS             ddsCapsAlt;     \/\/ what this memory CANNOT be used for if it must\\r\\n    union\\r\\n    {\\r\\n        struct _VMEMHEAP *lpHeap;       \/\/ heap pointer, used by DDRAW\\r\\n        DWORD           dwHeight;       \/\/ height of chunk (rectanguler memory)\\r\\n    };\\r\\n} VIDEOMEMORY;"},"_VIDEOMEMORYINFO":{"comment":"","exp":"","file":"ddrawint.h","line":310,"type":"Struct","value":"typedef struct _VIDEOMEMORYINFO\\r\\n{\\r\\n    FLATPTR             fpPrimary;              \/\/ offset to primary surface\\r\\n    DWORD               dwFlags;                \/\/ flags\\r\\n    DWORD               dwDisplayWidth;         \/\/ current display width\\r\\n    DWORD               dwDisplayHeight;        \/\/ current display height\\r\\n    LONG                lDisplayPitch;          \/\/ current display pitch\\r\\n    DDPIXELFORMAT       ddpfDisplay;            \/\/ pixel format of display\\r\\n    DWORD               dwOffscreenAlign;       \/\/ byte alignment for offscreen surfaces\\r\\n    DWORD               dwOverlayAlign;         \/\/ byte alignment for overlays\\r\\n    DWORD               dwTextureAlign;         \/\/ byte alignment for textures\\r\\n    DWORD               dwZBufferAlign;         \/\/ byte alignment for z buffers\\r\\n    DWORD               dwAlphaAlign;           \/\/ byte alignment for alpha\\r\\n    PVOID               pvPrimary;              \/\/ kernel-mode pointer to primary surface\\r\\n} VIDEOMEMORYINFO;"},"_VIDMEM":{"comment":"","exp":"","file":"ddrawi.h","line":577,"type":"Struct","value":"typedef struct _VIDMEM\\r\\n{\\r\\n    DWORD       dwFlags;    \/\/ flags\\r\\n    FLATPTR     fpStart;    \/\/ start of memory chunk\\r\\n    union\\r\\n    {\\r\\n    FLATPTR     fpEnd;      \/\/ end of memory chunk\\r\\n    DWORD       dwWidth;    \/\/ width of chunk (rectanglar memory)\\r\\n    };\\r\\n    DDSCAPS     ddsCaps;        \/\/ what this memory CANNOT be used for\\r\\n    DDSCAPS     ddsCapsAlt; \/\/ what this memory CANNOT be used for if it must\\r\\n    union\\r\\n    {\\r\\n    LPVMEMHEAP  lpHeap;     \/\/ heap pointer, used by DDRAW\\r\\n    DWORD       dwHeight;   \/\/ height of chunk (rectanguler memory)\\r\\n    };\\r\\n} VIDMEM;"},"_VIDMEMINFO":{"comment":"","exp":"","file":"ddrawi.h","line":606,"type":"Struct","value":"typedef struct _VIDMEMINFO\\r\\n{\\r\\n\/* 0*\/ FLATPTR      fpPrimary;      \/\/ pointer to primary surface\\r\\n\/* 4*\/ DWORD        dwFlags;        \/\/ flags\\r\\n\/* 8*\/ DWORD        dwDisplayWidth;     \/\/ current display width\\r\\n\/* c*\/ DWORD        dwDisplayHeight;    \/\/ current display height\\r\\n\/*10*\/ LONG     lDisplayPitch;      \/\/ current display pitch\\r\\n\/*14*\/ DDPIXELFORMAT    ddpfDisplay;        \/\/ pixel format of display\\r\\n\/*34*\/ DWORD        dwOffscreenAlign;   \/\/ byte alignment for offscreen surfaces\\r\\n\/*38*\/ DWORD        dwOverlayAlign;     \/\/ byte alignment for overlays\\r\\n\/*3c*\/ DWORD        dwTextureAlign;     \/\/ byte alignment for textures\\r\\n\/*40*\/ DWORD        dwZBufferAlign;     \/\/ byte alignment for z buffers\\r\\n\/*44*\/ DWORD        dwAlphaAlign;       \/\/ byte alignment for alpha\\r\\n\/*48*\/ DWORD        dwNumHeaps;     \/\/ number of memory heaps in vmList\\r\\n\/*4c*\/ LPVIDMEM     pvmList;        \/\/ array of heaps\\r\\n} VIDMEMINFO;"},"_VMEMHEAP":{"comment":"","exp":"","file":"dmemmgr.h","line":130,"type":"Struct","value":"typedef struct _VMEMHEAP\\r\\n{\\r\\n    DWORD\\t\\t        dwFlags;\\r\\n    DWORD                       stride;\\r\\n    LPVOID\\t\\t        freeList;\\r\\n    LPVOID\\t\\t        allocList;\\r\\n    DWORD                       dwTotalSize;\\r\\n    FLATPTR                     fpGARTLin;      \/* AGP: GART linear base of heap (app. visible)   *\/\\r\\n    FLATPTR                     fpGARTDev;      \/* AGP: GART device base of heap (driver visible) *\/\\r\\n    DWORD                       dwCommitedSize; \/* AGP: Number of bytes commited to heap          *\/\\r\\n    \/*\\r\\n     * Extended alignment data:\\r\\n     * Filled in by DirectDraw in response to a GetHeapAlignment HAL call.\\r\\n     *\/\\r\\n    DWORD                       dwCoalesceCount;\\r\\n    HEAPALIGNMENT               Alignment;\\r\\n    \/*\\r\\n     * These are analogous to VIDMEM.ddsCaps and VIDMEM.ddsCapsAlt. These values are queried from the\\r\\n     * driver by a GetDriverInfo call. See the documentation for GUID_DDMoreSurfaceCaps\\r\\n     *\/\\r\\n    DDSCAPSEX                   ddsCapsEx;\\r\\n    DDSCAPSEX                   ddsCapsExAlt;\\r\\n#ifndef IS_16\\r\\n    \/\/ Full physical address of heap base for NT AGP heaps.\\r\\n    LARGE_INTEGER               liPhysAGPBase;\\r\\n#endif\\r\\n    \/\/ hdev for use with VidMemAllocAligned on NT.  Set by the system at\\r\\n    \/\/ initialization time.\\r\\n    HANDLE                      hdevAGP;\\r\\n    \/\/ Physical reservation handle for NT heaps.\\r\\n    LPVOID                      pvPhysRsrv;\\r\\n#if (NTDDI_VERSION >= NTDDI_WINXP)\\r\\n    BYTE*                       pAgpCommitMask;\\r\\n    DWORD                       dwAgpCommitMaskSize;\\r\\n#endif\\r\\n} VMEMHEAP;"},"_VMEML":{"comment":"","exp":"","file":"dmemmgr.h","line":100,"type":"Struct","value":"typedef struct _VMEML\\r\\n{\\r\\n    struct _VMEML \\tFAR *next;\\r\\n    FLATPTR\\t\\tptr;\\r\\n    DWORD\\t\\tsize;\\r\\n    BOOL                bDiscardable;\\r\\n} VMEML, FAR *LPVMEML, FAR * FAR *LPLPVMEML;"},"_VMEMR":{"comment":"","exp":"","file":"dmemmgr.h","line":108,"type":"Struct","value":"typedef struct _VMEMR\\r\\n{\\r\\n    struct _VMEMR \\tFAR *next;\\r\\n    struct _VMEMR       FAR *prev;\\r\\n    \/*\\r\\n     * The pUp, pDown, pLeft and pRight members were removed in DX5\\r\\n     *\/\\r\\n    struct _VMEMR \\tFAR *pUp;\\r\\n    struct _VMEMR \\tFAR *pDown;\\r\\n    struct _VMEMR \\tFAR *pLeft;\\r\\n    struct _VMEMR \\tFAR *pRight;\\r\\n    FLATPTR\\t\\tptr;\\r\\n    DWORD\\t\\tsize;\\r\\n    DWORD               x;\\r\\n    DWORD               y;\\r\\n    DWORD               cx;\\r\\n    DWORD               cy;\\r\\n    DWORD\\t\\tflags;\\r\\n    FLATPTR             pBits;\\r\\n    BOOL                bDiscardable;\\r\\n} VMEMR, FAR *LPVMEMR, FAR * FAR *LPLPVMEMR;"},"__REQUIRED_RPCNDR_H_VERSION__":{"comment":"","exp":"500","file":"cloneviewhelper.h","line":13,"type":"Integer","value":500},"__REQUIRED_RPCSAL_H_VERSION__":{"comment":"","exp":"100","file":"cloneviewhelper.h","line":18,"type":"Integer","value":100},"tagAdapter":{"comment":"","exp":"","file":"cloneviewhelper.h","line":90,"type":"Struct","value":"typedef struct tagAdapter\\r\\n{\\r\\n    WCHAR AdapterName[128];\\r\\n    int numSources;\\r\\n    Sources sources[1];\\r\\n} Adapter;"},"tagAdapters":{"comment":"","exp":"","file":"cloneviewhelper.h","line":97,"type":"Struct","value":"typedef struct tagAdapters\\r\\n{\\r\\n    int numAdapters;\\r\\n    Adapter adapter[1];\\r\\n} Adapters;"},"tagDisplayMode":{"comment":"","exp":"","file":"cloneviewhelper.h","line":105,"type":"Struct","value":"typedef struct tagDisplayMode\\r\\n{\\r\\n    WCHAR DeviceName[32];\\r\\n    DEVMODEW devMode;\\r\\n} DisplayMode;"},"tagDisplayModes":{"comment":"","exp":"","file":"cloneviewhelper.h","line":111,"type":"Struct","value":"typedef struct tagDisplayModes\\r\\n{\\r\\n    int numDisplayModes;\\r\\n    DisplayMode displayMode[1];\\r\\n} DisplayModes;"},"tagSources":{"comment":"","exp":"","file":"cloneviewhelper.h","line":83,"type":"Struct","value":"typedef struct tagSources\\r\\n{\\r\\n    ULONG sourceId;\\r\\n    int numTargets;\\r\\n    ULONG aTargets[1];\\r\\n} Sources;"}},"__includes_list":{"D:|DEV|Win_10_SDK|Include|10.0.19041.0|um|cloneviewhelper.h":[["rpc.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\shared\\rpc.h"],["rpcndr.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\shared\\rpcndr.h"],["windows.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\um\\Windows.h"],["ole2.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\um\\Ole2.h"],["oaidl.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\um\\OAIdl.h"],["ocidl.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\um\\OCIdl.h"],["winapifamily.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\shared\\winapifamily.h"]],"D:|DEV|Win_10_SDK|Include|10.0.19041.0|um|ddkernel.h":[["winapifamily.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\shared\\winapifamily.h"],["objbase.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\um\\objbase.h"]],"D:|DEV|Win_10_SDK|Include|10.0.19041.0|um|ddkmapi.h":[["winapifamily.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\shared\\winapifamily.h"]],"D:|DEV|Win_10_SDK|Include|10.0.19041.0|um|ddrawi.h":[["winapifamily.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\shared\\winapifamily.h"],["dmemmgr.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\um\\dmemmgr.h"],["dciddi.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\shared\\dciddi.h"]],"D:|DEV|Win_10_SDK|Include|10.0.19041.0|um|ddrawint.h":[["winapifamily.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\shared\\winapifamily.h"],["ddraw.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\um\\ddraw.h"],["dvp.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\um\\dvp.h"],["ddraw.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\um\\ddraw.h"],["dvp.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\um\\dvp.h"],["ddraw.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\um\\ddraw.h"],["dvp.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\um\\dvp.h"]],"D:|DEV|Win_10_SDK|Include|10.0.19041.0|um|dmemmgr.h":[["winapifamily.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\shared\\winapifamily.h"]],"D:|DEV|Win_10_SDK|Include|10.0.19041.0|um|dvp.h":[["winapifamily.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\shared\\winapifamily.h"],["objbase.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\um\\objbase.h"]],"D:|DEV|Win_10_SDK|Include|10.0.19041.0|um|dxmini.h":[["winapifamily.h","D:\\DEV\\Win_10_SDK\\Include\\10.0.19041.0\\shared\\winapifamily.h"]]}}